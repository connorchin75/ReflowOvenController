ADDR   | VALUES        | LINE  | SOURCE CODE
=================================================================================================
       |               | 00001 | //The following defines were inserted from the command line:
       |      = 0x0001 | 00002 | #define __XINA_CMD__
       |               | 00003 | //end of command line defines
       |               | 00004 | #include "C:/Program Files/SXC/include/sxc-art0\XInC2.asm"

                                 //
                                 // "ReflowOvenController.main"
//============================== //==============================================================
                                 // "ReflowOvenController.main" -> "XInC2.asm"
                                 //

       |               | 00001 | //*************************************************************************************************
       |               | 00002 | //************************ (C) 2001 - 2006, Eleven Engineering Incorporated ***********************
       |               | 00003 | //*************************************************************************************************
       |               | 00004 | //**
       |               | 00005 | //**		Tabs:	This file looks best with tab stops set every 6 spaces.
       |               | 00006 | //**
       |               | 00007 | //*************************************************************************************************
       |               | 00008 | //*************************************************************************************************
       |               | 00009 | //**
       |               | 00010 | //**          File:  XInC2.h
       |               | 00011 | //**       Project:  XInC2 Library
       |               | 00012 | //**       Created:  05 Sep 2006 by Dan Beutel
       |               | 00013 | //**       Revised:  08 Sep 2006 by Dan Beutel
       |               | 00014 | //**
       |               | 00015 | //**   Description:  Constants used for XInC2 Assembly programming.
       |               | 00016 | //**
       |               | 00017 | //** Compatibility:  Requires XInA v4.4 or higher.
       |               | 00018 | //**
       |               | 00019 | //**    Disclaimer:  You may incorporate this sample source code into your program(s) without
       |               | 00020 | //**                 restriction.  This sample source code has been provided "AS IS" and the
       |               | 00021 | //**                 responsibility for its operation is yours.  You are not permitted to
       |               | 00022 | //**                 redistribute this sample source code as "Eleven sample source code" after
       |               | 00023 | //**                 having made changes.  If you are going to re-distribute the source, we require
       |               | 00024 | //**                 that you make it clear in the source that the code was descended from Eleven
       |               | 00025 | //**                 sample source code, but that you have made changes.
       |               | 00026 | //**
       |               | 00027 | //*************************************************************************************************
       |               | 00028 | //************************************************************************************************* 
       |               | 00029 | //=================================================================================================
       |               | 00030 | // Register Set
       |               | 00031 | //=================================================================================================
       |               | 00032 | 
       |      = %0     | 00033 | 		#define	r0				%0
       |      = %1     | 00034 | 		#define	r1				%1
       |      = %2     | 00035 | 		#define	r2				%2
       |      = %3     | 00036 | 		#define	r3				%3
       |      = %4     | 00037 | 		#define	r4				%4
       |      = %5     | 00038 | 		#define	r5				%5
       |      = %6     | 00039 | 		#define	r6				%6
       |      = %7     | 00040 | 		#define	r7				%7
       |      = %7     | 00041 | 		#define	sp				%7
       |               | 00042 | 
       |               | 00043 | //=================================================================================================
       |               | 00044 | // Conditional Branch Tests
       |               | 00045 | //=================================================================================================
       |               | 00046 | 
       |               | 00047 | // 	Test NZVC Bits (Clear or Set)
       |               | 00048 | //		#define	NC				0xB
       |               | 00049 | //		#define	NS				0x3
       |               | 00050 | //		#define	ZC				0xA
       |               | 00051 | //		#define	ZS				0x2
       |               | 00052 | //		#define	VC				0x9
       |               | 00053 | //		#define	VS				0x1
       |               | 00054 | //		#define	CC				0x8
       |               | 00055 | //		#define	CS				0x0
       |               | 00056 | //
       |               | 00057 | //	Comparison
       |               | 00058 | //		#define	EQ				0x2
       |               | 00059 | //		#define	NE				0xA
       |               | 00060 | //
       |               | 00061 | //		#define	LT0				0x3
       |               | 00062 | //		#define	LE0				0x7
       |               | 00063 | //		#define	GE0				0xB
       |               | 00064 | //		#define	GT0				0xF
       |               | 00065 | //
       |               | 00066 | //	Signed Comparison
       |               | 00067 | //		#define	LT				0x5
       |               | 00068 | //		#define	LE				0x6
       |               | 00069 | //		#define	GE				0xD
       |               | 00070 | //		#define	GT				0xE
       |               | 00071 | //
       |               | 00072 | //	Unsigned Comparison
       |               | 00073 | //		#define	ULT				0x0
       |               | 00074 | //		#define	ULE				0x4
       |               | 00075 | //		#define	UGE				0x8
       |               | 00076 | //		#define	UGT				0xC
       |               | 00077 | 
       |               | 00078 | //=================================================================================================
       |               | 00079 | // I/O Peripheral Addresses common to both iopage = 0 and iopage = 1
       |               | 00080 | //=================================================================================================
       |               | 00081 | 
       |               | 00082 | 	// SCU (Supervisory Control Unit)
       |      = 0x0000 | 00083 | 		#define	SCUreg			0x00
       |      = 0x0001 | 00084 | 		#define	SCUpc				0x01
       |      = 0x0002 | 00085 | 		#define	SCUcc				0x02
       |      = 0x0003 | 00086 | 		#define	SCUtime			0x03
       |      = 0x0003 | 00087 | 		#define	SCUpntr			0x03
       |      = 0x0004 | 00088 | 		#define	SCUbkpt			0x04
       |      = 0x0004 | 00089 | 		#define	SCUstop			0x04
       |      = 0x0005 | 00090 | 		#define	SCUwait			0x05
       |      = 0x0005 | 00091 | 		#define	SCUiopageWR			0x05
       |      = 0x0006 | 00092 | 		#define	SCUrsrc			0x06
       |      = 0x0006 | 00093 | 		#define	SCUup				0x06
       |      = 0x0007 | 00094 | 		#define	SCUiopageRD			0x07
       |      = 0x0007 | 00095 | 		#define	SCUdown			0x07
       |               | 00096 | 
       |               | 00097 | 
       |               | 00098 | 	//LFSR0 (Linear Feedback Shift Register)
       |      = 0x0008 | 00099 | 		#define	LFSR0cfg			0x08
       |      = 0x0009 | 00100 | 		#define	LFSR0tapcfg			0x09
       |      = 0x000A | 00101 | 		#define	LFSR0reg			0x0A
       |      = 0x000B | 00102 | 		#define	LFSR0data			0x0B
       |               | 00103 | 
       |               | 00104 | 	//LFSR1 (Linear Feedback Shift Register)
       |      = 0x000C | 00105 | 		#define	LFSR1cfg			0x0C
       |      = 0x000D | 00106 | 		#define	LFSR1tapcfg			0x0D
       |      = 0x000E | 00107 | 		#define	LFSR1reg			0x0E
       |      = 0x000F | 00108 | 		#define	LFSR1data			0x0F
       |               | 00109 | 
       |               | 00110 | 	//VPU (Vector Processing Unit)
       |               | 00111 | 
       |      = 0x0010 | 00112 | 		#define	VPUcfg0			0x10
       |      = 0x0011 | 00113 | 		#define	VPUcfg1			0x11
       |      = 0x0012 | 00114 | 		#define	VPUopAba			0x12
       |      = 0x0013 | 00115 | 		#define	VPUopBba			0x13
       |      = 0x0014 | 00116 | 		#define	VPUopadrmsk			0x14
       |      = 0x0015 | 00117 | 		#define	VPUopA			0x15
       |      = 0x0016 | 00118 | 		#define	VPUopB			0x16
       |      = 0x0017 | 00119 | 		#define	VPUrsba			0x17
       |      = 0x0018 | 00120 | 		#define	VPUrsadrsmk			0x18
       |      = 0x0019 | 00121 | 		#define	VPUrslsw			0x19
       |      = 0x001A | 00122 | 		#define	VPUrsmsw			0x1A
       |      = 0x001B | 00123 | 		#define	VPUrsext			0x1B
       |      = 0x001C | 00124 | 		#define	VPUfilterLength		0x1C
       |               | 00125 | 
       |               | 00126 | 	// SPI0 (Serial Peripheral Interface)
       |      = 0x0034 | 00127 | 		#define	SPI0rx			0x34
       |      = 0x0034 | 00128 | 		#define	SPI0tx			0x34
       |      = 0x0035 | 00129 | 		#define	SPI0cfg			0x35
       |               | 00130 | 
       |               | 00131 | 	// SPI1 (Serial Peripheral Interface)
       |      = 0x0036 | 00132 | 		#define	SPI1rx			0x36
       |      = 0x0036 | 00133 | 		#define	SPI1tx			0x36
       |      = 0x0037 | 00134 | 		#define	SPI1cfg			0x37
       |               | 00135 | 
       |               | 00136 | 	// SFU (Shared Functional Units)
       |      = 0x0038 | 00137 | 		#define	SFUrev			0x38
       |      = 0x0039 | 00138 | 		#define	SFUpack			0x39
       |      = 0x003A | 00139 | 		#define	SFUpop			0x3A
       |      = 0x003B | 00140 | 		#define	SFUls1			0x3B
       |               | 00141 | 
       |               | 00142 | 	// TMRA (TimerA)
       |      = 0x003E | 00143 | 		#define	TMRAcfg			0x3E
       |      = 0x003F | 00144 | 		#define	TMRAcount			0x3F
       |      = 0x0040 | 00145 | 		#define	TMRACCR0			0x40
       |      = 0x0041 | 00146 | 		#define	TMRACCM0cfg			0x41
       |      = 0x0042 | 00147 | 		#define	TMRACCR1			0x42
       |      = 0x0043 | 00148 | 		#define	TMRACCM1cfg			0x43
       |      = 0x0044 | 00149 | 		#define	TMRACCR2			0x44
       |      = 0x0045 | 00150 | 		#define	TMRACCM2cfg			0x45
       |      = 0x0046 | 00151 | 		#define	TMRACCR3			0x46
       |      = 0x0047 | 00152 | 		#define	TMRACCM3cfg			0x47
       |               | 00153 | 
       |               | 00154 | 
       |               | 00155 | 	// GPIO (General Purpose I/O)
       |      = 0x0020 | 00156 |    		#define	GPAin				0x20
       |      = 0x0020 | 00157 | 		#define	GPAout			0x20
       |      = 0x0021 | 00158 | 		#define	GPAcfg			0x21
       |               | 00159 | 
       |      = 0x0022 | 00160 | 		#define	GPBin				0x22
       |      = 0x0022 | 00161 | 		#define	GPBout			0x22
       |      = 0x0023 | 00162 | 		#define	GPBcfg			0x23
       |               | 00163 | 
       |      = 0x0024 | 00164 | 		#define	GPCin				0x24
       |      = 0x0024 | 00165 | 		#define	GPCout			0x24
       |      = 0x0025 | 00166 | 		#define	GPCcfg			0x25
       |               | 00167 | 
       |      = 0x0026 | 00168 | 		#define	GPDin				0x26
       |      = 0x0026 | 00169 | 		#define	GPDout			0x26
       |      = 0x0027 | 00170 | 		#define	GPDcfg			0x27
       |               | 00171 | 
       |      = 0x0028 | 00172 | 		#define	GPEin				0x28
       |      = 0x0028 | 00173 | 		#define	GPEout			0x28
       |      = 0x0029 | 00174 | 		#define	GPEcfg			0x29
       |               | 00175 | 
       |      = 0x002A | 00176 | 		#define	GPFin				0x2A
       |      = 0x002A | 00177 | 		#define	GPFout			0x2A
       |      = 0x002B | 00178 | 		#define	GPFcfg			0x2B
       |               | 00179 | 
       |      = 0x002C | 00180 | 		#define	GPGin				0x2C
       |      = 0x002C | 00181 | 		#define	GPGout			0x2C
       |      = 0x002D | 00182 | 		#define	GPGcfg			0x2D
       |               | 00183 | 
       |      = 0x002E | 00184 | 		#define	GPHin				0x2E
       |      = 0x002E | 00185 | 		#define	GPHout			0x2E
       |      = 0x002F | 00186 | 		#define	GPHcfg			0x2F
       |               | 00187 | 
       |      = 0x0030 | 00188 | 		#define	GPIin				0x30
       |      = 0x0030 | 00189 | 		#define	GPIout			0x30
       |      = 0x0031 | 00190 | 		#define	GPIcfg			0x31
       |               | 00191 | 
       |      = 0x0032 | 00192 | 		#define	GPJin				0x32
       |      = 0x0032 | 00193 | 		#define	GPJout			0x32
       |      = 0x0033 | 00194 | 		#define	GPJcfg			0x33
       |               | 00195 | 
       |               | 00196 | 
       |               | 00197 | //=================================================================================================
       |               | 00198 | // I/O Peripheral Addresses for iopage = 0
       |               | 00199 | //=================================================================================================
       |               | 00200 | 
       |               | 00201 | 	// TMRB (TimerB)
       |      = 0x0048 | 00202 | 		#define	TMRBcfg			0x48
       |      = 0x0049 | 00203 | 		#define	TMRBcount			0x49
       |      = 0x004A | 00204 | 		#define	TMRBCCR0			0x4A
       |      = 0x004B | 00205 | 		#define	TMRBCCM0cfg			0x4B
       |      = 0x004C | 00206 | 		#define	TMRBCCR1			0x4C
       |      = 0x004D | 00207 | 		#define	TMRBCCM1cfg			0x4D
       |               | 00208 | 
       |               | 00209 | 
       |               | 00210 | 
       |               | 00211 | 	// XInC1 BBU names for ease of use with XInC1 code
       |      = 0x0058 | 00212 | 		#define	BBUcfg			0x58
       |      = 0x0058 | 00213 | 		#define	BBUstatus			0x58
       |      = 0x005A | 00214 | 		#define	BBUtx				0x5A
       |      = 0x005A | 00215 | 		#define	BBUrx				0x5A
       |      = 0x005B | 00216 | 		#define	BBUbrg			0x5B
       |      = 0x005C | 00217 | 		#define	BBUtime			0x5C
       |      = 0x005D | 00218 | 		#define	BBUrx4			0x5D
       |      = 0x005E | 00219 | 		#define	BBUrx6			0x5E
       |      = 0x005F | 00220 | 		#define	BBUstart			0x5F
       |               | 00221 | 
       |               | 00222 | 
       |               | 00223 | 	// BBU0
       |      = 0x0058 | 00224 | 		#define	BBU0cfg0			0x58
       |      = 0x0059 | 00225 | 		#define	BBU0cfg1 			0x59
       |      = 0x005A | 00226 | 		#define	BBU0tx			0x5A
       |      = 0x005A | 00227 | 		#define	BBU0rx			0x5A
       |      = 0x005B | 00228 | 		#define	BBU0brg			0x5B
       |      = 0x005C | 00229 | 		#define	BBU0time			0x5C
       |      = 0x005D | 00230 | 		#define	BBU0rx4			0x5D
       |      = 0x005E | 00231 | 		#define	BBU0rx6			0x5E
       |      = 0x005F | 00232 | 		#define	BBU0start			0x5F
       |               | 00233 | 
       |               | 00234 | 	// BBU1
       |      = 0x0060 | 00235 | 		#define	BBU1cfg0			0x60
       |      = 0x0061 | 00236 | 		#define	BBU1cfg1 			0x61
       |      = 0x0062 | 00237 | 		#define	BBU1tx			0x62
       |      = 0x0062 | 00238 | 		#define	BBU1rx			0x62
       |      = 0x0063 | 00239 | 		#define	BBU1brg			0x63
       |      = 0x0064 | 00240 | 		#define	BBU1time			0x64
       |      = 0x0065 | 00241 | 		#define	BBU1flow			0x65
       |      = 0x0065 | 00242 | 		#define	BBU1rx4			0x65
       |      = 0x0067 | 00243 | 		#define	BBU1start			0x67
       |               | 00244 | 
       |               | 00245 | 	// DASI (Digital Audio Serial Interface)
       |      = 0x0068 | 00246 | 		#define	DASIconfig0			0x68
       |      = 0x0069 | 00247 | 		#define	DASIconfig1			0x69
       |      = 0x006A | 00248 | 		#define	DASIconfig2			0x6A
       |      = 0x006B | 00249 | 		#define	DASIstatus0			0x6B
       |      = 0x006C | 00250 | 		#define	DASIstatus1			0x6C
       |      = 0x006D | 00251 | 		#define	DASIstatus2			0x6D
       |               | 00252 | 
       |      = 0x006B | 00253 | 	       #define    DASIrx0         	   	0x6B
       |      = 0x006C | 00254 | 	       #define    DASIrx1         	   	0x6C
       |      = 0x006D | 00255 | 	       #define    DASIrx2         	   	0x6D
       |      = 0x006B | 00256 | 	       #define    DASItx0            	0x6B
       |      = 0x006C | 00257 | 	       #define    DASItx1            	0x6C
       |      = 0x006D | 00258 | 	       #define    DASItx2            	0x6D
       |      = 0x006E | 00259 | 	       #define	DASIcount0			0x6E
       |      = 0x006F | 00260 | 	       #define	DASIcount1			0x6F
       |               | 00261 | 
       |               | 00262 | 
       |               | 00263 | 
       |               | 00264 | 	// SCX (Supervisory Control Extensions)
       |      = 0x0070 | 00265 | 		#define	SCXioCfgP			0x70
       |      = 0x0071 | 00266 | 		#define	SCXioCfgD			0x71
       |               | 00267 | 
       |      = 0x0072 | 00268 | 		#define	SCXclkCfg			0x72
       |      = 0x0073 | 00269 | 		#define	SCXaltCfg			0x73
       |      = 0x0074 | 00270 | 		#define	SCXPLLCfg0			0x74
       |      = 0x0075 | 00271 | 		#define	SCXPLLCfg1			0x75
       |      = 0x0076 | 00272 | 		#define	SCXmemcol			0x76
       |      = 0x0077 | 00273 | 		#define	SCXcount			0x77
       |               | 00274 | 
       |               | 00275 | 	// SMU (Sleep Mode Unit)
       |      = 0x0078 | 00276 | 		#define	SMUcfg0			0x78
       |      = 0x0079 | 00277 | 		#define	SMUcfg1			0x79
       |               | 00278 | 
       |               | 00279 | 	//ADC
       |      = 0x007D | 00280 | 	     #define      ADCcfg0			0x7D
       |      = 0x007E | 00281 | 	     #define      ADCcfg1			0x7E
       |      = 0x007F | 00282 | 	     #define      ADCdata			0x7F
       |               | 00283 | 
       |               | 00284 | //=================================================================================================
       |               | 00285 | // I/O Peripheral Addresses for iopage = 1
       |               | 00286 | //=================================================================================================
       |               | 00287 | 
       |               | 00288 | 	// Quant0 (ADPCM Difference Quantizer)
       |      = 0x0048 | 00289 | 		#define	Quant0cfg			0x48
       |      = 0x0049 | 00290 | 		#define	Quant0pred			0x49
       |      = 0x0049 | 00291 | 		#define	Quant0dec			0x49
       |      = 0x004A | 00292 | 		#define	Quant0step			0x4A
       |      = 0x004A | 00293 | 		#define	Quant0delta			0x4A
       |      = 0x004B | 00294 | 		#define	Quant0samp			0x4B
       |               | 00295 | 
       |               | 00296 | 	// Quant1 (ADPCM Difference Quantizer)
       |      = 0x004C | 00297 | 		#define	Quant1cfg			0x4C
       |      = 0x004D | 00298 | 		#define	Quant1pred			0x4D
       |      = 0x004D | 00299 | 		#define	Quant1dec			0x4D
       |      = 0x004E | 00300 | 		#define	Quant1step			0x4E
       |      = 0x004E | 00301 | 		#define	Quant1delta			0x4E
       |      = 0x004F | 00302 | 		#define	Quant1samp			0x4F
       |               | 00303 | 
       |               | 00304 | 	// Quant2 (ADPCM Difference Quantizer)
       |      = 0x0050 | 00305 | 		#define	Quant2cfg			0x50
       |      = 0x0051 | 00306 | 		#define	Quant2pred			0x51
       |      = 0x0051 | 00307 | 		#define	Quant2dec			0x51
       |      = 0x0052 | 00308 | 		#define	Quant2step			0x52
       |      = 0x0052 | 00309 | 		#define	Quant2delta			0x52
       |      = 0x0053 | 00310 | 		#define	Quant2samp			0x53
       |               | 00311 | 
       |               | 00312 | 	// Quant3 (ADPCM Difference Quantizer)
       |      = 0x0054 | 00313 | 		#define	Quant3cfg			0x54
       |      = 0x0055 | 00314 | 		#define	Quant3pred			0x55
       |      = 0x0055 | 00315 | 		#define	Quant3dec			0x55
       |      = 0x0056 | 00316 | 		#define	Quant3step			0x56
       |      = 0x0056 | 00317 | 		#define	Quant3delta			0x56
       |      = 0x0057 | 00318 | 		#define	Quant3samp			0x57
       |               | 00319 | 
       |               | 00320 | 	// InvQuant0 (ADPCM Inverse Difference Quantizer)
       |      = 0x0058 | 00321 | 		#define	InvQuant0cfg		0x58
       |      = 0x0059 | 00322 | 		#define	InvQuant0delta		0x59
       |      = 0x0059 | 00323 | 		#define	InvQuant0vpdiff		0x59
       |      = 0x005A | 00324 | 		#define	InvQuant0step		0x5A
       |               | 00325 | 
       |               | 00326 | 	// InvQuant1 (ADPCM Inverse Difference Quantizer)
       |      = 0x005C | 00327 | 		#define	InvQuant1cfg		0x5C
       |      = 0x005D | 00328 | 		#define	InvQuant1delta		0x5D
       |      = 0x005D | 00329 | 		#define	InvQuant1vpdiff		0x5D
       |      = 0x005E | 00330 | 		#define	InvQuant1step		0x5E
       |               | 00331 | 
       |               | 00332 | 	// InvQuant2 (ADPCM Inverse Difference Quantizer)
       |      = 0x0060 | 00333 | 		#define	InvQuant2cfg		0x60
       |      = 0x0061 | 00334 | 		#define	InvQuant2delta		0x61
       |      = 0x0061 | 00335 | 		#define	InvQuant2vpdiff		0x61
       |      = 0x0062 | 00336 | 		#define	InvQuant2step		0x62
       |               | 00337 | 
       |               | 00338 | 	// InvQuant3 (ADPCM Inverse Difference Quantizer)
       |      = 0x0064 | 00339 | 		#define	InvQuant3cfg		0x64
       |      = 0x0065 | 00340 | 		#define	InvQuant3delta		0x65
       |      = 0x0065 | 00341 | 		#define	InvQuant3vpdiff		0x65
       |      = 0x0066 | 00342 | 		#define	InvQuant3step		0x66
       |               | 00343 | 
       |               | 00344 | 	// Accum0 (Accumulator)
       |      = 0x0068 | 00345 | 		#define	Accum0cfg			0x68
       |      = 0x0069 | 00346 | 		#define	Accum0high			0x69
       |      = 0x006A | 00347 | 		#define	Accum0low			0x6A
       |      = 0x006B | 00348 | 		#define	Accum0addsubhigh		0x6B
       |      = 0x006C | 00349 | 		#define	Accum0addlow		0x6C
       |      = 0x006D | 00350 | 		#define	Accum0sublow		0x6D
       |               | 00351 | 
       |               | 00352 | 	// Accum1 (Accumulator)
       |      = 0x006E | 00353 | 		#define	Accum1cfg			0x6E
       |      = 0x006F | 00354 | 		#define	Accum1high			0x6F
       |      = 0x0070 | 00355 | 		#define	Accum1low			0x70
       |      = 0x0071 | 00356 | 		#define	Accum1addsubhigh		0x71
       |      = 0x0072 | 00357 | 		#define	Accum1addlow		0x72
       |      = 0x0073 | 00358 | 		#define	Accum1sublow		0x73
       |               | 00359 | 
       |               | 00360 | 
       |               | 00361 | 
       |               | 00362 | //ADC Configuration
       |      = 0x000F | 00363 | 		#define 	ADC_ENABLE			15
       |      = 0x000C | 00364 | 		#define 	ADC_CLK_DIV			12
       |      = 0x0009 | 00365 | 		#define 	ADC_START			9
       |      = 0x0000 | 00366 | 		#define	MUX_ENABLE			0
       |               | 00367 | 
       |               | 00368 | //configuration0
       |      = 0x000F | 00369 | 		#define	clrA		15	//clear accumuluator(WRITE ONLY)
       |      = 0x000E | 00370 | 		#define	clraaOPB	14	//USE FOR VECTOR MAC clear OPBa
       |      = 0x000D | 00371 | 		#define	addnsubCfg	13	//add/subtract mode
       |      = 0x000C | 00372 | 		#define	RSh		12	//result shift config
       |      = 0x000B | 00373 | 		#define	Rinc		11	//increment Result base address
       |      = 0x000A | 00374 | 		#define	Binc		10	//increment OPB base address
       |      = 0x0009 | 00375 | 		#define	ADec		9	//decimation mode
       |      = 0x0008 | 00376 | 		#define	Ainc		8	//increment OPA base address
       |      = 0x0007 | 00377 | 		#define	ACcfg		7	//accumulaor source config
       |      = 0x0006 | 00378 | 		#define	aB		6	//adder operandB config
       |      = 0x0005 | 00379 | 		#define	aA		5	//adder operandA config
       |      = 0x0003 | 00380 | 		#define	DFW		3	//data field to write
       |      = 0x0002 | 00381 | 		#define	Rdest		2	//result memory destination
       |      = 0x0000 | 00382 | 		#define	OPsrc		0	//operand source configuration
       |               | 00383 | 
       |               | 00384 | //configuration1
       |      = 0x0007 | 00385 | 		#define	Pipe		7	//piple line enable
       |      = 0x0005 | 00386 | 		#define	RS		5	//Result saturation
       |      = 0x0004 | 00387 | 		#define	RR		4	//result rounding
       |      = 0x0003 | 00388 | 		#define	AddAlign	3	//configure alignemnt of operands for add operation
       |      = 0x0002 | 00389 | 		#define	MS		2	//multiplier shift
       |      = 0x0001 | 00390 | 		#define	Btyp		1	//operand B type
       |      = 0x0000 | 00391 | 		#define	Atyp		0	//operand A type
       |               | 00392 | //Timer configuration
       |               | 00393 | 
       |      = 0x18BB | 00394 | #define 	XPD_EchoString_ROM         	0x18BB
       |               | 00395 |  //=================================================================================================
       |               | 00396 |  // Boolean Logic
       |               | 00397 |  //=================================================================================================
       |               | 00398 | 
       |      = 0x0001 | 00399 | 		#define	true				1
       |      = 0x0000 | 00400 |  		#define	false				0
       |               | 00401 | 
       |               | 00402 |  //=================================================================================================
       |               | 00403 |  // Hardware Semaphores
       |               | 00404 |  //=================================================================================================
       |               | 00405 | 
       |      = 0x0001 | 00406 |   		#define	kHardwareSemaphore0	1 << 0
       |      = 0x0002 | 00407 |  		#define	kHardwareSemaphore1	1 << 1
       |      = 0x0004 | 00408 | 		#define	kHardwareSemaphore2	1 << 2
       |      = 0x0008 | 00409 |  		#define	kHardwareSemaphore3	1 << 3
       |      = 0x0010 | 00410 |  		#define	kHardwareSemaphore4	1 << 4
       |      = 0x0020 | 00411 |  		#define	kHardwareSemaphore5	1 << 5
       |      = 0x0040 | 00412 | 		#define	kHardwareSemaphore6	1 << 6
       |      = 0x0080 | 00413 |  		#define	kHardwareSemaphore7	1 << 7
       |      = 0x0100 | 00414 |  		#define	kHardwareSemaphore8	1 << 8
       |      = 0x0200 | 00415 |  		#define	kHardwareSemaphore9	1 << 9
       |      = 0x0400 | 00416 |  		#define	kHardwareSemaphore10	1 << 10
       |      = 0x0800 | 00417 |  		#define	kHardwareSemaphore11	1 << 11
       |      = 0x1000 | 00418 |  		#define	kHardwareSemaphore12	1 << 12
       |      = 0x2000 | 00419 |  		#define	kHardwareSemaphore13	1 << 13
       |      = 0x4000 | 00420 |  		#define	kHardwareSemaphore14	1 << 14
       |      = 0x8000 | 00421 | 		#define	kHardwareSemaphore15	1 << 15
       |               | 00422 | 
       |               | 00423 | //*****************************************************************************
       |               | 00424 | //*****************************************************************************
       |               | 00425 | //**  XInC2 Mask ROM Data
       |               | 00426 | //*****************************************************************************
       |               | 00427 | //*****************************************************************************
       |               | 00428 | 
       |      = 0x00D6 | 00429 | 		#define	table_bintohex				0x00D6
       |               | 00430 | 			//"0123456789ABCDEF"
       |               | 00431 | 		
       |               | 00432 | 		
       |      = 0x2000 | 00433 | 		#define	BitShiftLeftByXTableROM			0x2000
       |               | 00434 | 			//0b1111111111111111
       |               | 00435 | 			//0b1111111111111110
       |               | 00436 | 			//0b1111111111111100
       |               | 00437 | 			//0b1111111111111000
       |               | 00438 | 			//0b1111111111110000
       |               | 00439 | 			//0b1111111111100000
       |               | 00440 | 			//0b1111111111000000
       |               | 00441 | 			//0b1111111110000000
       |               | 00442 | 			//0b1111111100000000
       |               | 00443 | 			//0b1111111000000000
       |               | 00444 | 			//0b1111110000000000
       |               | 00445 | 			//0b1111100000000000
       |               | 00446 | 			//0b1111000000000000
       |               | 00447 | 			//0b1110000000000000
       |               | 00448 | 			//0b1100000000000000
       |               | 00449 | 			//0b1000000000000000
       |               | 00450 | 		
       |               | 00451 | 		
       |      = 0x2010 | 00452 | 		#define	BitShiftLeftBy16MinusXTableROM	0x2010
       |               | 00453 | 			//0b0000000000000000
       |               | 00454 | 			//0b1000000000000000
       |               | 00455 | 			//0b1100000000000000
       |               | 00456 | 			//0b1110000000000000
       |               | 00457 | 			//0b1111000000000000
       |               | 00458 | 			//0b1111100000000000
       |               | 00459 | 			//0b1111110000000000
       |               | 00460 | 			//0b1111111000000000
       |               | 00461 | 			//0b1111111100000000
       |               | 00462 | 			//0b1111111110000000
       |               | 00463 | 			//0b1111111111000000
       |               | 00464 | 			//0b1111111111100000
       |               | 00465 | 			//0b1111111111110000
       |               | 00466 | 			//0b1111111111111000
       |               | 00467 | 			//0b1111111111111100
       |               | 00468 | 			//0b1111111111111110
       |               | 00469 | 		
       |               | 00470 | 		
       |      = 0x2020 | 00471 | 		#define	BitShiftRightByXTableROM		0x2020
       |               | 00472 | 			//0b1111111111111111
       |               | 00473 | 			//0b0111111111111111
       |               | 00474 | 			//0b0011111111111111
       |               | 00475 | 			//0b0001111111111111
       |               | 00476 | 			//0b0000111111111111
       |               | 00477 | 			//0b0000011111111111
       |               | 00478 | 			//0b0000001111111111
       |               | 00479 | 			//0b0000000111111111
       |               | 00480 | 			//0b0000000011111111
       |               | 00481 | 			//0b0000000001111111
       |               | 00482 | 			//0b0000000000111111
       |               | 00483 | 			//0b0000000000011111
       |               | 00484 | 			//0b0000000000001111
       |               | 00485 | 			//0b0000000000000111
       |               | 00486 | 			//0b0000000000000011
       |               | 00487 | 			//0b0000000000000001
       |               | 00488 | 		
       |               | 00489 | 		
       |      = 0x2030 | 00490 | 		#define	BitShiftRightBy16MinusXTableROM	0x2030
       |               | 00491 | 			//0b0000000000000000
       |               | 00492 | 			//0b0000000000000001
       |               | 00493 | 			//0b0000000000000011
       |               | 00494 | 			//0b0000000000000111
       |               | 00495 | 			//0b0000000000001111
       |               | 00496 | 			//0b0000000000011111
       |               | 00497 | 			//0b0000000000111111
       |               | 00498 | 			//0b0000000001111111
       |               | 00499 | 			//0b0000000011111111
       |               | 00500 | 			//0b0000000111111111
       |               | 00501 | 			//0b0000001111111111
       |               | 00502 | 			//0b0000011111111111
       |               | 00503 | 			//0b0000111111111111
       |               | 00504 | 			//0b0001111111111111
       |               | 00505 | 			//0b0011111111111111
       |               | 00506 | 			//0b0111111111111111
       |               | 00507 | 		
       |               | 00508 | 		
       |               | 00509 | 	// Useful Messages for use with XPD_EchoString in Mask ROM
       |               | 00510 | 	
       |      = 0x00E6 | 00511 | 		#define	MSG_HEX_PREFIX		0x00E6
       |               | 00512 | 			//"0x", EOS
       |               | 00513 | 			
       |      = 0x00E9 | 00514 | 		#define	MSG_COMMA			0x00E9
       |               | 00515 | 			//", ", EOS
       |               | 00516 | 			
       |      = 0x00EC | 00517 | 		#define	MSG_NEWLINE			0x00EC
       |               | 00518 | 			//CR, LF, EOS
       |               | 00519 | 			
       |      = 0x00EF | 00520 | 		#define	MSG_SPACE			0x00EF
       |               | 00521 | 			//" ", EOS
       |               | 00522 | 
       |               | 00523 | //*****************************************************************************
       |               | 00524 | //*****************************************************************************
       |               | 00525 | //**  XInC2 Mask ROM Routines
       |               | 00526 | //*****************************************************************************
       |               | 00527 | //*****************************************************************************
       |               | 00528 | 
       |               | 00529 | 		//=============================================================================
       |               | 00530 | 		// Input Params:	None
       |               | 00531 | 		// Output Params:	None
       |               | 00532 | 		//-----------------------------------------------------------------------------
       |               | 00533 | 		// Description:	Switches to SIMD mode and enters HardReset.  Can be called
       |               | 00534 | 		//			safely from any thread.
       |               | 00535 | 		//
       |               | 00536 | 		//			Does not return.
       |               | 00537 | 		//=============================================================================
       |      = 0x0002 | 00538 | 		#define	SoftReset			0x0002
       |               | 00539 | 		
       |               | 00540 | 		
       |               | 00541 | 		//=============================================================================
       |               | 00542 | 		// Input Params:	r0 = 16-bit Termination Code
       |               | 00543 | 		// Output Params:	None
       |               | 00544 | 		//-----------------------------------------------------------------------------
       |               | 00545 | 		// Description:	Stops all threads, echos the termination code to the XPD
       |               | 00546 | 		//			module once formatted in hexadecimal, and then goes into an
       |               | 00547 | 		//			infinite loop echoing the termination code to the SPI0 bus.
       |               | 00548 | 		//
       |               | 00549 | 		//			This may be called by the boot loader upon a failed boot and
       |               | 00550 | 		//			can be safely called by user code from any thread to signify
       |               | 00551 | 		//			a fatal error condition. 
       |               | 00552 | 		//
       |               | 00553 | 		//			Does not return.
       |               | 00554 | 		//=============================================================================
       |      = 0x0006 | 00555 | 		#define	ShowTerminationCode	0x0006
       |               | 00556 | 		
       |               | 00557 | 		//=============================================================================
       |               | 00558 | 		// Input Params:	Inline configuration word
       |               | 00559 | 		// Output Params:	None
       |               | 00560 | 		//-----------------------------------------------------------------------------
       |               | 00561 | 		// Description:	Writes the current RAM image to the EEPROM.
       |               | 00562 | 		//
       |               | 00563 | 		//			Does not return.
       |               | 00564 | 		//=============================================================================
       |      = 0x0014 | 00565 | 		#define	ProgramSPIEEPROM		0x0014
       |               | 00566 | 
       |               | 00567 | 		//=============================================================================
       |               | 00568 | 		// Input Params:	r1 = ASCII Character to echo
       |               | 00569 | 		//			r6 = Return Address
       |               | 00570 | 		// Output Params:	r0 = Garbage
       |               | 00571 | 		//			r4 = Garbage
       |               | 00572 | 		//			r5 = Garbage
       |               | 00573 | 		//			r6 = Garbage
       |               | 00574 | 		//-----------------------------------------------------------------------------
       |               | 00575 | 		// Description:	Echos an ASCII character to the terminal.
       |               | 00576 | 		//=============================================================================
       |      = 0x1800 | 00577 | 		#define 	XPD_MiniEcho           	0x1800
       |      = 0x1808 | 00578 | 		#define 	XPD_MiniEcho_RW        		0x1808
       |               | 00579 | 
       |               | 00580 | 		//=============================================================================
       |               | 00581 | 		// Input Params:	r1 = Numerator (Unsigned 16-bit Integer)
       |               | 00582 | 		//			r2 = Divisor (Unsigned 16-bit Integer)
       |               | 00583 | 		//			r6 = Return Address
       |               | 00584 | 		// Output Params:	r1 = Result
       |               | 00585 | 		//			r2 = Remainder
       |               | 00586 | 		//			r6 = GARBAGE
       |               | 00587 | 		//-----------------------------------------------------------------------------
       |               | 00588 | 		// Description:	Performs the unsigned integer division of one 16-Bit unsigned
       |               | 00589 | 		//			integer by another 16-bit unsinged integer.
       |               | 00590 | 		//
       |               | 00591 | 		//			Note:  x/0 is treated as x/1 to prevent an infinite loop.
       |               | 00592 | 		//
       |               | 00593 | 		// 			There is some optimization in the register usage to be done
       |               | 00594 | 		//			but this routine is compatible with the old UnsignedDivide
       |               | 00595 | 		//			routine.  This version has some speed optimizations over the
       |               | 00596 | 		//			previous version.
       |               | 00597 | 		//=============================================================================
       |      = 0x1816 | 00598 | 		#define 	UnsignedDivide         	0x1816
       |               | 00599 | 
       |               | 00600 | 
       |               | 00601 | 		//=============================================================================
       |               | 00602 | 		// Input Params:  r6 = Return Address
       |               | 00603 | 		// Output Params: r1 = Configuration Word
       |               | 00604 | 		//			r6 = GARBAGE
       |               | 00605 | 		//-----------------------------------------------------------------------------
       |               | 00606 | 		// Description:	Reads config and status data from the MAX3100 SPI-UART
       |               | 00607 | 		//			Converter chip on the XPD Module.  Can be used to determine
       |               | 00608 | 		//			the status of the transmit and receive buffers by checking
       |               | 00609 | 		//			the transmit and receive bits.
       |               | 00610 | 		//=============================================================================
       |      = 0x185E | 00611 | 		#define	XPD_ReadConfigWord	0x185E
       |               | 00612 | 		
       |               | 00613 | 		
       |               | 00614 | 		//=============================================================================
       |               | 00615 | 		// Input Params:	r1 = The byte to write
       |               | 00616 | 		//			r6 = Return Address
       |               | 00617 | 		// Output Params:	r6 = GARBAGE
       |               | 00618 | 		//-----------------------------------------------------------------------------
       |               | 00619 | 		// Description:	Used to shift a data byte out to the SPI-UART.  The data byte
       |               | 00620 | 		//			shifted in is discarded.  The data is always in the LSB of
       |               | 00621 | 		//			the word.
       |               | 00622 | 		//=============================================================================
       |      = 0x1867 | 00623 | 		#define 	XPD_WriteByte          	0x1867
       |               | 00624 | 		
       |               | 00625 | 		
       |               | 00626 | 		//=============================================================================
       |               | 00627 | 		// Input Params:	r6 = Return Address
       |               | 00628 | 		// Output Params:	r1 = The byte read from the SPI-UART
       |               | 00629 | 		//			r6 = GARBAGE
       |               | 00630 | 		//-----------------------------------------------------------------------------
       |               | 00631 | 		// Description:	Used to shift a data byte in from the SPI-UART.  A zero byte
       |               | 00632 | 		//			is shifted out.  This subroutine does not return until a byte
       |               | 00633 | 		//			has been received.  The data is always in the LSB of the
       |               | 00634 | 		//			word.
       |               | 00635 | 		//=============================================================================
       |      = 0x1878 | 00636 | 		#define 	XPD_ReadByte           	0x1878
       |               | 00637 | 		
       |               | 00638 | 		
       |               | 00639 | 		//=============================================================================
       |               | 00640 | 		// Input Params:	r1 = The maximum number of read attempts
       |               | 00641 | 		//			r6 = Return Address
       |               | 00642 | 		// Output Params:	r1 = The byte read from the SPI-UART
       |               | 00643 | 		//			r6 = GARBAGE
       |               | 00644 | 		//-----------------------------------------------------------------------------
       |               | 00645 | 		// Description:	Used to read a data byte from the SPI-UART.  A zero byte is
       |               | 00646 | 		//			shifted out.  This subroutine does not return until a byte
       |               | 00647 | 		//			has been received or the maximum number of attempts has been
       |               | 00648 | 		//			reached.  The data is always in the LSB of the word.
       |               | 00649 | 		//=============================================================================
       |      = 0x1884 | 00650 | 		#define 	XPD_ReadByteWithTimeout	0x1884
       |               | 00651 | 		
       |               | 00652 | 		
       |               | 00653 | 		//=============================================================================
       |               | 00654 | 		// Input Params:	r1 = The byte to write
       |               | 00655 | 		//			r6 = Return Address
       |               | 00656 | 		// Output Params:	r1 = The byte read back
       |               | 00657 | 		//			r6 = GARBAGE
       |               | 00658 | 		//-----------------------------------------------------------------------------
       |               | 00659 | 		// Description:	Used to shift out a data byte to the SPI-UART and to shift
       |               | 00660 | 		//			back in another byte from the SPI-UART.  The data is always
       |               | 00661 | 		//			in the LSB of the word.
       |               | 00662 | 		//=============================================================================
       |      = 0x1898 | 00663 | 		#define 	XPD_ReadWriteByte      	0x1898
       |               | 00664 | 		
       |               | 00665 | 		
       |               | 00666 | 		//=============================================================================
       |               | 00667 | 		// Input Params:	r1 = 16-bit word to write to the SPI-UART
       |               | 00668 | 		//			r6 = Return Address
       |               | 00669 | 		// Output Params:	r1 = 16-bit word read back from the SPI-UART
       |               | 00670 | 		//			r6 = GARBAGE
       |               | 00671 | 		//-----------------------------------------------------------------------------
       |               | 00672 | 		// Description:	Used to shift out the word in r1 to the SPI-UART and to
       |               | 00673 | 		//			read back a word into r1.  The MSB of the word is a control
       |               | 00674 | 		//			byte and the LSB is a data byte.
       |               | 00675 | 		//=============================================================================
       |      = 0x18A9 | 00676 | 		#define 	XPD_ShiftInOut         	0x18A9
       |               | 00677 | 		
       |               | 00678 | 		
       |               | 00679 | 		//=============================================================================
       |               | 00680 | 		// Input Params:	r1 = Pointer to a Null Terminated String
       |               | 00681 | 		//			r6 = Return Address
       |               | 00682 | 		// Output Params:	r6 = GARBAGE
       |               | 00683 | 		//-----------------------------------------------------------------------------
       |               | 00684 | 		// Description:	Used to echo ASCII Strings to a computer terminal for
       |               | 00685 | 		//			debugging.  Newlines and other control characters can be
       |               | 00686 | 		//			embedded in the string.  All strings must be
       |               | 00687 | 		//			Null-terminated with the End-Of-String character (EOS).
       |               | 00688 | 		//=============================================================================
       |      = 0x18BB | 00689 | 		#define 	XPD_EchoString         	0x18BB
       |               | 00690 | 		
       |               | 00691 | 		
       |               | 00692 | 		//=============================================================================
       |               | 00693 | 		// Input Params:	r1 = 16-bit Unsigned Integer
       |               | 00694 | 		//			r6 = Return Address
       |               | 00695 | 		// Output Params:	r6 = GARBAGE
       |               | 00696 | 		//-----------------------------------------------------------------------------
       |               | 00697 | 		// Description:	Echos a 16-bit unsigned integer to the terminal.  Leading
       |               | 00698 | 		//			zeros are output if necessary to pad the output to 5 digits.
       |               | 00699 | 		//=============================================================================
       |      = 0x18CB | 00700 | 		#define 	XPD_EchoUnsignedDec    	0x18CB
       |               | 00701 | 		
       |               | 00702 | 		
       |               | 00703 | 		//=============================================================================
       |               | 00704 | 		// Input Params:	r1 = 16-bit Unsigned Integer
       |               | 00705 | 		//			r6 = Return Address
       |               | 00706 | 		// Output Params:	r6 = GARBAGE
       |               | 00707 | 		//-----------------------------------------------------------------------------
       |               | 00708 | 		// Description:	Echos a 16-bit unsigned integer to the terminal without leading
       |               | 00709 | 		//			zeros (No Leading Zeros).
       |               | 00710 | 		//=============================================================================
       |      = 0x18F6 | 00711 | 		#define	XPD_EchoUnsignedDecNLZ	0x18F6
       |               | 00712 | 		
       |               | 00713 | 		
       |               | 00714 | 		//=============================================================================
       |               | 00715 | 		// Input Params:	r1 = 16-bit Signed Integer
       |               | 00716 | 		//			r6 = Return Address
       |               | 00717 | 		// Output Params:	r6 = GARBAGE
       |               | 00718 | 		//-----------------------------------------------------------------------------
       |               | 00719 | 		// Description:	Echos a 16-bit signed integer to the terminal.  Leading
       |               | 00720 | 		//			zeros are output if necessary to pad the output to 5 digits.
       |               | 00721 | 		//			In total, 6 characters are output: 1 sign and 5 digits.
       |               | 00722 | 		//=============================================================================
       |      = 0x1929 | 00723 | 		#define 	XPD_EchoSignedDec      	0x1929
       |               | 00724 | 		
       |               | 00725 | 		
       |               | 00726 | 		//=============================================================================
       |               | 00727 | 		// Input Params:	r1 = 16-bit Signed Integer
       |               | 00728 | 		//			r6 = Return Address
       |               | 00729 | 		// Output Params:	r6 = GARBAGE
       |               | 00730 | 		//-----------------------------------------------------------------------------
       |               | 00731 | 		// Description:	Echos a 16-bit signed integer to the terminal without leading
       |               | 00732 | 		//			zeros (No Leading Zeros).
       |               | 00733 | 		//=============================================================================
       |      = 0x196A | 00734 | 		#define	XPD_EchoSignedDecNLZ	0x196A
       |               | 00735 | 		
       |               | 00736 | 		
       |               | 00737 | 		//=============================================================================
       |               | 00738 | 		// Input Params:	r1 = 16-bit Number
       |               | 00739 | 		//			r6 = Return Address
       |               | 00740 | 		// Output Params:	r6 = GARBAGE
       |               | 00741 | 		//-----------------------------------------------------------------------------
       |               | 00742 | 		// Description:	Echos a 16-bit number to the terminal formatted as a
       |               | 00743 | 		//			hexadecimal integer with format 0xABCD where ABCD are hex
       |               | 00744 | 		//			digits.
       |               | 00745 | 		//=============================================================================
       |      = 0x19B3 | 00746 | 		#define 	XPD_EchoHex            	0x19B3
       |               | 00747 | 		
       |               | 00748 | 		
       |               | 00749 | 		//=============================================================================
       |               | 00750 | 		// Input Params:	r1 = 16-bit Number
       |               | 00751 | 		//			r6 = Return Address
       |               | 00752 | 		// Output Params:	r6 = GARBAGE
       |               | 00753 | 		//-----------------------------------------------------------------------------
       |               | 00754 | 		// Description:	Echos a 16-bit number to the terminal formatted as a
       |               | 00755 | 		//			hexadecimal integer without the '0x' prefix (No prefix).
       |               | 00756 | 		//=============================================================================
       |      = 0x19C1 | 00757 | 		#define 	XPD_EchoHexNP          	0x19C1
       |               | 00758 | 		
       |               | 00759 | 		
       |               | 00760 | 		//=============================================================================
       |               | 00761 | 		// Input Params:	r1 = 8-bit Number
       |               | 00762 | 		//			r6 = Return Address
       |               | 00763 | 		// Output Params:	r6 = GARBAGE
       |               | 00764 | 		//-----------------------------------------------------------------------------
       |               | 00765 | 		// Description:	Echos an 8-bit number to the terminal formatted as a
       |               | 00766 | 		//			hexadecimal integer with the '0x' prefix.
       |               | 00767 | 		//=============================================================================
       |      = 0x19E7 | 00768 | 		#define 	XPD_EchoHexByte        	0x19E7
       |               | 00769 | 		
       |               | 00770 | 		
       |               | 00771 | 		//=============================================================================
       |               | 00772 | 		// Input Params:	r1 = 8-bit Number
       |               | 00773 | 		//			r6 = Return Address
       |               | 00774 | 		// Output Params:	r6 = GARBAGE
       |               | 00775 | 		//-----------------------------------------------------------------------------
       |               | 00776 | 		// Description:	Echos an 8-bit number to the terminal formatted as a
       |               | 00777 | 		//			hexadecimal integer without the '0x' prefix (No Prefix).
       |               | 00778 | 		//=============================================================================
       |      = 0x19F5 | 00779 | 		#define 	XPD_EchoHexByteNP      	0x19F5
       |               | 00780 | 		
       |               | 00781 | 		
       |               | 00782 | 		//=============================================================================
       |               | 00783 | 		// Input Params:	r1 = 16-Bit Vector
       |               | 00784 | 		//			r6 = Return Address
       |               | 00785 | 		// Output Params:	r6 = GARBAGE
       |               | 00786 | 		//-----------------------------------------------------------------------------
       |               | 00787 | 		// Description:	Echos to the terminal a comma delimited list of the bits
       |               | 00788 | 		//			that are set in a 16-bit vector.
       |               | 00789 | 		//=============================================================================
       |      = 0x1A0D | 00790 | 		#define 	XPD_EchoSetBitList     	0x1A0D
       |               | 00791 | 		
       |               | 00792 | 		
       |               | 00793 | 		//=============================================================================
       |               | 00794 | 		// Input Params:	r4 = Number of words to display
       |               | 00795 | 		//			r5 = Start address of the block
       |               | 00796 | 		//			r6 = Return Address
       |               | 00797 | 		// Output Params:	r6 = GARBAGE
       |               | 00798 | 		//-----------------------------------------------------------------------------
       |               | 00799 | 		// Description:	Echos to the terminal a given number of words of data in
       |               | 00800 | 		//			hex format starting at a given memory address.  The output is
       |               | 00801 | 		//			formatted with 8 words per line and a space in between each
       |               | 00802 | 		//			word.
       |               | 00803 | 		//=============================================================================
       |      = 0x1A32 | 00804 | 		#define 	XPD_EchoBlock          	0x1A32
       |               | 00805 | 
       |      = 0x000F | 00806 | 		#define	SPI_UART_Rbit 		 	15
       |               | 00807 | 
       |               | 00808 | //*****************************************************************************
       |               | 00809 | //*****************************************************************************
       |               | 00810 | //**  Useful ASCII Characters
       |               | 00811 | //*****************************************************************************
       |               | 00812 | //*****************************************************************************
       |               | 00813 | 
       |      = 0x0000 | 00814 | 	#define	EOS				0	// End Of String  
       |      = 0x0008 | 00815 | 	#define	BS				8	// Back Space     
       |      = 0x000A | 00816 | 	#define	LF				10	// Line Feed      
       |      = 0x000D | 00817 | 	#define	CR				13	// Carriage Return		
       |               | 00818 | 

                                 //
                                 // "ReflowOvenController.main" -> "XInC2.asm"
//============================== //==============================================================
                                 // "ReflowOvenController.main"
                                 //

       |               | 00005 | @ = 0xC000
0xC000 | 0x0100 0x4012 | 00006 | bra ProgramSPIEEPROM
0xC002 | 0x9945        | 00007 | 39237
       |               | 00008 | #include "C:/Program Files/SXC/include/sxc-art0\XInC2_Entry.asm"

                                 //
                                 // "ReflowOvenController.main"
//============================== //==============================================================
                                 // "ReflowOvenController.main" -> "XInC2_Entry.asm"
                                 //

0xC003 |               | 00001 | sxc___main:
0xC003 | 0x0B81        | 00002 |     mov  r1, 1
0xC004 | 0x138F        | 00003 |     mov  r2, (1 << 3) | 7  // start at thread 1, register 7
       |               | 00004 | 
0xC005 |               | 00005 |   sxc___main_stack_setup_loop:
0xC005 | 0x1283        | 00006 |     outp r2, SCUpntr
0xC006 | 0x1BF1 0xCA00 | 00007 |     ld   r3, r1, THREAD_STACK_LOOKUP
0xC008 | 0x1A80        | 00008 |     outp r3, SCUreg
0xC009 | 0x5208        | 00009 |     add  r2, r2, (1 << 3) // adding (1 << 3) points at next stack entry
0xC00A | 0x4901        | 00010 |     add  r1, r1, 1
0xC00B | 0x59F8        | 00011 |     sub  r3, r1, 8  // loop over all 8 threads
0xC00C | 0x28F8        | 00012 |     bc   NE, sxc___main_stack_setup_loop
       |               | 00013 | 
0xC00D | 0x3BE8 0xC800 | 00014 |     mov  sp, THREAD0_STACK
0xC00F | 0x7F01        | 00015 |     add  sp, sp, 1
0xC010 | 0x03E8 0xCD51 | 00016 |     mov  r0, SXCA_PARSED_CONSTRUCTOR_LIST_START
0xC012 |               | 00017 |   sxc___main_constructor_loop:
0xC012 | 0x0BC0 0x32AF | 00018 |     sub  r1, r0, SXCA_PARSED_CONSTRUCTOR_LIST_END
0xC014 | 0x0806        | 00019 |     bc   EQ, sxc___main_constructor_loop_exit
       |               | 00020 | 
0xC015 | 0xC7FF        | 00021 |     st   r0, sp, -1
0xC016 | 0x8800        | 00022 |     ld   r1, r0, 0
0xC017 | 0x33E1        | 00023 |     jsr  r6, r1
0xC018 | 0x87FF        | 00024 |     ld   r0, sp, -1
0xC019 | 0x4001        | 00025 |     add  r0, r0, 1
0xC01A | 0x01F7        | 00026 |     bra sxc___main_constructor_loop
0xC01B |               | 00027 |   sxc___main_constructor_loop_exit:
       |               | 00028 |     
0xC01B | 0x7FFF        | 00029 |     sub  sp, sp, 1
0xC01C | 0x33EC 0xC730 | 00030 |     jsr  r6, sxc_main
0xC01E | 0x01FF        | 00031 |     bra  @

                                 //
                                 // "ReflowOvenController.main" -> "XInC2_Entry.asm"
//============================== //==============================================================
                                 // "ReflowOvenController.main"
                                 //

       |               | 00009 | #include "C:/Users/cchin/CapstoneFirmware/Xinc2/ReflowOvenController/build\code.asm"

                                 //
                                 // "ReflowOvenController.main"
//============================== //==============================================================
                                 // "ReflowOvenController.main" -> "code.asm"
                                 //

       |               | 00001 | 	// .file	"C:/Users/cchin/CapstoneFirmware/Xinc2/ReflowOvenController/build/ReflowOvenController.opt"
       |               | 00002 | //	.section	//.text,"xr"
       |               | 00003 | //align
       |               | 00004 | @ = (@ + 1-1)  & -1
0xC01F |               | 00005 | sxc__Z7wait_msj:                        // @_Z7wait_msj
       |               | 00006 | // BB#0:
0xC01F | 0x7F01        | 00007 | 	add	sp, sp, 0x1
0xC020 | 0xF7FF        | 00008 | 	st	r6, sp, 0xffff          // 1-byte Folded Spill
0xC021 | 0x4A00        | 00009 | 	sub	r1, r2, 0x0
0xC022 | 0x0817        | 00010 | 	bc	EQ, BB0_9
       |               | 00011 | // BB#1:
0xC023 | 0x0380        | 00012 | 	mov	r0, 0x0
0xC024 | 0x1BE8 0x4350 | 00013 | 	mov	r3, 0x4350
0xC026 | 0x23E8 0x3CB0 | 00014 | 	mov	r4, 0x3cb0
0xC028 |               | 00015 | BB0_2:                                  // %.preheader
       |               | 00016 |                                         // =>This Loop Header: Depth=1
       |               | 00017 |                                         //     Child Loop BB0_3 Depth 2
       |               | 00018 |                                         //       Child Loop BB0_4 Depth 3
       |               | 00019 |                                         //       Child Loop BB0_6 Depth 3
0xC028 | 0x2B80        | 00020 | 	mov	r5, 0x0
0xC029 |               | 00021 | BB0_3:                                  //   Parent Loop BB0_2 Depth=1
       |               | 00022 |                                         // =>  This Loop Header: Depth=2
       |               | 00023 |                                         //       Child Loop BB0_4 Depth 3
       |               | 00024 |                                         //       Child Loop BB0_6 Depth 3
0xC029 | 0x0A03        | 00025 | 	inp	r1, 0x3
0xC02A | 0x334B        | 00026 | 	sub	r6, r3, r1
0xC02B |               | 00027 | BB0_4:                                  //   Parent Loop BB0_2 Depth=1
       |               | 00028 |                                         //     Parent Loop BB0_3 Depth=2
       |               | 00029 |                                         // =>    This Inner Loop Header: Depth=3
0xC02B | 0x0A03        | 00030 | 	inp	r1, 0x3
0xC02C | 0x0B0E        | 00031 | 	add	r1, r6, r1
       |               | 00032 | 	//cmp	r1, 0x0
0xC02D | 0x0CFD        | 00033 | 	bc	LT0, BB0_4
       |               | 00034 | // BB#5:                                // %_Z14sys_clock_waitj.exit
       |               | 00035 |                                         //   in Loop: Header=BB0_3 Depth=2
0xC02E | 0x0A03        | 00036 | 	inp	r1, 0x3
0xC02F | 0x334C        | 00037 | 	sub	r6, r4, r1
0xC030 |               | 00038 | BB0_6:                                  //   Parent Loop BB0_2 Depth=1
       |               | 00039 |                                         //     Parent Loop BB0_3 Depth=2
       |               | 00040 |                                         // =>    This Inner Loop Header: Depth=3
0xC030 | 0x0A03        | 00041 | 	inp	r1, 0x3
0xC031 | 0x0B0E        | 00042 | 	add	r1, r6, r1
       |               | 00043 | 	//cmp	r1, 0x0
0xC032 | 0x0CFD        | 00044 | 	bc	LT0, BB0_6
       |               | 00045 | // BB#7:                                // %_Z14sys_clock_waitj.exit5
       |               | 00046 |                                         //   in Loop: Header=BB0_3 Depth=2
0xC033 | 0x6D01        | 00047 | 	add	r5, r5, 0x1
0xC034 | 0x0BC5 0xFC18 | 00048 | 	sub	r1, r5, 0x3e8
0xC036 | 0x28F2        | 00049 | 	bc	NE, BB0_3
       |               | 00050 | // BB#8:                                //   in Loop: Header=BB0_2 Depth=1
0xC037 | 0x4001        | 00051 | 	add	r0, r0, 0x1
0xC038 | 0x0B50        | 00052 | 	sub	r1, r0, r2
0xC039 | 0x28EE        | 00053 | 	bc	NE, BB0_2
0xC03A |               | 00054 | BB0_9:                                  // %._crit_edge
0xC03A | 0xB7FF        | 00055 | 	ld	r6, sp, 0xffff          // 1-byte Folded Reload
0xC03B | 0x7FFF        | 00056 | 	sub	sp, sp, 0x1
0xC03C | 0x33E6        | 00057 | 	jsr	r6, r6
       |               | 00058 | 
       |               | 00059 | //align
       |               | 00060 | @ = (@ + 1-1)  & -1
0xC03D |               | 00061 | sxc__Z12Num_To_ASCIIj:                  // @_Z12Num_To_ASCIIj
       |               | 00062 | // BB#0:
0xC03D | 0x03E8 0x0064 | 00063 | 	mov	r0, 0x64
0xC03F | 0x0B89        | 00064 | 	mov	r1, 0x9
0xC040 | 0x0B4A        | 00065 | 	sub	r1, r2, r1
0xC041 | 0x3016        | 00066 | 	bc	UGT, BB1_12
       |               | 00067 | // BB#1:
0xC042 | 0x0BF2 0xCA09 | 00068 | 	ld	r1, r2,JTI1_0
0xC044 | 0x0BE1        | 00069 | 	jsr	r1, r1
0xC045 |               | 00070 | BB1_2:
0xC045 | 0x0390        | 00071 | 	mov	r0, 0x10
0xC046 | 0x33E6        | 00072 | 	jsr	r6, r6
0xC047 |               | 00073 | BB1_3:
0xC047 | 0x0391        | 00074 | 	mov	r0, 0x11
0xC048 | 0x33E6        | 00075 | 	jsr	r6, r6
0xC049 |               | 00076 | BB1_4:
0xC049 | 0x0392        | 00077 | 	mov	r0, 0x12
0xC04A | 0x33E6        | 00078 | 	jsr	r6, r6
0xC04B |               | 00079 | BB1_5:
0xC04B | 0x0393        | 00080 | 	mov	r0, 0x13
0xC04C | 0x33E6        | 00081 | 	jsr	r6, r6
0xC04D |               | 00082 | BB1_6:
0xC04D | 0x0394        | 00083 | 	mov	r0, 0x14
0xC04E | 0x33E6        | 00084 | 	jsr	r6, r6
0xC04F |               | 00085 | BB1_7:
0xC04F | 0x0395        | 00086 | 	mov	r0, 0x15
0xC050 | 0x33E6        | 00087 | 	jsr	r6, r6
0xC051 |               | 00088 | BB1_8:
0xC051 | 0x0396        | 00089 | 	mov	r0, 0x16
0xC052 | 0x33E6        | 00090 | 	jsr	r6, r6
0xC053 |               | 00091 | BB1_9:
0xC053 | 0x0397        | 00092 | 	mov	r0, 0x17
0xC054 | 0x33E6        | 00093 | 	jsr	r6, r6
0xC055 |               | 00094 | BB1_10:
0xC055 | 0x0398        | 00095 | 	mov	r0, 0x18
0xC056 | 0x33E6        | 00096 | 	jsr	r6, r6
0xC057 |               | 00097 | BB1_11:
0xC057 | 0x0399        | 00098 | 	mov	r0, 0x19
0xC058 |               | 00099 | BB1_12:
0xC058 | 0x33E6        | 00100 | 	jsr	r6, r6
       |               | 00101 | //	.section	//.text,"xr"
       |               | 00102 | //align
       |               | 00103 | @ = (@ + 1-1)  & -1
0xC059 |               | 00104 | sxc__Z22OLED_Command_160128RGBh:        // @_Z22OLED_Command_160128RGBh
       |               | 00105 | // BB#0:
0xC059 | 0x0220        | 00106 | 	inp	r0, 0x20
0xC05A | 0x0690        | 00107 | 	and	r0, r0, 0xfffb
0xC05B | 0x02A0        | 00108 | 	outp	r0, 0x20
0xC05C | 0x0220        | 00109 | 	inp	r0, 0x20
0xC05D | 0x0688        | 00110 | 	and	r0, r0, 0xfffd
0xC05E | 0x02A0        | 00111 | 	outp	r0, 0x20
0xC05F | 0x12B6        | 00112 | 	outp	r2, 0x36
0xC060 | 0x0236        | 00113 | 	inp	r0, 0x36
0xC061 | 0x0220        | 00114 | 	inp	r0, 0x20
0xC062 | 0x0710        | 00115 | 	ior	r0, r0, 0x4
0xC063 | 0x02A0        | 00116 | 	outp	r0, 0x20
0xC064 | 0x33E6        | 00117 | 	jsr	r6, r6
       |               | 00118 | 
       |               | 00119 | //align
       |               | 00120 | @ = (@ + 1-1)  & -1
0xC065 |               | 00121 | sxc__Z19OLED_Data_160128RGBh:           // @_Z19OLED_Data_160128RGBh
       |               | 00122 | // BB#0:
0xC065 | 0x0220        | 00123 | 	inp	r0, 0x20
0xC066 | 0x0690        | 00124 | 	and	r0, r0, 0xfffb
0xC067 | 0x02A0        | 00125 | 	outp	r0, 0x20
0xC068 | 0x0220        | 00126 | 	inp	r0, 0x20
0xC069 | 0x0708        | 00127 | 	ior	r0, r0, 0x2
0xC06A | 0x02A0        | 00128 | 	outp	r0, 0x20
0xC06B | 0x12B6        | 00129 | 	outp	r2, 0x36
0xC06C | 0x0236        | 00130 | 	inp	r0, 0x36
0xC06D | 0x0220        | 00131 | 	inp	r0, 0x20
0xC06E | 0x0710        | 00132 | 	ior	r0, r0, 0x4
0xC06F | 0x02A0        | 00133 | 	outp	r0, 0x20
0xC070 | 0x33E6        | 00134 | 	jsr	r6, r6
       |               | 00135 | 
       |               | 00136 | //align
       |               | 00137 | @ = (@ + 1-1)  & -1
0xC071 |               | 00138 | sxc__Z31OLED_WriteMemoryStart_160128RGBv: // @_Z31OLED_WriteMemoryStart_160128RGBv
       |               | 00139 | // BB#0:
0xC071 | 0x7F01        | 00140 | 	add	sp, sp, 0x1
0xC072 | 0xF7FF        | 00141 | 	st	r6, sp, 0xffff          // 1-byte Folded Spill
0xC073 | 0x13E8 0x0022 | 00142 | 	mov	r2, 0x22
0xC075 | 0x33EC 0xC059 | 00143 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC077 | 0xB7FF        | 00144 | 	ld	r6, sp, 0xffff          // 1-byte Folded Reload
0xC078 | 0x7FFF        | 00145 | 	sub	sp, sp, 0x1
0xC079 | 0x33E6        | 00146 | 	jsr	r6, r6
       |               | 00147 | 
       |               | 00148 | //align
       |               | 00149 | @ = (@ + 1-1)  & -1
0xC07A |               | 00150 | sxc__Z20OLED_Pixel_160128RGBm:          // @_Z20OLED_Pixel_160128RGBm
       |               | 00151 | // BB#0:
0xC07A | 0x7F02        | 00152 | 	add	sp, sp, 0x2
0xC07B | 0xF7FE        | 00153 | 	st	r6, sp, 0xfffe          // 1-byte Folded Spill
0xC07C | 0xD7FF        | 00154 | 	st	r2, sp, 0xffff          // 1-byte Folded Spill
0xC07D | 0x03CB 0x00FF | 00155 | 	and	r0, r3, 0xff
0xC07F | 0x0640        | 00156 | 	rol	r0, r0, 0x8
0xC080 | 0x0BCA 0xFF00 | 00157 | 	and	r1, r2, 0xff00
0xC082 | 0x0E41        | 00158 | 	rol	r1, r1, 0x8
0xC083 | 0x1581        | 00159 | 	ior	r2, r1, r0
0xC084 | 0x33EC 0xC065 | 00160 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC086 | 0x97FF        | 00161 | 	ld	r2, sp, 0xffff          // 1-byte Folded Reload
0xC087 | 0x33EC 0xC065 | 00162 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC089 | 0xB7FE        | 00163 | 	ld	r6, sp, 0xfffe          // 1-byte Folded Reload
0xC08A | 0x7FFE        | 00164 | 	sub	sp, sp, 0x2
0xC08B | 0x33E6        | 00165 | 	jsr	r6, r6
       |               | 00166 | 
       |               | 00167 | //align
       |               | 00168 | @ = (@ + 1-1)  & -1
0xC08C |               | 00169 | sxc__Z26OLED_SetPosition_160128RGBhh:   // @_Z26OLED_SetPosition_160128RGBhh
       |               | 00170 | // BB#0:
0xC08C | 0x7F03        | 00171 | 	add	sp, sp, 0x3
0xC08D | 0xF7FD        | 00172 | 	st	r6, sp, 0xfffd          // 1-byte Folded Spill
0xC08E | 0xDFFE        | 00173 | 	st	r3, sp, 0xfffe          // 1-byte Folded Spill
0xC08F | 0xD7FF        | 00174 | 	st	r2, sp, 0xffff          // 1-byte Folded Spill
0xC090 | 0x13E8 0x0020 | 00175 | 	mov	r2, 0x20
0xC092 | 0x33EC 0xC059 | 00176 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC094 | 0x97FF        | 00177 | 	ld	r2, sp, 0xffff          // 1-byte Folded Reload
0xC095 | 0x33EC 0xC065 | 00178 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC097 | 0x13E8 0x0021 | 00179 | 	mov	r2, 0x21
0xC099 | 0x33EC 0xC059 | 00180 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC09B | 0x97FE        | 00181 | 	ld	r2, sp, 0xfffe          // 1-byte Folded Reload
0xC09C | 0x33EC 0xC065 | 00182 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC09E | 0xB7FD        | 00183 | 	ld	r6, sp, 0xfffd          // 1-byte Folded Reload
0xC09F | 0x7FFD        | 00184 | 	sub	sp, sp, 0x3
0xC0A0 | 0x33E6        | 00185 | 	jsr	r6, r6
       |               | 00186 | 
       |               | 00187 | //align
       |               | 00188 | @ = (@ + 1-1)  & -1
0xC0A1 |               | 00189 | sxc__Z25OLED_FillScreen_160128RGBm:     // @_Z25OLED_FillScreen_160128RGBm
       |               | 00190 | // BB#0:
0xC0A1 | 0x7F04        | 00191 | 	add	sp, sp, 0x4
0xC0A2 | 0xF7FC        | 00192 | 	st	r6, sp, 0xfffc          // 1-byte Folded Spill
0xC0A3 | 0xDFFE        | 00193 | 	st	r3, sp, 0xfffe          // 1-byte Folded Spill
0xC0A4 | 0xD7FF        | 00194 | 	st	r2, sp, 0xffff          // 1-byte Folded Spill
0xC0A5 | 0x1380        | 00195 | 	mov	r2, 0x0
0xC0A6 | 0x1B80        | 00196 | 	mov	r3, 0x0
0xC0A7 | 0x33EC 0xC08C | 00197 | 	jsr	r6, sxc__Z26OLED_SetPosition_160128RGBhh
0xC0A9 | 0x33EC 0xC071 | 00198 | 	jsr	r6, sxc__Z31OLED_WriteMemoryStart_160128RGBv
0xC0AB | 0x03E8 0x5000 | 00199 | 	mov	r0, 0x5000
0xC0AD |               | 00200 | BB7_1:                                  // =>This Inner Loop Header: Depth=1
0xC0AD | 0xC7FD        | 00201 | 	st	r0, sp, 0xfffd          // 1-byte Folded Spill
0xC0AE | 0x97FF        | 00202 | 	ld	r2, sp, 0xffff          // 1-byte Folded Reload
0xC0AF | 0x9FFE        | 00203 | 	ld	r3, sp, 0xfffe          // 1-byte Folded Reload
0xC0B0 | 0x33EC 0xC07A | 00204 | 	jsr	r6, sxc__Z20OLED_Pixel_160128RGBm
0xC0B2 | 0x87FD        | 00205 | 	ld	r0, sp, 0xfffd          // 1-byte Folded Reload
0xC0B3 | 0x40FF        | 00206 | 	add	r0, r0, 0xffff
       |               | 00207 | 	//cmp	r0, 0x0
0xC0B4 | 0x28F8        | 00208 | 	bc	ZC, BB7_1
       |               | 00209 | // BB#2:
0xC0B5 | 0xB7FC        | 00210 | 	ld	r6, sp, 0xfffc          // 1-byte Folded Reload
0xC0B6 | 0x7FFC        | 00211 | 	sub	sp, sp, 0x4
0xC0B7 | 0x33E6        | 00212 | 	jsr	r6, r6
       |               | 00213 | 
       |               | 00214 | //align
       |               | 00215 | @ = (@ + 1-1)  & -1
0xC0B8 |               | 00216 | sxc__Z19OLED_Text_160128RGBhhhmm:       // @_Z19OLED_Text_160128RGBhhhmm
       |               | 00217 | // BB#0:
0xC0B8 | 0x7F07        | 00218 | 	add	sp, sp, 0x7
0xC0B9 | 0xF7F9        | 00219 | 	st	r6, sp, 0xfff9          // 1-byte Folded Spill
0xC0BA | 0xD7FF        | 00220 | 	st	r2, sp, 0xffff          // 1-byte Folded Spill
0xC0BB | 0x0614        | 00221 | 	rol	r0, r4, 0x2
0xC0BC | 0x03C8 0xFFFC | 00222 | 	and	r0, r0, 0xfffc
0xC0BE | 0x0304        | 00223 | 	add	r0, r4, r0
0xC0BF | 0x1380        | 00224 | 	mov	r2, 0x0
0xC0C0 | 0x0BE8 0x0080 | 00225 | 	mov	r1, 0x80
0xC0C2 | 0xCFFB        | 00226 | 	st	r1, sp, 0xfffb          // 1-byte Folded Spill
0xC0C3 | 0x03C0 0xCA1C | 00227 | 	add	r0, r0, sxc_Ascii_1
0xC0C5 | 0xC7FC        | 00228 | 	st	r0, sp, 0xfffc          // 1-byte Folded Spill
0xC0C6 |               | 00229 | BB8_1:                                  // =>This Loop Header: Depth=1
       |               | 00230 |                                         //     Child Loop BB8_2 Depth 2
0xC0C6 | 0xD7FE        | 00231 | 	st	r2, sp, 0xfffe          // 1-byte Folded Spill
0xC0C7 | 0xDFFD        | 00232 | 	st	r3, sp, 0xfffd          // 1-byte Folded Spill
0xC0C8 | 0x97FF        | 00233 | 	ld	r2, sp, 0xffff          // 1-byte Folded Reload
0xC0C9 | 0x33EC 0xC08C | 00234 | 	jsr	r6, sxc__Z26OLED_SetPosition_160128RGBhh
0xC0CB | 0x33EC 0xC071 | 00235 | 	jsr	r6, sxc__Z31OLED_WriteMemoryStart_160128RGBv
0xC0CD | 0x1385        | 00236 | 	mov	r2, 0x5
0xC0CE |               | 00237 | BB8_2:                                  //   Parent Loop BB8_1 Depth=1
       |               | 00238 |                                         // =>  This Inner Loop Header: Depth=2
0xC0CE | 0xD7FA        | 00239 | 	st	r2, sp, 0xfffa          // 1-byte Folded Spill
0xC0CF | 0x87FC        | 00240 | 	ld	r0, sp, 0xfffc          // 1-byte Folded Reload
0xC0D0 | 0x0350        | 00241 | 	sub	r0, r0, r2
0xC0D1 | 0x8005        | 00242 | 	ld	r0, r0, 0x5
0xC0D2 | 0x8FFB        | 00243 | 	ld	r1, sp, 0xfffb          // 1-byte Folded Reload
0xC0D3 | 0x0548        | 00244 | 	and	r0, r0, r1
0xC0D4 | 0x0B48        | 00245 | 	sub	r1, r0, r1
0xC0D5 | 0x2802        | 00246 | 	bc	NE, BB8_4
       |               | 00247 | // BB#3:                                //   in Loop: Header=BB8_2 Depth=2
0xC0D6 | 0x13BF        | 00248 | 	mov	r2, 0xffff
0xC0D7 | 0x0101        | 00249 | 	bra	BB8_5
0xC0D8 |               | 00250 | BB8_4:                                  //   in Loop: Header=BB8_2 Depth=2
0xC0D8 | 0x1380        | 00251 | 	mov	r2, 0x0
0xC0D9 |               | 00252 | BB8_5:                                  //   in Loop: Header=BB8_2 Depth=2
0xC0D9 | 0x1B80        | 00253 | 	mov	r3, 0x0
0xC0DA | 0x33EC 0xC07A | 00254 | 	jsr	r6, sxc__Z20OLED_Pixel_160128RGBm
0xC0DC | 0x97FA        | 00255 | 	ld	r2, sp, 0xfffa          // 1-byte Folded Reload
0xC0DD | 0x52FF        | 00256 | 	add	r2, r2, 0xffff
       |               | 00257 | 	//cmp	r2, 0x0
0xC0DE | 0x28EF        | 00258 | 	bc	ZC, BB8_2
       |               | 00259 | // BB#6:                                //   in Loop: Header=BB8_1 Depth=1
0xC0DF | 0x9FFD        | 00260 | 	ld	r3, sp, 0xfffd          // 1-byte Folded Reload
0xC0E0 | 0x5B01        | 00261 | 	add	r3, r3, 0x1
0xC0E1 | 0x87FB        | 00262 | 	ld	r0, sp, 0xfffb          // 1-byte Folded Reload
0xC0E2 | 0x0680        | 00263 | 	and	r0, r0, 0xfffe
0xC0E3 | 0x0678        | 00264 | 	rol	r0, r0, 0xf
0xC0E4 | 0xC7FB        | 00265 | 	st	r0, sp, 0xfffb          // 1-byte Folded Spill
0xC0E5 | 0x97FE        | 00266 | 	ld	r2, sp, 0xfffe          // 1-byte Folded Reload
0xC0E6 | 0x5201        | 00267 | 	add	r2, r2, 0x1
0xC0E7 | 0x4AF8        | 00268 | 	sub	r1, r2, 0x8
0xC0E8 | 0x28DD        | 00269 | 	bc	NE, BB8_1
       |               | 00270 | // BB#7:
0xC0E9 | 0xB7F9        | 00271 | 	ld	r6, sp, 0xfff9          // 1-byte Folded Reload
0xC0EA | 0x7FF9        | 00272 | 	sub	sp, sp, 0x7
0xC0EB | 0x33E6        | 00273 | 	jsr	r6, r6
       |               | 00274 | 
       |               | 00275 | //align
       |               | 00276 | @ = (@ + 1-1)  & -1
0xC0EC |               | 00277 | sxc__Z21OLED_Print_Sensor_Valhhjj:      // @_Z21OLED_Print_Sensor_Valhhjj
       |               | 00278 | // BB#0:
0xC0EC | 0x7F05        | 00279 | 	add	sp, sp, 0x5
0xC0ED | 0xF7FB        | 00280 | 	st	r6, sp, 0xfffb          // 1-byte Folded Spill
0xC0EE | 0xEFFF        | 00281 | 	st	r5, sp, 0xffff          // 1-byte Folded Spill
0xC0EF | 0x0389        | 00282 | 	mov	r0, 0x9
0xC0F0 | 0x0B44        | 00283 | 	sub	r1, r4, r0
0xC0F1 | 0x200C        | 00284 | 	bc	UGE, BB9_1
       |               | 00285 | // BB#10:                               // %.thread
0xC0F2 | 0xD7FD        | 00286 | 	st	r2, sp, 0xfffd          // 1-byte Folded Spill
0xC0F3 | 0x5400        | 00287 | 	add	r2, r4, 0x0
0xC0F4 | 0xDFFC        | 00288 | 	st	r3, sp, 0xfffc          // 1-byte Folded Spill
0xC0F5 | 0x33EC 0xC03D | 00289 | 	jsr	r6, sxc__Z12Num_To_ASCIIj
0xC0F7 | 0x97FD        | 00290 | 	ld	r2, sp, 0xfffd          // 1-byte Folded Reload
0xC0F8 | 0x9FFC        | 00291 | 	ld	r3, sp, 0xfffc          // 1-byte Folded Reload
0xC0F9 | 0x6000        | 00292 | 	add	r4, r0, 0x0
0xC0FA | 0x33EC 0xC0B8 | 00293 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC0FC | 0x0387        | 00294 | 	mov	r0, 0x7
0xC0FD | 0x0157        | 00295 | 	bra	BB9_4
0xC0FE |               | 00296 | BB9_1:
0xC0FE | 0xD7FD        | 00297 | 	st	r2, sp, 0xfffd          // 1-byte Folded Spill
0xC0FF | 0xDFFC        | 00298 | 	st	r3, sp, 0xfffc          // 1-byte Folded Spill
0xC100 | 0x03E8 0x0064 | 00299 | 	mov	r0, 0x64
0xC102 | 0x0B44        | 00300 | 	sub	r1, r4, r0
0xC103 | 0x2020        | 00301 | 	bc	UGE, BB9_3
       |               | 00302 | // BB#2:
0xC104 | 0x5400        | 00303 | 	add	r2, r4, 0x0
0xC105 | 0x1B8A        | 00304 | 	mov	r3, 0xa
0xC106 | 0xE7FE        | 00305 | 	st	r4, sp, 0xfffe          // 1-byte Folded Spill
0xC107 | 0x33EC 0xC7AA | 00306 | 	jsr	r6, sxc___xinc_udiv
0xC109 | 0x5000        | 00307 | 	add	r2, r0, 0x0
0xC10A | 0x1B8A        | 00308 | 	mov	r3, 0xa
0xC10B | 0x33EC 0xC7B4 | 00309 | 	jsr	r6, sxc___xinc_umod
0xC10D | 0x5000        | 00310 | 	add	r2, r0, 0x0
0xC10E | 0x33EC 0xC03D | 00311 | 	jsr	r6, sxc__Z12Num_To_ASCIIj
0xC110 | 0x97FD        | 00312 | 	ld	r2, sp, 0xfffd          // 1-byte Folded Reload
0xC111 | 0x9FFC        | 00313 | 	ld	r3, sp, 0xfffc          // 1-byte Folded Reload
0xC112 | 0x6000        | 00314 | 	add	r4, r0, 0x0
0xC113 | 0x33EC 0xC0B8 | 00315 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC115 | 0x97FE        | 00316 | 	ld	r2, sp, 0xfffe          // 1-byte Folded Reload
0xC116 | 0x1B8A        | 00317 | 	mov	r3, 0xa
0xC117 | 0x33EC 0xC7B4 | 00318 | 	jsr	r6, sxc___xinc_umod
0xC119 | 0x5000        | 00319 | 	add	r2, r0, 0x0
0xC11A | 0x33EC 0xC03D | 00320 | 	jsr	r6, sxc__Z12Num_To_ASCIIj
0xC11C | 0x8FFD        | 00321 | 	ld	r1, sp, 0xfffd          // 1-byte Folded Reload
0xC11D | 0x5107        | 00322 | 	add	r2, r1, 0x7
0xC11E | 0x9FFC        | 00323 | 	ld	r3, sp, 0xfffc          // 1-byte Folded Reload
0xC11F | 0x6000        | 00324 | 	add	r4, r0, 0x0
0xC120 | 0x33EC 0xC0B8 | 00325 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC122 | 0x038E        | 00326 | 	mov	r0, 0xe
0xC123 | 0x0131        | 00327 | 	bra	BB9_4
0xC124 |               | 00328 | BB9_3:
0xC124 | 0x5400        | 00329 | 	add	r2, r4, 0x0
0xC125 | 0x1BE8 0x0064 | 00330 | 	mov	r3, 0x64
0xC127 | 0xE7FE        | 00331 | 	st	r4, sp, 0xfffe          // 1-byte Folded Spill
0xC128 | 0x33EC 0xC7AA | 00332 | 	jsr	r6, sxc___xinc_udiv
0xC12A | 0x5000        | 00333 | 	add	r2, r0, 0x0
0xC12B | 0x1B8A        | 00334 | 	mov	r3, 0xa
0xC12C | 0x33EC 0xC7B4 | 00335 | 	jsr	r6, sxc___xinc_umod
0xC12E | 0x5000        | 00336 | 	add	r2, r0, 0x0
0xC12F | 0x33EC 0xC03D | 00337 | 	jsr	r6, sxc__Z12Num_To_ASCIIj
0xC131 | 0x97FD        | 00338 | 	ld	r2, sp, 0xfffd          // 1-byte Folded Reload
0xC132 | 0x9FFC        | 00339 | 	ld	r3, sp, 0xfffc          // 1-byte Folded Reload
0xC133 | 0x6000        | 00340 | 	add	r4, r0, 0x0
0xC134 | 0x33EC 0xC0B8 | 00341 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC136 | 0x97FE        | 00342 | 	ld	r2, sp, 0xfffe          // 1-byte Folded Reload
0xC137 | 0x1B8A        | 00343 | 	mov	r3, 0xa
0xC138 | 0x33EC 0xC7AA | 00344 | 	jsr	r6, sxc___xinc_udiv
0xC13A | 0x5000        | 00345 | 	add	r2, r0, 0x0
0xC13B | 0x1B8A        | 00346 | 	mov	r3, 0xa
0xC13C | 0x33EC 0xC7B4 | 00347 | 	jsr	r6, sxc___xinc_umod
0xC13E | 0x5000        | 00348 | 	add	r2, r0, 0x0
0xC13F | 0x33EC 0xC03D | 00349 | 	jsr	r6, sxc__Z12Num_To_ASCIIj
0xC141 | 0x8FFD        | 00350 | 	ld	r1, sp, 0xfffd          // 1-byte Folded Reload
0xC142 | 0x5107        | 00351 | 	add	r2, r1, 0x7
0xC143 | 0x9FFC        | 00352 | 	ld	r3, sp, 0xfffc          // 1-byte Folded Reload
0xC144 | 0x6000        | 00353 | 	add	r4, r0, 0x0
0xC145 | 0x33EC 0xC0B8 | 00354 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC147 | 0x97FE        | 00355 | 	ld	r2, sp, 0xfffe          // 1-byte Folded Reload
0xC148 | 0x1B8A        | 00356 | 	mov	r3, 0xa
0xC149 | 0x33EC 0xC7B4 | 00357 | 	jsr	r6, sxc___xinc_umod
0xC14B | 0x5000        | 00358 | 	add	r2, r0, 0x0
0xC14C | 0x33EC 0xC03D | 00359 | 	jsr	r6, sxc__Z12Num_To_ASCIIj
0xC14E | 0x8FFD        | 00360 | 	ld	r1, sp, 0xfffd          // 1-byte Folded Reload
0xC14F | 0x510E        | 00361 | 	add	r2, r1, 0xe
0xC150 | 0x9FFC        | 00362 | 	ld	r3, sp, 0xfffc          // 1-byte Folded Reload
0xC151 | 0x6000        | 00363 | 	add	r4, r0, 0x0
0xC152 | 0x33EC 0xC0B8 | 00364 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC154 | 0x0395        | 00365 | 	mov	r0, 0x15
0xC155 |               | 00366 | BB9_4:
0xC155 | 0xA7FF        | 00367 | 	ld	r4, sp, 0xffff          // 1-byte Folded Reload
0xC156 | 0x4CFF        | 00368 | 	sub	r1, r4, 0x1
0xC157 | 0x2805        | 00369 | 	bc	NE, BB9_5
       |               | 00370 | // BB#7:
0xC158 | 0x8FFD        | 00371 | 	ld	r1, sp, 0xfffd          // 1-byte Folded Reload
0xC159 | 0x1308        | 00372 | 	add	r2, r0, r1
0xC15A | 0x9FFC        | 00373 | 	ld	r3, sp, 0xfffc          // 1-byte Folded Reload
0xC15B | 0x2385        | 00374 | 	mov	r4, 0x5
0xC15C | 0x010F        | 00375 | 	bra	BB9_8
0xC15D |               | 00376 | BB9_5:
0xC15D | 0x9FFC        | 00377 | 	ld	r3, sp, 0xfffc          // 1-byte Folded Reload
0xC15E | 0x97FD        | 00378 | 	ld	r2, sp, 0xfffd          // 1-byte Folded Reload
0xC15F | 0x4C00        | 00379 | 	sub	r1, r4, 0x0
0xC160 | 0x280D        | 00380 | 	bc	NE, BB9_9
       |               | 00381 | // BB#6:
0xC161 | 0x1310        | 00382 | 	add	r2, r0, r2
0xC162 | 0xD7FD        | 00383 | 	st	r2, sp, 0xfffd          // 1-byte Folded Spill
0xC163 | 0x23E8 0x0061 | 00384 | 	mov	r4, 0x61
0xC165 | 0x33EC 0xC0B8 | 00385 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC167 | 0x87FD        | 00386 | 	ld	r0, sp, 0xfffd          // 1-byte Folded Reload
0xC168 | 0x5001        | 00387 | 	add	r2, r0, 0x1
0xC169 | 0x9FFC        | 00388 | 	ld	r3, sp, 0xfffc          // 1-byte Folded Reload
0xC16A | 0x23E8 0x0023 | 00389 | 	mov	r4, 0x23
0xC16C |               | 00390 | BB9_8:
0xC16C | 0x33EC 0xC0B8 | 00391 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC16E |               | 00392 | BB9_9:
0xC16E | 0xB7FB        | 00393 | 	ld	r6, sp, 0xfffb          // 1-byte Folded Reload
0xC16F | 0x7FFB        | 00394 | 	sub	sp, sp, 0x5
0xC170 | 0x33E6        | 00395 | 	jsr	r6, r6
       |               | 00396 | 
       |               | 00397 | //align
       |               | 00398 | @ = (@ + 1-1)  & -1
0xC171 |               | 00399 | sxc__Z15OLED_write_textihhPhimm:        // @_Z15OLED_write_textihhPhimm
       |               | 00400 | // BB#0:
0xC171 | 0x7F0C        | 00401 | 	add	sp, sp, 0xc
0xC172 | 0xF7F4        | 00402 | 	st	r6, sp, 0xfff4          // 1-byte Folded Spill
0xC173 | 0xE7FD        | 00403 | 	st	r4, sp, 0xfffd          // 1-byte Folded Spill
0xC174 | 0xDFFE        | 00404 | 	st	r3, sp, 0xfffe          // 1-byte Folded Spill
0xC175 | 0xD7FF        | 00405 | 	st	r2, sp, 0xffff          // 1-byte Folded Spill
0xC176 | 0xEFFC        | 00406 | 	st	r5, sp, 0xfffc          // 1-byte Folded Spill
0xC177 | 0x4DFF        | 00407 | 	sub	r1, r5, 0x1
0xC178 | 0x1468        | 00408 | 	bc	LT, BB10_16
       |               | 00409 | // BB#1:
0xC179 | 0x1399        | 00410 | 	mov	r2, 0x19
0xC17A | 0x1B80        | 00411 | 	mov	r3, 0x0
0xC17B | 0x010F        | 00412 | 	bra	BB10_2
0xC17C |               | 00413 | BB10_5:                                 //   in Loop: Header=BB10_2 Depth=1
0xC17C | 0x50E0        | 00414 | 	add	r2, r0, 0xffe0
0xC17D | 0x40D0        | 00415 | 	add	r0, r0, 0xffd0
0xC17E | 0x0B8A        | 00416 | 	mov	r1, 0xa
0xC17F | 0x0B48        | 00417 | 	sub	r1, r0, r1
0xC180 | 0x2002        | 00418 | 	bc	UGE, BB10_7
       |               | 00419 | // BB#6:                                //   in Loop: Header=BB10_2 Depth=1
0xC181 | 0xD7F7        | 00420 | 	st	r2, sp, 0xfff7          // 1-byte Folded Spill
0xC182 | 0x0113        | 00421 | 	bra	BB10_8
0xC183 |               | 00422 | BB10_7:                                 //   in Loop: Header=BB10_2 Depth=1
0xC183 | 0x6200        | 00423 | 	add	r4, r2, 0x0
0xC184 | 0x0390        | 00424 | 	mov	r0, 0x10
0xC185 | 0x0B42        | 00425 | 	sub	r1, r2, r0
0xC186 | 0x0002        | 00426 | 	bc	ULT, @ + 1 + 0x2
0xC187 | 0x23E8 0x0063 | 00427 | 	mov	r4, 0x63 //Select--False
0xC189 | 0xE7F7        | 00428 | 	st	r4, sp, 0xfff7          // 1-byte Folded Spill
0xC18A | 0x010B        | 00429 | 	bra	BB10_8
0xC18B |               | 00430 | BB10_2:                                 // %.lr.ph..lr.ph.split_crit_edge
       |               | 00431 |                                         // =>This Loop Header: Depth=1
       |               | 00432 |                                         //     Child Loop BB10_9 Depth 2
       |               | 00433 |                                         //       Child Loop BB10_10 Depth 3
0xC18B | 0x87FD        | 00434 | 	ld	r0, sp, 0xfffd          // 1-byte Folded Reload
0xC18C | 0x0318        | 00435 | 	add	r0, r0, r3
0xC18D | 0x8000        | 00436 | 	ld	r0, r0, 0x0
0xC18E | 0x489F        | 00437 | 	add	r1, r0, 0xff9f
0xC18F | 0x0B51        | 00438 | 	sub	r1, r1, r2
0xC190 | 0x1003        | 00439 | 	bc	ULE, BB10_3
       |               | 00440 | // BB#4:                                //   in Loop: Header=BB10_2 Depth=1
0xC191 | 0x48BF        | 00441 | 	add	r1, r0, 0xffbf
0xC192 | 0x0B51        | 00442 | 	sub	r1, r1, r2
0xC193 | 0x30E8        | 00443 | 	bc	UGT, BB10_5
0xC194 |               | 00444 | BB10_3:                                 //   in Loop: Header=BB10_2 Depth=1
0xC194 | 0x40E0        | 00445 | 	add	r0, r0, 0xffe0
0xC195 | 0xC7F7        | 00446 | 	st	r0, sp, 0xfff7          // 1-byte Folded Spill
0xC196 |               | 00447 | BB10_8:                                 // %_Z13char_to_ASCIIc.exit
       |               | 00448 |                                         //   in Loop: Header=BB10_2 Depth=1
0xC196 | 0x0613        | 00449 | 	rol	r0, r3, 0x2
0xC197 | 0xDFFB        | 00450 | 	st	r3, sp, 0xfffb          // 1-byte Folded Spill
0xC198 | 0x03C8 0xFFFC | 00451 | 	and	r0, r0, 0xfffc
0xC19A | 0x0E08        | 00452 | 	rol	r1, r0, 0x1
0xC19B | 0x0E81        | 00453 | 	and	r1, r1, 0xfffe
0xC19C | 0x0308        | 00454 | 	add	r0, r0, r1
0xC19D | 0x8FFF        | 00455 | 	ld	r1, sp, 0xffff          // 1-byte Folded Reload
0xC19E | 0x0308        | 00456 | 	add	r0, r0, r1
0xC19F | 0xC7FA        | 00457 | 	st	r0, sp, 0xfffa          // 1-byte Folded Spill
0xC1A0 | 0x2381        | 00458 | 	mov	r4, 0x1
0xC1A1 | 0x03E8 0x0080 | 00459 | 	mov	r0, 0x80
0xC1A3 | 0xC7F6        | 00460 | 	st	r0, sp, 0xfff6          // 1-byte Folded Spill
0xC1A4 | 0x9FFE        | 00461 | 	ld	r3, sp, 0xfffe          // 1-byte Folded Reload
0xC1A5 |               | 00462 | BB10_9:                                 //   Parent Loop BB10_2 Depth=1
       |               | 00463 |                                         // =>  This Loop Header: Depth=2
       |               | 00464 |                                         //       Child Loop BB10_10 Depth 3
0xC1A5 | 0xDFF9        | 00465 | 	st	r3, sp, 0xfff9          // 1-byte Folded Spill
0xC1A6 | 0xE7F8        | 00466 | 	st	r4, sp, 0xfff8          // 1-byte Folded Spill
0xC1A7 | 0x97FA        | 00467 | 	ld	r2, sp, 0xfffa          // 1-byte Folded Reload
0xC1A8 | 0x33EC 0xC08C | 00468 | 	jsr	r6, sxc__Z26OLED_SetPosition_160128RGBhh
0xC1AA | 0x33EC 0xC071 | 00469 | 	jsr	r6, sxc__Z31OLED_WriteMemoryStart_160128RGBv
0xC1AC | 0x1380        | 00470 | 	mov	r2, 0x0
0xC1AD |               | 00471 | BB10_10:                                //   Parent Loop BB10_2 Depth=1
       |               | 00472 |                                         //     Parent Loop BB10_9 Depth=2
       |               | 00473 |                                         // =>    This Inner Loop Header: Depth=3
0xC1AD | 0xD7F5        | 00474 | 	st	r2, sp, 0xfff5          // 1-byte Folded Spill
0xC1AE | 0x8FF7        | 00475 | 	ld	r1, sp, 0xfff7          // 1-byte Folded Reload
0xC1AF | 0x0611        | 00476 | 	rol	r0, r1, 0x2
0xC1B0 | 0x03C8 0xFFFC | 00477 | 	and	r0, r0, 0xfffc
0xC1B2 | 0x0301        | 00478 | 	add	r0, r1, r0
0xC1B3 | 0x03C0 0xCA1C | 00479 | 	add	r0, r0, sxc_Ascii_1
0xC1B5 | 0x0E82        | 00480 | 	and	r1, r2, 0xfffe
0xC1B6 | 0x0E79        | 00481 | 	rol	r1, r1, 0xf
0xC1B7 | 0x0308        | 00482 | 	add	r0, r0, r1
0xC1B8 | 0x8000        | 00483 | 	ld	r0, r0, 0x0
0xC1B9 | 0x8FF6        | 00484 | 	ld	r1, sp, 0xfff6          // 1-byte Folded Reload
0xC1BA | 0x0548        | 00485 | 	and	r0, r0, r1
0xC1BB | 0x0B48        | 00486 | 	sub	r1, r0, r1
0xC1BC | 0x2802        | 00487 | 	bc	NE, BB10_12
       |               | 00488 | // BB#11:                               //   in Loop: Header=BB10_10 Depth=3
0xC1BD | 0x13BF        | 00489 | 	mov	r2, 0xffff
0xC1BE | 0x0101        | 00490 | 	bra	BB10_13
0xC1BF |               | 00491 | BB10_12:                                //   in Loop: Header=BB10_10 Depth=3
0xC1BF | 0x1380        | 00492 | 	mov	r2, 0x0
0xC1C0 |               | 00493 | BB10_13:                                //   in Loop: Header=BB10_10 Depth=3
0xC1C0 | 0x1B80        | 00494 | 	mov	r3, 0x0
0xC1C1 | 0x33EC 0xC07A | 00495 | 	jsr	r6, sxc__Z20OLED_Pixel_160128RGBm
0xC1C3 | 0x97F5        | 00496 | 	ld	r2, sp, 0xfff5          // 1-byte Folded Reload
0xC1C4 | 0x5201        | 00497 | 	add	r2, r2, 0x1
0xC1C5 | 0x4AF6        | 00498 | 	sub	r1, r2, 0xa
0xC1C6 | 0x28E6        | 00499 | 	bc	NE, BB10_10
       |               | 00500 | // BB#14:                               //   in Loop: Header=BB10_9 Depth=2
0xC1C7 | 0xA7F8        | 00501 | 	ld	r4, sp, 0xfff8          // 1-byte Folded Reload
0xC1C8 | 0x03CC 0x0001 | 00502 | 	and	r0, r4, 0x1
0xC1CA | 0x0F80        | 00503 | 	xor	r1, r0, 0x1
0xC1CB | 0x0380        | 00504 | 	mov	r0, 0x0
0xC1CC | 0x0348        | 00505 | 	sub	r0, r0, r1
0xC1CD | 0x97F6        | 00506 | 	ld	r2, sp, 0xfff6          // 1-byte Folded Reload
0xC1CE | 0x1502        | 00507 | 	rol	r2, r2, r0
0xC1CF | 0x0BF1 0x2020 | 00508 | 	ld	r1, r1, 0x2020
0xC1D1 | 0x154A        | 00509 | 	and	r2, r2, r1
0xC1D2 | 0x48F0        | 00510 | 	sub	r1, r0, 0x10
0xC1D3 | 0x1401        | 00511 | 	bc	LT, @ + 1 + 0x1
0xC1D4 | 0x1380        | 00512 | 	mov	r2, 0x0 //Select--False
0xC1D5 | 0xD7F6        | 00513 | 	st	r2, sp, 0xfff6          // 1-byte Folded Spill
0xC1D6 | 0x9FF9        | 00514 | 	ld	r3, sp, 0xfff9          // 1-byte Folded Reload
0xC1D7 | 0x5B01        | 00515 | 	add	r3, r3, 0x1
0xC1D8 | 0x6401        | 00516 | 	add	r4, r4, 0x1
0xC1D9 | 0x4CEF        | 00517 | 	sub	r1, r4, 0x11
0xC1DA | 0x28CA        | 00518 | 	bc	NE, BB10_9
       |               | 00519 | // BB#15:                               // %_Z21OLED_Text2x_160128RGBhhhmm.exit
       |               | 00520 |                                         //   in Loop: Header=BB10_2 Depth=1
0xC1DB | 0x9FFB        | 00521 | 	ld	r3, sp, 0xfffb          // 1-byte Folded Reload
0xC1DC | 0x5B01        | 00522 | 	add	r3, r3, 0x1
0xC1DD | 0x87FC        | 00523 | 	ld	r0, sp, 0xfffc          // 1-byte Folded Reload
0xC1DE | 0x1399        | 00524 | 	mov	r2, 0x19
0xC1DF | 0x0B43        | 00525 | 	sub	r1, r3, r0
0xC1E0 | 0x28AA        | 00526 | 	bc	NE, BB10_2
0xC1E1 |               | 00527 | BB10_16:                                // %._crit_edge
0xC1E1 | 0xB7F4        | 00528 | 	ld	r6, sp, 0xfff4          // 1-byte Folded Reload
0xC1E2 | 0x7FF4        | 00529 | 	sub	sp, sp, 0xc
0xC1E3 | 0x33E6        | 00530 | 	jsr	r6, r6
       |               | 00531 | 
       |               | 00532 | //align
       |               | 00533 | @ = (@ + 1-1)  & -1
0xC1E4 |               | 00534 | sxc__Z14OLED_main_pagejjj:              // @_Z14OLED_main_pagejjj
       |               | 00535 | // BB#0:
0xC1E4 | 0x7F08        | 00536 | 	add	sp, sp, 0x8
0xC1E5 | 0xF7F8        | 00537 | 	st	r6, sp, 0xfff8          // 1-byte Folded Spill
0xC1E6 | 0xE7FD        | 00538 | 	st	r4, sp, 0xfffd          // 1-byte Folded Spill
0xC1E7 | 0xDFFE        | 00539 | 	st	r3, sp, 0xfffe          // 1-byte Folded Spill
0xC1E8 | 0xD7FF        | 00540 | 	st	r2, sp, 0xffff          // 1-byte Folded Spill
0xC1E9 | 0x1394        | 00541 | 	mov	r2, 0x14
0xC1EA | 0x1BE8 0x0064 | 00542 | 	mov	r3, 0x64
0xC1EC | 0x23E8 0x0030 | 00543 | 	mov	r4, 0x30
0xC1EE | 0x33EC 0xC0B8 | 00544 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC1F0 | 0x139B        | 00545 | 	mov	r2, 0x1b
0xC1F1 | 0x1BE8 0x0064 | 00546 | 	mov	r3, 0x64
0xC1F3 | 0x23E8 0x0052 | 00547 | 	mov	r4, 0x52
0xC1F5 | 0x33EC 0xC0B8 | 00548 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC1F7 | 0x13E8 0x0022 | 00549 | 	mov	r2, 0x22
0xC1F9 | 0x1BE8 0x0064 | 00550 | 	mov	r3, 0x64
0xC1FB | 0x23E8 0x004F | 00551 | 	mov	r4, 0x4f
0xC1FD | 0x33EC 0xC0B8 | 00552 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC1FF | 0x13E8 0x0029 | 00553 | 	mov	r2, 0x29
0xC201 | 0x1BE8 0x0064 | 00554 | 	mov	r3, 0x64
0xC203 | 0x23E8 0x0046 | 00555 | 	mov	r4, 0x46
0xC205 | 0x33EC 0xC0B8 | 00556 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC207 | 0x13E8 0x0030 | 00557 | 	mov	r2, 0x30
0xC209 | 0x1BE8 0x0064 | 00558 | 	mov	r3, 0x64
0xC20B | 0x23E8 0x0049 | 00559 | 	mov	r4, 0x49
0xC20D | 0x33EC 0xC0B8 | 00560 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC20F | 0x13E8 0x0037 | 00561 | 	mov	r2, 0x37
0xC211 | 0x1BE8 0x0064 | 00562 | 	mov	r3, 0x64
0xC213 | 0x23E8 0x004C | 00563 | 	mov	r4, 0x4c
0xC215 | 0x33EC 0xC0B8 | 00564 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC217 | 0x13E8 0x003E | 00565 | 	mov	r2, 0x3e
0xC219 | 0x1BE8 0x0064 | 00566 | 	mov	r3, 0x64
0xC21B | 0x23E8 0x0045 | 00567 | 	mov	r4, 0x45
0xC21D | 0x33EC 0xC0B8 | 00568 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC21F | 0x13E8 0x0045 | 00569 | 	mov	r2, 0x45
0xC221 | 0x1BE8 0x0064 | 00570 | 	mov	r3, 0x64
0xC223 | 0x239A        | 00571 | 	mov	r4, 0x1a
0xC224 | 0x33EC 0xC0B8 | 00572 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC226 | 0x03E8 0x0060 | 00573 | 	mov	r0, 0x60
0xC228 | 0x1380        | 00574 | 	mov	r2, 0x0
0xC229 |               | 00575 | BB11_1:                                 // =>This Loop Header: Depth=1
       |               | 00576 |                                         //     Child Loop BB11_6 Depth 2
       |               | 00577 |                                         //     Child Loop BB11_5 Depth 2
       |               | 00578 |                                         //     Child Loop BB11_3 Depth 2
0xC229 | 0xD7FA        | 00579 | 	st	r2, sp, 0xfffa          // 1-byte Folded Spill
0xC22A | 0xC7FB        | 00580 | 	st	r0, sp, 0xfffb          // 1-byte Folded Spill
0xC22B | 0x1394        | 00581 | 	mov	r2, 0x14
0xC22C | 0x5800        | 00582 | 	add	r3, r0, 0x0
0xC22D | 0x33EC 0xC08C | 00583 | 	jsr	r6, sxc__Z26OLED_SetPosition_160128RGBhh
0xC22F | 0x33EC 0xC071 | 00584 | 	jsr	r6, sxc__Z31OLED_WriteMemoryStart_160128RGBv
0xC231 | 0x87FA        | 00585 | 	ld	r0, sp, 0xfffa          // 1-byte Folded Reload
0xC232 | 0x48E1        | 00586 | 	sub	r1, r0, 0x1f
0xC233 | 0x280C        | 00587 | 	bc	NE, BB11_4
       |               | 00588 | // BB#2:                                //   in Loop: Header=BB11_1 Depth=1
0xC234 | 0x03E8 0x0080 | 00589 | 	mov	r0, 0x80
0xC236 |               | 00590 | BB11_3:                                 // %.lr.ph.split.split.us.i
       |               | 00591 |                                         //   Parent Loop BB11_1 Depth=1
       |               | 00592 |                                         // =>  This Inner Loop Header: Depth=2
0xC236 | 0xC7F9        | 00593 | 	st	r0, sp, 0xfff9          // 1-byte Folded Spill
0xC237 | 0x13E8 0xF800 | 00594 | 	mov	r2, 0xf800
0xC239 | 0x1B80        | 00595 | 	mov	r3, 0x0
0xC23A | 0x33EC 0xC07A | 00596 | 	jsr	r6, sxc__Z20OLED_Pixel_160128RGBm
0xC23C | 0x87F9        | 00597 | 	ld	r0, sp, 0xfff9          // 1-byte Folded Reload
0xC23D | 0x40FF        | 00598 | 	add	r0, r0, 0xffff
       |               | 00599 | 	//cmp	r0, 0x0
0xC23E | 0x28F7        | 00600 | 	bc	ZC, BB11_3
0xC23F | 0x0120        | 00601 | 	bra	BB11_11
0xC240 |               | 00602 | BB11_4:                                 //   in Loop: Header=BB11_1 Depth=1
0xC240 | 0x1380        | 00603 | 	mov	r2, 0x0
0xC241 | 0x1BE8 0x0080 | 00604 | 	mov	r3, 0x80
0xC243 | 0x4800        | 00605 | 	sub	r1, r0, 0x0
0xC244 | 0x280A        | 00606 | 	bc	NE, BB11_6
0xC245 |               | 00607 | BB11_5:                                 // %.lr.ph.split.us..lr.ph.split.us.split_crit_edge.i
       |               | 00608 |                                         //   Parent Loop BB11_1 Depth=1
       |               | 00609 |                                         // =>  This Inner Loop Header: Depth=2
0xC245 | 0xDFF9        | 00610 | 	st	r3, sp, 0xfff9          // 1-byte Folded Spill
0xC246 | 0x13E8 0xF800 | 00611 | 	mov	r2, 0xf800
0xC248 | 0x1B80        | 00612 | 	mov	r3, 0x0
0xC249 | 0x33EC 0xC07A | 00613 | 	jsr	r6, sxc__Z20OLED_Pixel_160128RGBm
0xC24B | 0x9FF9        | 00614 | 	ld	r3, sp, 0xfff9          // 1-byte Folded Reload
0xC24C | 0x5BFF        | 00615 | 	add	r3, r3, 0xffff
       |               | 00616 | 	//cmp	r3, 0x0
0xC24D | 0x28F7        | 00617 | 	bc	ZC, BB11_5
0xC24E | 0x0111        | 00618 | 	bra	BB11_11
0xC24F |               | 00619 | BB11_6:                                 // %.lr.ph.split..lr.ph.split.split_crit_edge.i
       |               | 00620 |                                         //   Parent Loop BB11_1 Depth=1
       |               | 00621 |                                         // =>  This Inner Loop Header: Depth=2
0xC24F | 0x4A00        | 00622 | 	sub	r1, r2, 0x0
0xC250 | 0x0802        | 00623 | 	bc	EQ, BB11_8
       |               | 00624 | // BB#7:                                // %.lr.ph.split..lr.ph.split.split_crit_edge.i
       |               | 00625 |                                         //   in Loop: Header=BB11_6 Depth=2
0xC251 | 0x4A81        | 00626 | 	sub	r1, r2, 0x7f
0xC252 | 0x2804        | 00627 | 	bc	NE, BB11_9
0xC253 |               | 00628 | BB11_8:                                 //   in Loop: Header=BB11_6 Depth=2
0xC253 | 0xD7F9        | 00629 | 	st	r2, sp, 0xfff9          // 1-byte Folded Spill
0xC254 | 0x13E8 0xF800 | 00630 | 	mov	r2, 0xf800
0xC256 | 0x0102        | 00631 | 	bra	BB11_10
0xC257 |               | 00632 | BB11_9:                                 //   in Loop: Header=BB11_6 Depth=2
0xC257 | 0xD7F9        | 00633 | 	st	r2, sp, 0xfff9          // 1-byte Folded Spill
0xC258 | 0x1380        | 00634 | 	mov	r2, 0x0
0xC259 |               | 00635 | BB11_10:                                //   in Loop: Header=BB11_6 Depth=2
0xC259 | 0x1B80        | 00636 | 	mov	r3, 0x0
0xC25A | 0x33EC 0xC07A | 00637 | 	jsr	r6, sxc__Z20OLED_Pixel_160128RGBm
0xC25C | 0x97F9        | 00638 | 	ld	r2, sp, 0xfff9          // 1-byte Folded Reload
0xC25D | 0x5201        | 00639 | 	add	r2, r2, 0x1
0xC25E | 0x4A80        | 00640 | 	sub	r1, r2, 0x80
0xC25F | 0x28EF        | 00641 | 	bc	NE, BB11_6
0xC260 |               | 00642 | BB11_11:                                // %._crit_edge.i
       |               | 00643 |                                         //   in Loop: Header=BB11_1 Depth=1
0xC260 | 0x87FB        | 00644 | 	ld	r0, sp, 0xfffb          // 1-byte Folded Reload
0xC261 | 0x4001        | 00645 | 	add	r0, r0, 0x1
0xC262 | 0x97FA        | 00646 | 	ld	r2, sp, 0xfffa          // 1-byte Folded Reload
0xC263 | 0x5201        | 00647 | 	add	r2, r2, 0x1
0xC264 | 0x4AE0        | 00648 | 	sub	r1, r2, 0x20
0xC265 | 0x28C3        | 00649 | 	bc	NE, BB11_1
       |               | 00650 | // BB#12:                               // %_Z8Draw_Boxhhmmjj.exit
0xC266 | 0x87FD        | 00651 | 	ld	r0, sp, 0xfffd          // 1-byte Folded Reload
0xC267 | 0x0608        | 00652 | 	rol	r0, r0, 0x1
0xC268 | 0x0680        | 00653 | 	and	r0, r0, 0xfffe
0xC269 | 0x0E10        | 00654 | 	rol	r1, r0, 0x2
0xC26A | 0x0BC9 0xFFFC | 00655 | 	and	r1, r1, 0xfffc
0xC26C | 0x0308        | 00656 | 	add	r0, r0, r1
0xC26D | 0x0E09        | 00657 | 	rol	r1, r1, 0x1
0xC26E | 0x0E81        | 00658 | 	and	r1, r1, 0xfffe
0xC26F | 0x0308        | 00659 | 	add	r0, r0, r1
0xC270 | 0x0E09        | 00660 | 	rol	r1, r1, 0x1
0xC271 | 0x0E81        | 00661 | 	and	r1, r1, 0xfffe
0xC272 | 0x0308        | 00662 | 	add	r0, r0, r1
0xC273 | 0x0E09        | 00663 | 	rol	r1, r1, 0x1
0xC274 | 0x0E81        | 00664 | 	and	r1, r1, 0xfffe
0xC275 | 0x1308        | 00665 | 	add	r2, r0, r1
0xC276 | 0xD7F9        | 00666 | 	st	r2, sp, 0xfff9          // 1-byte Folded Spill
0xC277 | 0x1BE8 0x0064 | 00667 | 	mov	r3, 0x64
0xC279 | 0x33EC 0xC7AA | 00668 | 	jsr	r6, sxc___xinc_udiv
0xC27B | 0x1BE8 0x0060 | 00669 | 	mov	r3, 0x60
0xC27D | 0x0BE8 0x0063 | 00670 | 	mov	r1, 0x63
0xC27F | 0x97F9        | 00671 | 	ld	r2, sp, 0xfff9          // 1-byte Folded Reload
0xC280 | 0x0B4A        | 00672 | 	sub	r1, r2, r1
0xC281 | 0x101C        | 00673 | 	bc	ULE, BB11_17
       |               | 00674 | // BB#13:
0xC282 | 0xC7FA        | 00675 | 	st	r0, sp, 0xfffa          // 1-byte Folded Spill
0xC283 | 0x0380        | 00676 | 	mov	r0, 0x0
0xC284 |               | 00677 | BB11_16:                                // %.lr.ph.us.i
       |               | 00678 |                                         // =>This Loop Header: Depth=1
       |               | 00679 |                                         //     Child Loop BB11_14 Depth 2
0xC284 | 0xC7FC        | 00680 | 	st	r0, sp, 0xfffc          // 1-byte Folded Spill
0xC285 | 0xDFFB        | 00681 | 	st	r3, sp, 0xfffb          // 1-byte Folded Spill
0xC286 | 0x1397        | 00682 | 	mov	r2, 0x17
0xC287 | 0x33EC 0xC08C | 00683 | 	jsr	r6, sxc__Z26OLED_SetPosition_160128RGBhh
0xC289 | 0x33EC 0xC071 | 00684 | 	jsr	r6, sxc__Z31OLED_WriteMemoryStart_160128RGBv
0xC28B | 0x0380        | 00685 | 	mov	r0, 0x0
0xC28C |               | 00686 | BB11_14:                                //   Parent Loop BB11_16 Depth=1
       |               | 00687 |                                         // =>  This Inner Loop Header: Depth=2
0xC28C | 0xC7F9        | 00688 | 	st	r0, sp, 0xfff9          // 1-byte Folded Spill
0xC28D | 0x13E8 0xF800 | 00689 | 	mov	r2, 0xf800
0xC28F | 0x1B80        | 00690 | 	mov	r3, 0x0
0xC290 | 0x33EC 0xC07A | 00691 | 	jsr	r6, sxc__Z20OLED_Pixel_160128RGBm
0xC292 | 0x87F9        | 00692 | 	ld	r0, sp, 0xfff9          // 1-byte Folded Reload
0xC293 | 0x4001        | 00693 | 	add	r0, r0, 0x1
0xC294 | 0x8FFA        | 00694 | 	ld	r1, sp, 0xfffa          // 1-byte Folded Reload
0xC295 | 0x0B48        | 00695 | 	sub	r1, r0, r1
0xC296 | 0x00F5        | 00696 | 	bc	ULT, BB11_14
       |               | 00697 | // BB#15:                               //   in Loop: Header=BB11_16 Depth=1
0xC297 | 0x9FFB        | 00698 | 	ld	r3, sp, 0xfffb          // 1-byte Folded Reload
0xC298 | 0x5B01        | 00699 | 	add	r3, r3, 0x1
0xC299 | 0x87FC        | 00700 | 	ld	r0, sp, 0xfffc          // 1-byte Folded Reload
0xC29A | 0x4001        | 00701 | 	add	r0, r0, 0x1
0xC29B | 0x48E6        | 00702 | 	sub	r1, r0, 0x1a
0xC29C | 0x080D        | 00703 | 	bc	EQ, BB11_18
0xC29D | 0x01E6        | 00704 | 	bra	BB11_16
0xC29E |               | 00705 | BB11_17:                                // %.preheader
       |               | 00706 |                                         // =>This Inner Loop Header: Depth=1
0xC29E | 0xDFFB        | 00707 | 	st	r3, sp, 0xfffb          // 1-byte Folded Spill
0xC29F | 0x1397        | 00708 | 	mov	r2, 0x17
0xC2A0 | 0x33EC 0xC08C | 00709 | 	jsr	r6, sxc__Z26OLED_SetPosition_160128RGBhh
0xC2A2 | 0x33EC 0xC071 | 00710 | 	jsr	r6, sxc__Z31OLED_WriteMemoryStart_160128RGBv
0xC2A4 | 0x8FFB        | 00711 | 	ld	r1, sp, 0xfffb          // 1-byte Folded Reload
0xC2A5 | 0x4101        | 00712 | 	add	r0, r1, 0x1
0xC2A6 | 0x49A1        | 00713 | 	add	r1, r1, 0xffa1
0xC2A7 | 0x5800        | 00714 | 	add	r3, r0, 0x0
0xC2A8 | 0x49E6        | 00715 | 	sub	r1, r1, 0x1a
0xC2A9 | 0x28F4        | 00716 | 	bc	NE, BB11_17
0xC2AA |               | 00717 | BB11_18:                                // %_Z8Draw_Barhhmmjjj.exit
0xC2AA | 0x1394        | 00718 | 	mov	r2, 0x14
0xC2AB | 0x1BE8 0x002E | 00719 | 	mov	r3, 0x2e
0xC2AD | 0x23E8 0x0030 | 00720 | 	mov	r4, 0x30
0xC2AF | 0x33EC 0xC0B8 | 00721 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC2B1 | 0x139B        | 00722 | 	mov	r2, 0x1b
0xC2B2 | 0x1BE8 0x002E | 00723 | 	mov	r3, 0x2e
0xC2B4 | 0x23E8 0x0052 | 00724 | 	mov	r4, 0x52
0xC2B6 | 0x33EC 0xC0B8 | 00725 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC2B8 | 0x13E8 0x0022 | 00726 | 	mov	r2, 0x22
0xC2BA | 0x1BE8 0x002E | 00727 | 	mov	r3, 0x2e
0xC2BC | 0x23E8 0x004F | 00728 | 	mov	r4, 0x4f
0xC2BE | 0x33EC 0xC0B8 | 00729 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC2C0 | 0x13E8 0x0029 | 00730 | 	mov	r2, 0x29
0xC2C2 | 0x1BE8 0x002E | 00731 | 	mov	r3, 0x2e
0xC2C4 | 0x23E8 0x0047 | 00732 | 	mov	r4, 0x47
0xC2C6 | 0x33EC 0xC0B8 | 00733 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC2C8 | 0x13E8 0x0030 | 00734 | 	mov	r2, 0x30
0xC2CA | 0x1BE8 0x002E | 00735 | 	mov	r3, 0x2e
0xC2CC | 0x23E8 0x0052 | 00736 | 	mov	r4, 0x52
0xC2CE | 0x33EC 0xC0B8 | 00737 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC2D0 | 0x13E8 0x0037 | 00738 | 	mov	r2, 0x37
0xC2D2 | 0x1BE8 0x002E | 00739 | 	mov	r3, 0x2e
0xC2D4 | 0x23E8 0x0045 | 00740 | 	mov	r4, 0x45
0xC2D6 | 0x33EC 0xC0B8 | 00741 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC2D8 | 0x13E8 0x003E | 00742 | 	mov	r2, 0x3e
0xC2DA | 0x1BE8 0x002E | 00743 | 	mov	r3, 0x2e
0xC2DC | 0x23E8 0x0053 | 00744 | 	mov	r4, 0x53
0xC2DE | 0x33EC 0xC0B8 | 00745 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC2E0 | 0x13E8 0x0045 | 00746 | 	mov	r2, 0x45
0xC2E2 | 0x1BE8 0x002E | 00747 | 	mov	r3, 0x2e
0xC2E4 | 0x23E8 0x0053 | 00748 | 	mov	r4, 0x53
0xC2E6 | 0x33EC 0xC0B8 | 00749 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC2E8 | 0x13E8 0x004C | 00750 | 	mov	r2, 0x4c
0xC2EA | 0x1BE8 0x002E | 00751 | 	mov	r3, 0x2e
0xC2EC | 0x239A        | 00752 | 	mov	r4, 0x1a
0xC2ED | 0x33EC 0xC0B8 | 00753 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC2EF | 0x1394        | 00754 | 	mov	r2, 0x14
0xC2F0 | 0x1B9C        | 00755 | 	mov	r3, 0x1c
0xC2F1 | 0x23E8 0x0034 | 00756 | 	mov	r4, 0x34
0xC2F3 | 0x33EC 0xC0B8 | 00757 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC2F5 | 0x139B        | 00758 | 	mov	r2, 0x1b
0xC2F6 | 0x1B9C        | 00759 | 	mov	r3, 0x1c
0xC2F7 | 0x23E8 0x0045 | 00760 | 	mov	r4, 0x45
0xC2F9 | 0x33EC 0xC0B8 | 00761 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC2FB | 0x13E8 0x0022 | 00762 | 	mov	r2, 0x22
0xC2FD | 0x1B9C        | 00763 | 	mov	r3, 0x1c
0xC2FE | 0x23E8 0x004D | 00764 | 	mov	r4, 0x4d
0xC300 | 0x33EC 0xC0B8 | 00765 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC302 | 0x13E8 0x0029 | 00766 | 	mov	r2, 0x29
0xC304 | 0x1B9C        | 00767 | 	mov	r3, 0x1c
0xC305 | 0x23E8 0x0050 | 00768 | 	mov	r4, 0x50
0xC307 | 0x33EC 0xC0B8 | 00769 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC309 | 0x13E8 0x0030 | 00770 | 	mov	r2, 0x30
0xC30B | 0x1B9C        | 00771 | 	mov	r3, 0x1c
0xC30C | 0x23E8 0x0045 | 00772 | 	mov	r4, 0x45
0xC30E | 0x33EC 0xC0B8 | 00773 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC310 | 0x13E8 0x0037 | 00774 | 	mov	r2, 0x37
0xC312 | 0x1B9C        | 00775 | 	mov	r3, 0x1c
0xC313 | 0x23E8 0x0052 | 00776 | 	mov	r4, 0x52
0xC315 | 0x33EC 0xC0B8 | 00777 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC317 | 0x13E8 0x003E | 00778 | 	mov	r2, 0x3e
0xC319 | 0x1B9C        | 00779 | 	mov	r3, 0x1c
0xC31A | 0x23E8 0x0041 | 00780 | 	mov	r4, 0x41
0xC31C | 0x33EC 0xC0B8 | 00781 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC31E | 0x13E8 0x0045 | 00782 | 	mov	r2, 0x45
0xC320 | 0x1B9C        | 00783 | 	mov	r3, 0x1c
0xC321 | 0x23E8 0x0054 | 00784 | 	mov	r4, 0x54
0xC323 | 0x33EC 0xC0B8 | 00785 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC325 | 0x13E8 0x004C | 00786 | 	mov	r2, 0x4c
0xC327 | 0x1B9C        | 00787 | 	mov	r3, 0x1c
0xC328 | 0x23E8 0x0055 | 00788 | 	mov	r4, 0x55
0xC32A | 0x33EC 0xC0B8 | 00789 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC32C | 0x13E8 0x0053 | 00790 | 	mov	r2, 0x53
0xC32E | 0x1B9C        | 00791 | 	mov	r3, 0x1c
0xC32F | 0x23E8 0x0052 | 00792 | 	mov	r4, 0x52
0xC331 | 0x33EC 0xC0B8 | 00793 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC333 | 0x13E8 0x005A | 00794 | 	mov	r2, 0x5a
0xC335 | 0x1B9C        | 00795 | 	mov	r3, 0x1c
0xC336 | 0x23E8 0x0045 | 00796 | 	mov	r4, 0x45
0xC338 | 0x33EC 0xC0B8 | 00797 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC33A | 0x13E8 0x0061 | 00798 | 	mov	r2, 0x61
0xC33C | 0x1B9C        | 00799 | 	mov	r3, 0x1c
0xC33D | 0x239A        | 00800 | 	mov	r4, 0x1a
0xC33E | 0x33EC 0xC0B8 | 00801 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC340 | 0x1394        | 00802 | 	mov	r2, 0x14
0xC341 | 0x1B8A        | 00803 | 	mov	r3, 0xa
0xC342 | 0x23E8 0x0028 | 00804 | 	mov	r4, 0x28
0xC344 | 0x33EC 0xC0B8 | 00805 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC346 | 0x139B        | 00806 | 	mov	r2, 0x1b
0xC347 | 0x1B8A        | 00807 | 	mov	r3, 0xa
0xC348 | 0x23E8 0x0055 | 00808 | 	mov	r4, 0x55
0xC34A | 0x33EC 0xC0B8 | 00809 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC34C | 0x13E8 0x0022 | 00810 | 	mov	r2, 0x22
0xC34E | 0x1B8A        | 00811 | 	mov	r3, 0xa
0xC34F | 0x23E8 0x004D | 00812 | 	mov	r4, 0x4d
0xC351 | 0x33EC 0xC0B8 | 00813 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC353 | 0x13E8 0x0029 | 00814 | 	mov	r2, 0x29
0xC355 | 0x1B8A        | 00815 | 	mov	r3, 0xa
0xC356 | 0x23E8 0x0049 | 00816 | 	mov	r4, 0x49
0xC358 | 0x33EC 0xC0B8 | 00817 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC35A | 0x13E8 0x0030 | 00818 | 	mov	r2, 0x30
0xC35C | 0x1B8A        | 00819 | 	mov	r3, 0xa
0xC35D | 0x23E8 0x0044 | 00820 | 	mov	r4, 0x44
0xC35F | 0x33EC 0xC0B8 | 00821 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC361 | 0x13E8 0x0037 | 00822 | 	mov	r2, 0x37
0xC363 | 0x1B8A        | 00823 | 	mov	r3, 0xa
0xC364 | 0x23E8 0x0049 | 00824 | 	mov	r4, 0x49
0xC366 | 0x33EC 0xC0B8 | 00825 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC368 | 0x13E8 0x003E | 00826 | 	mov	r2, 0x3e
0xC36A | 0x1B8A        | 00827 | 	mov	r3, 0xa
0xC36B | 0x23E8 0x0054 | 00828 | 	mov	r4, 0x54
0xC36D | 0x33EC 0xC0B8 | 00829 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC36F | 0x13E8 0x0045 | 00830 | 	mov	r2, 0x45
0xC371 | 0x1B8A        | 00831 | 	mov	r3, 0xa
0xC372 | 0x23E8 0x0059 | 00832 | 	mov	r4, 0x59
0xC374 | 0x33EC 0xC0B8 | 00833 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC376 | 0x13E8 0x004C | 00834 | 	mov	r2, 0x4c
0xC378 | 0x1B8A        | 00835 | 	mov	r3, 0xa
0xC379 | 0x239A        | 00836 | 	mov	r4, 0x1a
0xC37A | 0x33EC 0xC0B8 | 00837 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC37C | 0x13E8 0x0053 | 00838 | 	mov	r2, 0x53
0xC37E | 0x1BE8 0x002E | 00839 | 	mov	r3, 0x2e
0xC380 | 0xA7FD        | 00840 | 	ld	r4, sp, 0xfffd          // 1-byte Folded Reload
0xC381 | 0x2B81        | 00841 | 	mov	r5, 0x1
0xC382 | 0x33EC 0xC0EC | 00842 | 	jsr	r6, sxc__Z21OLED_Print_Sensor_Valhhjj
0xC384 | 0x13E8 0x0068 | 00843 | 	mov	r2, 0x68
0xC386 | 0x1B9C        | 00844 | 	mov	r3, 0x1c
0xC387 | 0xA7FF        | 00845 | 	ld	r4, sp, 0xffff          // 1-byte Folded Reload
0xC388 | 0x2B80        | 00846 | 	mov	r5, 0x0
0xC389 | 0x33EC 0xC0EC | 00847 | 	jsr	r6, sxc__Z21OLED_Print_Sensor_Valhhjj
0xC38B | 0x13E8 0x0053 | 00848 | 	mov	r2, 0x53
0xC38D | 0x1B8A        | 00849 | 	mov	r3, 0xa
0xC38E | 0xA7FE        | 00850 | 	ld	r4, sp, 0xfffe          // 1-byte Folded Reload
0xC38F | 0x2B81        | 00851 | 	mov	r5, 0x1
0xC390 | 0x33EC 0xC0EC | 00852 | 	jsr	r6, sxc__Z21OLED_Print_Sensor_Valhhjj
0xC392 | 0xB7F8        | 00853 | 	ld	r6, sp, 0xfff8          // 1-byte Folded Reload
0xC393 | 0x7FF8        | 00854 | 	sub	sp, sp, 0x8
0xC394 | 0x33E6        | 00855 | 	jsr	r6, r6
       |               | 00856 | 
       |               | 00857 | //align
       |               | 00858 | @ = (@ + 1-1)  & -1
0xC395 |               | 00859 | sxc__Z10TempThreadPv:                   // @_Z10TempThreadPv
       |               | 00860 | // BB#0:
0xC395 | 0x7F01        | 00861 | 	add	sp, sp, 0x1
0xC396 | 0xF7FF        | 00862 | 	st	r6, sp, 0xffff          // 1-byte Folded Spill
0xC397 | 0x0381        | 00863 | 	mov	r0, 0x1
0xC398 | 0x1380        | 00864 | 	mov	r2, 0x0
0xC399 | 0x0103        | 00865 | 	bra	BB12_1
0xC39A |               | 00866 | BB12_5:                                 // %_Z7getTempv.exit
       |               | 00867 |                                         //   in Loop: Header=BB12_1 Depth=1
0xC39A | 0x1BEB 0xCC94 | 00868 | 	st	r3, sxc_current_temp
0xC39C | 0x0286        | 00869 | 	outp	r0, 0x6
0xC39D |               | 00870 | BB12_1:                                 // =>This Inner Loop Header: Depth=1
0xC39D | 0x0287        | 00871 | 	outp	r0, 0x7
0xC39E | 0x0A32        | 00872 | 	inp	r1, 0x32
0xC39F | 0x0E89        | 00873 | 	and	r1, r1, 0xfffd
0xC3A0 | 0x0AB2        | 00874 | 	outp	r1, 0x32
0xC3A1 | 0x12B6        | 00875 | 	outp	r2, 0x36
0xC3A2 | 0x1A36        | 00876 | 	inp	r3, 0x36
0xC3A3 | 0x12B6        | 00877 | 	outp	r2, 0x36
0xC3A4 | 0x2236        | 00878 | 	inp	r4, 0x36
0xC3A5 | 0x0A32        | 00879 | 	inp	r1, 0x32
0xC3A6 | 0x0F09        | 00880 | 	ior	r1, r1, 0x2
0xC3A7 | 0x0AB2        | 00881 | 	outp	r1, 0x32
0xC3A8 | 0x0BCC 0x0001 | 00882 | 	and	r1, r4, 0x1
       |               | 00883 | 	//cmp	r1, 0x0
0xC3AA | 0x2808        | 00884 | 	bc	ZC, BB12_2
       |               | 00885 | // BB#4:                                //   in Loop: Header=BB12_1 Depth=1
0xC3AB | 0x0BCB 0x00FF | 00886 | 	and	r1, r3, 0xff
0xC3AD | 0x0E41        | 00887 | 	rol	r1, r1, 0x8
0xC3AE | 0x0D8C        | 00888 | 	ior	r1, r4, r1
0xC3AF | 0x0BC9 0xFFF0 | 00889 | 	and	r1, r1, 0xfff0
0xC3B1 | 0x1E61        | 00890 | 	rol	r3, r1, 0xc
0xC3B2 | 0x01E7        | 00891 | 	bra	BB12_5
0xC3B3 |               | 00892 | BB12_2:                                 //   in Loop: Header=BB12_1 Depth=1
0xC3B3 | 0x0BE8 0xCC76 | 00893 | 	mov	r1, sxc_.str4
       |               | 00894 | 	//APP
0xC3B5 | 0x33EC 0x18BB | 00895 | 		jsr	r6, XPD_EchoString
       |               | 00896 | 	//NO_APP
0xC3B7 | 0x0BE8 0xCC2B | 00897 | 	mov	r1, sxc_.str
       |               | 00898 | 	//APP
0xC3B9 | 0x33EC 0x18BB | 00899 | 		jsr	r6, XPD_EchoString
       |               | 00900 | 	//NO_APP
0xC3BB | 0x0A32        | 00901 | 	inp	r1, 0x32
0xC3BC | 0x0E89        | 00902 | 	and	r1, r1, 0xfffd
0xC3BD | 0x0AB2        | 00903 | 	outp	r1, 0x32
0xC3BE | 0x1B80        | 00904 | 	mov	r3, 0x0
0xC3BF | 0x1AB6        | 00905 | 	outp	r3, 0x36
0xC3C0 | 0x0A36        | 00906 | 	inp	r1, 0x36
0xC3C1 | 0x1AB6        | 00907 | 	outp	r3, 0x36
0xC3C2 | 0x0A36        | 00908 | 	inp	r1, 0x36
0xC3C3 | 0x1AB6        | 00909 | 	outp	r3, 0x36
0xC3C4 | 0x0A36        | 00910 | 	inp	r1, 0x36
0xC3C5 | 0x1AB6        | 00911 | 	outp	r3, 0x36
0xC3C6 | 0x0A36        | 00912 | 	inp	r1, 0x36
0xC3C7 | 0x2232        | 00913 | 	inp	r4, 0x32
0xC3C8 | 0x270C        | 00914 | 	ior	r4, r4, 0x2
0xC3C9 | 0x22B2        | 00915 | 	outp	r4, 0x32
0xC3CA | 0x0E81        | 00916 | 	bic	r1, r1, 0x0
       |               | 00917 | 	//cmp	r1, 0x0
0xC3CB | 0x24CE        | 00918 | 	bc	VC, BB12_5
       |               | 00919 | // BB#3:                                //   in Loop: Header=BB12_1 Depth=1
0xC3CC | 0x0BE8 0xCC51 | 00920 | 	mov	r1, sxc_.str1
       |               | 00921 | 	//APP
0xC3CE | 0x33EC 0x18BB | 00922 | 		jsr	r6, XPD_EchoString
       |               | 00923 | 	//NO_APP
0xC3D0 | 0x1B80        | 00924 | 	mov	r3, 0x0
0xC3D1 | 0x01C8        | 00925 | 	bra	BB12_5
       |               | 00926 | 
       |               | 00927 | //align
       |               | 00928 | @ = (@ + 1-1)  & -1
0xC3D2 |               | 00929 | sxc__Z14RotEncodThreadPv:               // @_Z14RotEncodThreadPv
       |               | 00930 | // BB#0:
0xC3D2 | 0x7F04        | 00931 | 	add	sp, sp, 0x4
0xC3D3 | 0xF7FC        | 00932 | 	st	r6, sp, 0xfffc          // 1-byte Folded Spill
0xC3D4 | 0x0388        | 00933 | 	mov	r0, 0x8
0xC3D5 | 0x13E8 0xCC97 | 00934 | 	mov	r2, sxc_r_encoder
0xC3D7 | 0x2384        | 00935 | 	mov	r4, 0x4
0xC3D8 | 0x3383        | 00936 | 	mov	r6, 0x3
0xC3D9 | 0x0112        | 00937 | 	bra	BB13_1
0xC3DA |               | 00938 | BB13_21:                                // %_Z15get_encoder_pos14rotary_encoder.exit
       |               | 00939 |                                         //   in Loop: Header=BB13_1 Depth=1
0xC3DA | 0x8FFF        | 00940 | 	ld	r1, sp, 0xffff
0xC3DB | 0xAFFE        | 00941 | 	ld	r5, sp, 0xfffe
0xC3DC | 0x1BEB 0xCC97 | 00942 | 	st	r3, sxc_r_encoder
0xC3DE | 0xEA01        | 00943 | 	st	r5, r2, 0x1
0xC3DF | 0xCA02        | 00944 | 	st	r1, r2, 0x2
0xC3E0 | 0x0286        | 00945 | 	outp	r0, 0x6
0xC3E1 | 0x2287        | 00946 | 	outp	r4, 0x7
0xC3E2 | 0x0A2E        | 00947 | 	inp	r1, 0x2e
0xC3E3 | 0x0BC9 0xFFFC | 00948 | 	and	r1, r1, 0xfffc
0xC3E5 | 0x0E71        | 00949 | 	rol	r1, r1, 0xe
0xC3E6 | 0x0BC9 0x0001 | 00950 | 	and	r1, r1, 0x1
0xC3E8 | 0x0F81        | 00951 | 	xor	r1, r1, 0x1
0xC3E9 | 0x0BEB 0xCC96 | 00952 | 	st	r1, sxc_btn_press
0xC3EB | 0x2286        | 00953 | 	outp	r4, 0x6
0xC3EC |               | 00954 | BB13_1:                                 // =>This Inner Loop Header: Depth=1
0xC3EC | 0x0287        | 00955 | 	outp	r0, 0x7
0xC3ED | 0x8A02        | 00956 | 	ld	r1, r2, 0x2
0xC3EE | 0x9A01        | 00957 | 	ld	r3, r2, 0x1
0xC3EF | 0x2BEA 0xCC97 | 00958 | 	ld	r5, sxc_r_encoder
0xC3F1 | 0xEFFD        | 00959 | 	st	r5, sp, 0xfffd
0xC3F2 | 0xDFFE        | 00960 | 	st	r3, sp, 0xfffe
0xC3F3 | 0xCFFF        | 00961 | 	st	r1, sp, 0xffff
0xC3F4 | 0x0A2E        | 00962 | 	inp	r1, 0x2e
0xC3F5 | 0x0BC9 0x0002 | 00963 | 	and	r1, r1, 0x2
0xC3F7 | 0x1A2E        | 00964 | 	inp	r3, 0x2e
0xC3F8 | 0x1BCB 0x0001 | 00965 | 	and	r3, r3, 0x1
0xC3FA | 0x1D8B        | 00966 | 	ior	r3, r3, r1
0xC3FB | 0x8FFE        | 00967 | 	ld	r1, sp, 0xfffe
0xC3FC | 0x0B4B        | 00968 | 	sub	r1, r3, r1
0xC3FD | 0x0820        | 00969 | 	bc	EQ, BB13_16
       |               | 00970 | // BB#2:                                //   in Loop: Header=BB13_1 Depth=1
0xC3FE | 0xAFFE        | 00971 | 	ld	r5, sp, 0xfffe
0xC3FF | 0x0B75        | 00972 | 	sub	r1, r5, r6
0xC400 | 0x301C        | 00973 | 	bc	UGT, BB13_15
       |               | 00974 | // BB#3:                                //   in Loop: Header=BB13_1 Depth=1
0xC401 | 0x0BF5 0xCA13 | 00975 | 	ld	r1, r5,JTI13_0
0xC403 | 0x0BE1        | 00976 | 	jsr	r1, r1
0xC404 |               | 00977 | BB13_4:                                 //   in Loop: Header=BB13_1 Depth=1
0xC404 | 0x4BFE        | 00978 | 	sub	r1, r3, 0x2
0xC405 | 0x080F        | 00979 | 	bc	EQ, BB13_13
       |               | 00980 | // BB#5:                                //   in Loop: Header=BB13_1 Depth=1
0xC406 | 0x4BFF        | 00981 | 	sub	r1, r3, 0x1
0xC407 | 0x2815        | 00982 | 	bc	NE, BB13_15
0xC408 | 0x0111        | 00983 | 	bra	BB13_6
0xC409 |               | 00984 | BB13_7:                                 //   in Loop: Header=BB13_1 Depth=1
0xC409 | 0x4B00        | 00985 | 	sub	r1, r3, 0x0
0xC40A | 0x080A        | 00986 | 	bc	EQ, BB13_13
       |               | 00987 | // BB#8:                                //   in Loop: Header=BB13_1 Depth=1
0xC40B | 0x4BFD        | 00988 | 	sub	r1, r3, 0x3
0xC40C | 0x080D        | 00989 | 	bc	EQ, BB13_6
0xC40D | 0x010F        | 00990 | 	bra	BB13_15
0xC40E |               | 00991 | BB13_9:                                 //   in Loop: Header=BB13_1 Depth=1
0xC40E | 0x4BFD        | 00992 | 	sub	r1, r3, 0x3
0xC40F | 0x0805        | 00993 | 	bc	EQ, BB13_13
       |               | 00994 | // BB#10:                               //   in Loop: Header=BB13_1 Depth=1
0xC410 | 0x4B00        | 00995 | 	sub	r1, r3, 0x0
0xC411 | 0x0808        | 00996 | 	bc	EQ, BB13_6
0xC412 | 0x010A        | 00997 | 	bra	BB13_15
0xC413 |               | 00998 | BB13_11:                                //   in Loop: Header=BB13_1 Depth=1
0xC413 | 0x4BFF        | 00999 | 	sub	r1, r3, 0x1
0xC414 | 0x2803        | 01000 | 	bc	NE, BB13_12
0xC415 |               | 01001 | BB13_13:                                //   in Loop: Header=BB13_1 Depth=1
0xC415 | 0x8FFD        | 01002 | 	ld	r1, sp, 0xfffd
0xC416 | 0x49FF        | 01003 | 	add	r1, r1, 0xffff
0xC417 | 0x0104        | 01004 | 	bra	BB13_14
0xC418 |               | 01005 | BB13_12:                                //   in Loop: Header=BB13_1 Depth=1
0xC418 | 0x4BFE        | 01006 | 	sub	r1, r3, 0x2
0xC419 | 0x2803        | 01007 | 	bc	NE, BB13_15
0xC41A |               | 01008 | BB13_6:                                 //   in Loop: Header=BB13_1 Depth=1
0xC41A | 0x8FFD        | 01009 | 	ld	r1, sp, 0xfffd
0xC41B | 0x4901        | 01010 | 	add	r1, r1, 0x1
0xC41C |               | 01011 | BB13_14:                                //   in Loop: Header=BB13_1 Depth=1
0xC41C | 0xCFFD        | 01012 | 	st	r1, sp, 0xfffd
0xC41D |               | 01013 | BB13_15:                                //   in Loop: Header=BB13_1 Depth=1
0xC41D | 0xDFFE        | 01014 | 	st	r3, sp, 0xfffe
0xC41E |               | 01015 | BB13_16:                                //   in Loop: Header=BB13_1 Depth=1
0xC41E | 0x8FFD        | 01016 | 	ld	r1, sp, 0xfffd
0xC41F | 0x49FC        | 01017 | 	sub	r1, r1, 0x4
0xC420 | 0x1402        | 01018 | 	bc	LT, BB13_18
       |               | 01019 | // BB#17:                               //   in Loop: Header=BB13_1 Depth=1
0xC421 | 0x0B81        | 01020 | 	mov	r1, 0x1
0xC422 | 0x0104        | 01021 | 	bra	BB13_20
0xC423 |               | 01022 | BB13_18:                                //   in Loop: Header=BB13_1 Depth=1
0xC423 | 0x9FFD        | 01023 | 	ld	r3, sp, 0xfffd
0xC424 | 0x4B04        | 01024 | 	sub	r1, r3, 0xfffc
0xC425 | 0x38B4        | 01025 | 	bc	GT, BB13_21
       |               | 01026 | // BB#19:                               //   in Loop: Header=BB13_1 Depth=1
0xC426 | 0x0B82        | 01027 | 	mov	r1, 0x2
0xC427 |               | 01028 | BB13_20:                                //   in Loop: Header=BB13_1 Depth=1
0xC427 | 0xCFFF        | 01029 | 	st	r1, sp, 0xffff
0xC428 | 0x1B80        | 01030 | 	mov	r3, 0x0
0xC429 | 0xDFFD        | 01031 | 	st	r3, sp, 0xfffd
0xC42A | 0x01AF        | 01032 | 	bra	BB13_21
       |               | 01033 | //	.section	//.text,"xr"
       |               | 01034 | //align
       |               | 01035 | @ = (@ + 1-1)  & -1
0xC42B |               | 01036 | sxc__Z9PIDThreadPv:                     // @_Z9PIDThreadPv
       |               | 01037 | // BB#0:
0xC42B | 0x7F04        | 01038 | 	add	sp, sp, 0x4
0xC42C | 0xF7FC        | 01039 | 	st	r6, sp, 0xfffc          // 1-byte Folded Spill
0xC42D | 0x03E8 0x005B | 01040 | 	mov	r0, 0x5b
0xC42F | 0x02BE        | 01041 | 	outp	r0, 0x3e
0xC430 | 0x0382        | 01042 | 	mov	r0, 0x2
0xC431 | 0x02C3        | 01043 | 	outp	r0, 0x43
0xC432 | 0x02C5        | 01044 | 	outp	r0, 0x45
0xC433 | 0x03E8 0xBB80 | 01045 | 	mov	r0, 0xbb80
0xC435 | 0x02C0        | 01046 | 	outp	r0, 0x40
0xC436 | 0x0BE8 0x5DC0 | 01047 | 	mov	r1, 0x5dc0
0xC438 | 0x0AC2        | 01048 | 	outp	r1, 0x42
0xC439 | 0x02C4        | 01049 | 	outp	r0, 0x44
0xC43A | 0x1380        | 01050 | 	mov	r2, 0x0
0xC43B | 0x23E8 0x0040 | 01051 | 	mov	r4, 0x40
0xC43D | 0x3381        | 01052 | 	mov	r6, 0x1
0xC43E | 0x2B80        | 01053 | 	mov	r5, 0x0
0xC43F | 0x0380        | 01054 | 	mov	r0, 0x0
0xC440 | 0xC7FE        | 01055 | 	st	r0, sp, 0xfffe          // 1-byte Folded Spill
0xC441 | 0x0380        | 01056 | 	mov	r0, 0x0
0xC442 | 0x0102        | 01057 | 	bra	BB14_1
0xC443 |               | 01058 | BB14_13:                                //   in Loop: Header=BB14_1 Depth=1
0xC443 | 0x0AA6        | 01059 | 	outp	r1, 0x26
0xC444 | 0x97FD        | 01060 | 	ld	r2, sp, 0xfffd          // 1-byte Folded Reload
0xC445 |               | 01061 | BB14_1:                                 // %_Z14heating_actionj.exit
       |               | 01062 |                                         // =>This Inner Loop Header: Depth=1
0xC445 | 0x0A3E        | 01063 | 	inp	r1, 0x3e
0xC446 | 0x1A43        | 01064 | 	inp	r3, 0x43
0xC447 | 0x0D8B        | 01065 | 	ior	r1, r3, r1
0xC448 | 0x4900        | 01066 | 	sub	r1, r1, 0x0
0xC449 | 0x3812        | 01067 | 	bc	GT, BB14_2
       |               | 01068 | // BB#3:                                //   in Loop: Header=BB14_1 Depth=1
0xC44A | 0x2287        | 01069 | 	outp	r4, 0x7
0xC44B | 0x3287        | 01070 | 	outp	r6, 0x7
0xC44C | 0x0BEA 0xCC9B | 01071 | 	ld	r1, sxc_target_temp_index
0xC44E | 0x0BF1 0xCC9D | 01072 | 	ld	r1, r1,sxc_selected_profile
0xC450 | 0x1BEA 0xCC94 | 01073 | 	ld	r3, sxc_current_temp
0xC452 | 0x3359        | 01074 | 	sub	r6, r1, r3
0xC453 | 0x232E        | 01075 | 	add	r4, r6, r5
0xC454 | 0x0BC4 0xFF38 | 01076 | 	sub	r1, r4, 0xc8
0xC456 | 0x1807        | 01077 | 	bc	LE, BB14_5
       |               | 01078 | // BB#4:                                //   in Loop: Header=BB14_1 Depth=1
0xC457 | 0x2BE8 0x00C8 | 01079 | 	mov	r5, 0xc8
0xC459 | 0x1BE8 0x0190 | 01080 | 	mov	r3, 0x190
0xC45B | 0x0110        | 01081 | 	bra	BB14_6
0xC45C |               | 01082 | BB14_2:                                 //   in Loop: Header=BB14_1 Depth=1
0xC45C | 0xD7FD        | 01083 | 	st	r2, sp, 0xfffd          // 1-byte Folded Spill
0xC45D | 0x0160        | 01084 | 	bra	BB14_11
0xC45E |               | 01085 | BB14_5:                                 //   in Loop: Header=BB14_1 Depth=1
0xC45E | 0x1EFC        | 01086 | 	and	r3, r4, 0x7fff
0xC45F | 0x2E0B        | 01087 | 	rol	r5, r3, 0x1
0xC460 | 0x1BE8 0xFE70 | 01088 | 	mov	r3, 0xfe70
0xC462 | 0x0BC4 0x00C8 | 01089 | 	sub	r1, r4, 0xff38
0xC464 | 0x1401        | 01090 | 	bc	LT, @ + 1 + 0x1
0xC465 | 0x5D00        | 01091 | 	mov	r3, r5 //Select--False
0xC466 | 0x2BE8 0xFF38 | 01092 | 	mov	r5, 0xff38
0xC468 | 0x0BC4 0x00C8 | 01093 | 	sub	r1, r4, 0xff38
0xC46A | 0x1401        | 01094 | 	bc	LT, @ + 1 + 0x1
0xC46B | 0x6C00        | 01095 | 	mov	r5, r4 //Select--False
0xC46C |               | 01096 | BB14_6:                                 //   in Loop: Header=BB14_1 Depth=1
0xC46C | 0xF7FD        | 01097 | 	st	r6, sp, 0xfffd          // 1-byte Folded Spill
0xC46D | 0x0B56        | 01098 | 	sub	r1, r6, r2
0xC46E | 0x0E11        | 01099 | 	rol	r1, r1, 0x2
0xC46F | 0x0BC9 0xFFFC | 01100 | 	and	r1, r1, 0xfffc
0xC471 | 0x1611        | 01101 | 	rol	r2, r1, 0x2
0xC472 | 0x13CA 0xFFFC | 01102 | 	and	r2, r2, 0xfffc
0xC474 | 0x0B11        | 01103 | 	add	r1, r1, r2
0xC475 | 0x160A        | 01104 | 	rol	r2, r2, 0x1
0xC476 | 0x1682        | 01105 | 	and	r2, r2, 0xfffe
0xC477 | 0x0B11        | 01106 | 	add	r1, r1, r2
0xC478 | 0x160A        | 01107 | 	rol	r2, r2, 0x1
0xC479 | 0x1682        | 01108 | 	and	r2, r2, 0xfffe
0xC47A | 0x0B11        | 01109 | 	add	r1, r1, r2
0xC47B | 0x160A        | 01110 | 	rol	r2, r2, 0x1
0xC47C | 0x1682        | 01111 | 	and	r2, r2, 0xfffe
0xC47D | 0x0B11        | 01112 | 	add	r1, r1, r2
0xC47E | 0x160A        | 01113 | 	rol	r2, r2, 0x1
0xC47F | 0x1682        | 01114 | 	and	r2, r2, 0xfffe
0xC480 | 0x0B11        | 01115 | 	add	r1, r1, r2
0xC481 | 0x161E        | 01116 | 	rol	r2, r6, 0x3
0xC482 | 0x13CA 0xFFF8 | 01117 | 	and	r2, r2, 0xfff8
0xC484 | 0x260A        | 01118 | 	rol	r4, r2, 0x1
0xC485 | 0x2684        | 01119 | 	and	r4, r4, 0xfffe
0xC486 | 0x1322        | 01120 | 	add	r2, r2, r4
0xC487 | 0x260C        | 01121 | 	rol	r4, r4, 0x1
0xC488 | 0x2684        | 01122 | 	and	r4, r4, 0xfffe
0xC489 | 0x1322        | 01123 | 	add	r2, r2, r4
0xC48A | 0x260C        | 01124 | 	rol	r4, r4, 0x1
0xC48B | 0x2684        | 01125 | 	and	r4, r4, 0xfffe
0xC48C | 0x1322        | 01126 | 	add	r2, r2, r4
0xC48D | 0x0B11        | 01127 | 	add	r1, r1, r2
0xC48E | 0x1319        | 01128 | 	add	r2, r1, r3
0xC48F | 0x0BE8 0x07D0 | 01129 | 	mov	r1, 0x7d0
0xC491 | 0xCFFE        | 01130 | 	st	r1, sp, 0xfffe          // 1-byte Folded Spill
0xC492 | 0x0BC2 0xF830 | 01131 | 	sub	r1, r2, 0x7d0
0xC494 | 0x3805        | 01132 | 	bc	GT, BB14_8
       |               | 01133 | // BB#7:                                //   in Loop: Header=BB14_1 Depth=1
0xC495 | 0x1B80        | 01134 | 	mov	r3, 0x0
0xC496 | 0x4A00        | 01135 | 	sub	r1, r2, 0x0
0xC497 | 0x1401        | 01136 | 	bc	LT, @ + 1 + 0x1
0xC498 | 0x5A00        | 01137 | 	mov	r3, r2 //Select--False
0xC499 | 0xDFFE        | 01138 | 	st	r3, sp, 0xfffe          // 1-byte Folded Spill
0xC49A |               | 01139 | BB14_8:                                 // %_Z11pid_computeP3Pidjj.exit
       |               | 01140 |                                         //   in Loop: Header=BB14_1 Depth=1
0xC49A | 0xEFFF        | 01141 | 	st	r5, sp, 0xffff          // 1-byte Folded Spill
0xC49B | 0x0B81        | 01142 | 	mov	r1, 0x1
0xC49C | 0x0A86        | 01143 | 	outp	r1, 0x6
0xC49D | 0x4001        | 01144 | 	add	r0, r0, 0x1
0xC49E | 0x48FE        | 01145 | 	sub	r1, r0, 0x2
0xC49F | 0x2819        | 01146 | 	bc	NE, BB14_10
       |               | 01147 | // BB#9:                                //   in Loop: Header=BB14_1 Depth=1
0xC4A0 | 0x03EA 0xCC9B | 01148 | 	ld	r0, sxc_target_temp_index
0xC4A2 | 0x4001        | 01149 | 	add	r0, r0, 0x1
0xC4A3 | 0x03EB 0xCC9B | 01150 | 	st	r0, sxc_target_temp_index
0xC4A5 | 0x03EA 0xCC9B | 01151 | 	ld	r0, sxc_target_temp_index
0xC4A7 | 0x0610        | 01152 | 	rol	r0, r0, 0x2
0xC4A8 | 0x03C8 0xFFFC | 01153 | 	and	r0, r0, 0xfffc
0xC4AA | 0x0E18        | 01154 | 	rol	r1, r0, 0x3
0xC4AB | 0x0BC9 0xFFF8 | 01155 | 	and	r1, r1, 0xfff8
0xC4AD | 0x0308        | 01156 | 	add	r0, r0, r1
0xC4AE | 0x0E09        | 01157 | 	rol	r1, r1, 0x1
0xC4AF | 0x0E81        | 01158 | 	and	r1, r1, 0xfffe
0xC4B0 | 0x0308        | 01159 | 	add	r0, r0, r1
0xC4B1 | 0x5064        | 01160 | 	add	r2, r0, 0x64
0xC4B2 | 0x1BE8 0x00B4 | 01161 | 	mov	r3, 0xb4
0xC4B4 | 0x33EC 0xC7AA | 01162 | 	jsr	r6, sxc___xinc_udiv
0xC4B6 | 0x03EB 0xCC9C | 01163 | 	st	r0, sxc_progress
0xC4B8 | 0x0380        | 01164 | 	mov	r0, 0x0
0xC4B9 |               | 01165 | BB14_10:                                //   in Loop: Header=BB14_1 Depth=1
0xC4B9 | 0x23E8 0x0040 | 01166 | 	mov	r4, 0x40
0xC4BB | 0x2286        | 01167 | 	outp	r4, 0x6
0xC4BC | 0x3381        | 01168 | 	mov	r6, 0x1
0xC4BD | 0xAFFF        | 01169 | 	ld	r5, sp, 0xffff          // 1-byte Folded Reload
0xC4BE |               | 01170 | BB14_11:                                //   in Loop: Header=BB14_1 Depth=1
0xC4BE | 0x8FFE        | 01171 | 	ld	r1, sp, 0xfffe          // 1-byte Folded Reload
0xC4BF | 0x0E19        | 01172 | 	rol	r1, r1, 0x3
0xC4C0 | 0x0BC9 0xFFF8 | 01173 | 	and	r1, r1, 0xfff8
0xC4C2 | 0x1609        | 01174 | 	rol	r2, r1, 0x1
0xC4C3 | 0x1682        | 01175 | 	and	r2, r2, 0xfffe
0xC4C4 | 0x0B11        | 01176 | 	add	r1, r1, r2
0xC4C5 | 0x1A3F        | 01177 | 	inp	r3, 0x3f
0xC4C6 | 0x1226        | 01178 | 	inp	r2, 0x26
0xC4C7 | 0x0B59        | 01179 | 	sub	r1, r1, r3
0xC4C8 | 0x2004        | 01180 | 	bc	UGE, BB14_12
       |               | 01181 | // BB#14:                               //   in Loop: Header=BB14_1 Depth=1
0xC4C9 | 0x0BCA 0xFF9F | 01182 | 	and	r1, r2, 0xff9f
0xC4CB | 0x0100 0xFF76 | 01183 | 	bra	BB14_13
0xC4CD |               | 01184 | BB14_12:                                //   in Loop: Header=BB14_1 Depth=1
0xC4CD | 0x0BD2 0x0060 | 01185 | 	ior	r1, r2, 0x60
0xC4CF | 0x0100 0xFF72 | 01186 | 	bra	BB14_13
       |               | 01187 | 
       |               | 01188 | //align
       |               | 01189 | @ = (@ + 1-1)  & -1
0xC4D1 |               | 01190 | sxc__Z14HumidityThreadPv:               // @_Z14HumidityThreadPv
       |               | 01191 | // BB#0:
0xC4D1 | 0x03E8 0x005B | 01192 | 	mov	r0, 0x5b
0xC4D3 | 0x02C8        | 01193 | 	outp	r0, 0x48
0xC4D4 | 0x03E8 0x00C7 | 01194 | 	mov	r0, 0xc7
0xC4D6 | 0x02CA        | 01195 | 	outp	r0, 0x4a
0xC4D7 | 0x0380        | 01196 | 	mov	r0, 0x0
0xC4D8 | 0x0102        | 01197 | 	bra	BB15_1
0xC4D9 |               | 01198 | BB15_7:                                 // %_Z12get_humidityj.exit.outer.backedge
       |               | 01199 |                                         //   in Loop: Header=BB15_1 Depth=1
0xC4D9 | 0x0380        | 01200 | 	mov	r0, 0x0
0xC4DA | 0x0A49        | 01201 | 	inp	r1, 0x49
0xC4DB |               | 01202 | BB15_1:                                 // %_Z12get_humidityj.exit.outer
       |               | 01203 |                                         // =>This Loop Header: Depth=1
       |               | 01204 |                                         //     Child Loop BB15_3 Depth 2
       |               | 01205 |                                         //     Child Loop BB15_6 Depth 2
0xC4DB | 0x48FF        | 01206 | 	sub	r1, r0, 0x1
0xC4DC | 0x2804        | 01207 | 	bc	NE, BB15_2
0xC4DD |               | 01208 | BB15_6:                                 //   Parent Loop BB15_1 Depth=1
       |               | 01209 |                                         // =>  This Inner Loop Header: Depth=2
0xC4DD | 0x0226        | 01210 | 	inp	r0, 0x26
0xC4DE | 0x0698        | 01211 | 	bic	r0, r0, 0x3
       |               | 01212 | 	//cmp	r0, 0x0
0xC4DF | 0x04FD        | 01213 | 	bc	VS, BB15_6
0xC4E0 | 0x01F8        | 01214 | 	bra	BB15_7
0xC4E1 |               | 01215 | BB15_2:                                 // %_Z12get_humidityj.exit.outer
       |               | 01216 |                                         //   in Loop: Header=BB15_1 Depth=1
0xC4E1 | 0x4800        | 01217 | 	sub	r1, r0, 0x0
0xC4E2 | 0x2809        | 01218 | 	bc	NE, BB15_5
0xC4E3 |               | 01219 | BB15_3:                                 // %_Z12get_humidityj.exit.us
       |               | 01220 |                                         //   Parent Loop BB15_1 Depth=1
       |               | 01221 |                                         // =>  This Inner Loop Header: Depth=2
0xC4E3 | 0x0226        | 01222 | 	inp	r0, 0x26
0xC4E4 | 0x03C8 0xFFF8 | 01223 | 	and	r0, r0, 0xfff8
0xC4E6 | 0x0668        | 01224 | 	rol	r0, r0, 0xd
0xC4E7 | 0x03C8 0x0001 | 01225 | 	and	r0, r0, 0x1
       |               | 01226 | 	//cmp	r0, 0x0
0xC4E9 | 0x08F9        | 01227 | 	bc	ZS, BB15_3
       |               | 01228 | // BB#4:                                // %.us-lcssa.us
       |               | 01229 |                                         //   in Loop: Header=BB15_1 Depth=1
0xC4EA | 0x0A49        | 01230 | 	inp	r1, 0x49
0xC4EB | 0x01EF        | 01231 | 	bra	BB15_1
0xC4EC |               | 01232 | BB15_5:                                 // =>This Inner Loop Header: Depth=1
0xC4EC | 0x0226        | 01233 | 	inp	r0, 0x26
0xC4ED | 0x01FE        | 01234 | 	bra	BB15_5
       |               | 01235 | 
       |               | 01236 | //align
       |               | 01237 | @ = (@ + 1-1)  & -1
0xC4EE |               | 01238 | sxc__Z15stateOLEDThreadPv:              // @_Z15stateOLEDThreadPv
       |               | 01239 | // BB#0:
0xC4EE | 0x3BC7 0x00D7 | 01240 | 	add	sp, sp, 0xd7
0xC4F0 | 0x33FF 0xFF29 | 01241 | 	st	r6, sp, 0xff29          // 1-byte Folded Spill
0xC4F2 | 0x0220        | 01242 | 	inp	r0, 0x20
0xC4F3 | 0x0680        | 01243 | 	and	r0, r0, 0xfffe
0xC4F4 | 0x02A0        | 01244 | 	outp	r0, 0x20
0xC4F5 | 0x1382        | 01245 | 	mov	r2, 0x2
0xC4F6 | 0x33EC 0xC01F | 01246 | 	jsr	r6, sxc__Z7wait_msj
0xC4F8 | 0x0220        | 01247 | 	inp	r0, 0x20
0xC4F9 | 0x0700        | 01248 | 	ior	r0, r0, 0x1
0xC4FA | 0x02A0        | 01249 | 	outp	r0, 0x20
0xC4FB | 0x1382        | 01250 | 	mov	r2, 0x2
0xC4FC | 0x33EC 0xC01F | 01251 | 	jsr	r6, sxc__Z7wait_msj
0xC4FE | 0x1384        | 01252 | 	mov	r2, 0x4
0xC4FF | 0x33EC 0xC059 | 01253 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC501 | 0x1381        | 01254 | 	mov	r2, 0x1
0xC502 | 0x33EC 0xC065 | 01255 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC504 | 0x1381        | 01256 | 	mov	r2, 0x1
0xC505 | 0x33EC 0xC01F | 01257 | 	jsr	r6, sxc__Z7wait_msj
0xC507 | 0x1384        | 01258 | 	mov	r2, 0x4
0xC508 | 0x33EC 0xC059 | 01259 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC50A | 0x1380        | 01260 | 	mov	r2, 0x0
0xC50B | 0x33EC 0xC065 | 01261 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC50D | 0x1381        | 01262 | 	mov	r2, 0x1
0xC50E | 0x33EC 0xC01F | 01263 | 	jsr	r6, sxc__Z7wait_msj
0xC510 | 0x1386        | 01264 | 	mov	r2, 0x6
0xC511 | 0x33EC 0xC059 | 01265 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC513 | 0x1380        | 01266 | 	mov	r2, 0x0
0xC514 | 0x33EC 0xC065 | 01267 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC516 | 0x1381        | 01268 | 	mov	r2, 0x1
0xC517 | 0x33EC 0xC01F | 01269 | 	jsr	r6, sxc__Z7wait_msj
0xC519 | 0x1382        | 01270 | 	mov	r2, 0x2
0xC51A | 0x33EC 0xC059 | 01271 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC51C | 0x1381        | 01272 | 	mov	r2, 0x1
0xC51D | 0x33EC 0xC065 | 01273 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC51F | 0x1383        | 01274 | 	mov	r2, 0x3
0xC520 | 0x33EC 0xC059 | 01275 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC522 | 0x13E8 0x0030 | 01276 | 	mov	r2, 0x30
0xC524 | 0x33EC 0xC065 | 01277 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC526 | 0x13E8 0x0028 | 01278 | 	mov	r2, 0x28
0xC528 | 0x33EC 0xC059 | 01279 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC52A | 0x13E8 0x007F | 01280 | 	mov	r2, 0x7f
0xC52C | 0x33EC 0xC065 | 01281 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC52E | 0x13E8 0x0029 | 01282 | 	mov	r2, 0x29
0xC530 | 0x33EC 0xC059 | 01283 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC532 | 0x1380        | 01284 | 	mov	r2, 0x0
0xC533 | 0x33EC 0xC065 | 01285 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC535 | 0x1394        | 01286 | 	mov	r2, 0x14
0xC536 | 0x33EC 0xC059 | 01287 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC538 | 0x13E8 0x0031 | 01288 | 	mov	r2, 0x31
0xC53A | 0x33EC 0xC065 | 01289 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC53C | 0x1396        | 01290 | 	mov	r2, 0x16
0xC53D | 0x33EC 0xC059 | 01291 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC53F | 0x13E8 0x0066 | 01292 | 	mov	r2, 0x66
0xC541 | 0x33EC 0xC065 | 01293 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC543 | 0x1390        | 01294 | 	mov	r2, 0x10
0xC544 | 0x33EC 0xC059 | 01295 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC546 | 0x13E8 0x0045 | 01296 | 	mov	r2, 0x45
0xC548 | 0x33EC 0xC065 | 01297 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC54A | 0x1391        | 01298 | 	mov	r2, 0x11
0xC54B | 0x33EC 0xC059 | 01299 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC54D | 0x13E8 0x0034 | 01300 | 	mov	r2, 0x34
0xC54F | 0x33EC 0xC065 | 01301 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC551 | 0x1392        | 01302 | 	mov	r2, 0x12
0xC552 | 0x33EC 0xC059 | 01303 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC554 | 0x13E8 0x0033 | 01304 | 	mov	r2, 0x33
0xC556 | 0x33EC 0xC065 | 01305 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC558 | 0x1388        | 01306 | 	mov	r2, 0x8
0xC559 | 0x33EC 0xC059 | 01307 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC55B | 0x1384        | 01308 | 	mov	r2, 0x4
0xC55C | 0x33EC 0xC065 | 01309 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC55E | 0x1389        | 01310 | 	mov	r2, 0x9
0xC55F | 0x33EC 0xC059 | 01311 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC561 | 0x1385        | 01312 | 	mov	r2, 0x5
0xC562 | 0x33EC 0xC065 | 01313 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC564 | 0x138A        | 01314 | 	mov	r2, 0xa
0xC565 | 0x33EC 0xC059 | 01315 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC567 | 0x1385        | 01316 | 	mov	r2, 0x5
0xC568 | 0x33EC 0xC065 | 01317 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC56A | 0x138B        | 01318 | 	mov	r2, 0xb
0xC56B | 0x33EC 0xC059 | 01319 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC56D | 0x13E8 0x009D | 01320 | 	mov	r2, 0x9d
0xC56F | 0x33EC 0xC065 | 01321 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC571 | 0x138C        | 01322 | 	mov	r2, 0xc
0xC572 | 0x33EC 0xC059 | 01323 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC574 | 0x13E8 0x008C | 01324 | 	mov	r2, 0x8c
0xC576 | 0x33EC 0xC065 | 01325 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC578 | 0x138D        | 01326 | 	mov	r2, 0xd
0xC579 | 0x33EC 0xC059 | 01327 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC57B | 0x13E8 0x0057 | 01328 | 	mov	r2, 0x57
0xC57D | 0x33EC 0xC065 | 01329 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC57F | 0x13E8 0x0080 | 01330 | 	mov	r2, 0x80
0xC581 | 0x33EC 0xC059 | 01331 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC583 | 0x1380        | 01332 | 	mov	r2, 0x0
0xC584 | 0x33EC 0xC065 | 01333 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC586 | 0x1393        | 01334 | 	mov	r2, 0x13
0xC587 | 0x33EC 0xC059 | 01335 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC589 | 0x13E8 0x00A0 | 01336 | 	mov	r2, 0xa0
0xC58B | 0x33EC 0xC065 | 01337 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC58D | 0x1397        | 01338 | 	mov	r2, 0x17
0xC58E | 0x33EC 0xC059 | 01339 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC590 | 0x1380        | 01340 | 	mov	r2, 0x0
0xC591 | 0x33EC 0xC065 | 01341 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC593 | 0x1398        | 01342 | 	mov	r2, 0x18
0xC594 | 0x33EC 0xC059 | 01343 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC596 | 0x13E8 0x009F | 01344 | 	mov	r2, 0x9f
0xC598 | 0x33EC 0xC065 | 01345 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC59A | 0x1399        | 01346 | 	mov	r2, 0x19
0xC59B | 0x33EC 0xC059 | 01347 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC59D | 0x1380        | 01348 | 	mov	r2, 0x0
0xC59E | 0x33EC 0xC065 | 01349 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC5A0 | 0x139A        | 01350 | 	mov	r2, 0x1a
0xC5A1 | 0x33EC 0xC059 | 01351 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC5A3 | 0x13E8 0x007F | 01352 | 	mov	r2, 0x7f
0xC5A5 | 0x33EC 0xC065 | 01353 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC5A7 | 0x1386        | 01354 | 	mov	r2, 0x6
0xC5A8 | 0x33EC 0xC059 | 01355 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC5AA | 0x1381        | 01356 | 	mov	r2, 0x1
0xC5AB | 0x33EC 0xC065 | 01357 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC5AD | 0x1380        | 01358 | 	mov	r2, 0x0
0xC5AE | 0x1B80        | 01359 | 	mov	r3, 0x0
0xC5AF | 0x33EC 0xC0A1 | 01360 | 	jsr	r6, sxc__Z25OLED_FillScreen_160128RGBm
0xC5B1 | 0x0117        | 01361 | 	bra	BB16_1
0xC5B2 |               | 01362 | BB16_21:                                // %.split12
       |               | 01363 |                                         //   in Loop: Header=BB16_1 Depth=1
0xC5B2 | 0x13C7 0xFF3C | 01364 | 	add	r2, sp, 0xff3c
0xC5B4 | 0xD7FA        | 01365 | 	st	r2, sp, 0xfffa          // 1-byte Folded Spill
0xC5B5 | 0x1BE8 0xCC22 | 01366 | 	mov	r3, sxc__ZZ17OLED_end_progressvE4text
0xC5B7 | 0x2389        | 01367 | 	mov	r4, 0x9
0xC5B8 | 0x33EC 0xC7C7 | 01368 | 	jsr	r6, sxc_memcpy
0xC5BA | 0x139F        | 01369 | 	mov	r2, 0x1f
0xC5BB | 0x1B80        | 01370 | 	mov	r3, 0x0
0xC5BC | 0x33EC 0xC0A1 | 01371 | 	jsr	r6, sxc__Z25OLED_FillScreen_160128RGBm
0xC5BE | 0x1385        | 01372 | 	mov	r2, 0x5
0xC5BF | 0x1BE8 0x0064 | 01373 | 	mov	r3, 0x64
0xC5C1 | 0xA7FA        | 01374 | 	ld	r4, sp, 0xfffa          // 1-byte Folded Reload
0xC5C2 | 0x2B89        | 01375 | 	mov	r5, 0x9
0xC5C3 | 0x33EC 0xC171 | 01376 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC5C5 | 0x13E8 0x07D0 | 01377 | 	mov	r2, 0x7d0
0xC5C7 | 0x33EC 0xC01F | 01378 | 	jsr	r6, sxc__Z7wait_msj
0xC5C9 |               | 01379 | BB16_1:                                 // =>This Loop Header: Depth=1
       |               | 01380 |                                         //     Child Loop BB16_2 Depth 2
       |               | 01381 |                                         //       Child Loop BB16_19 Depth 3
       |               | 01382 |                                         //       Child Loop BB16_14 Depth 3
0xC5C9 | 0x1380        | 01383 | 	mov	r2, 0x0
0xC5CA | 0x0124        | 01384 | 	bra	BB16_2
0xC5CB |               | 01385 | BB16_20:                                // %._crit_edge
       |               | 01386 |                                         //   in Loop: Header=BB16_2 Depth=2
0xC5CB | 0x1A87        | 01387 | 	outp	r3, 0x7
0xC5CC | 0x0380        | 01388 | 	mov	r0, 0x0
0xC5CD | 0x03EB 0xCC9C | 01389 | 	st	r0, sxc_progress
0xC5CF | 0x1A86        | 01390 | 	outp	r3, 0x6
0xC5D0 | 0x0BE8 0x8000 | 01391 | 	mov	r1, 0x8000
0xC5D2 | 0x0A87        | 01392 | 	outp	r1, 0x7
0xC5D3 | 0x03EA 0xCA08 | 01393 | 	ld	r0, thrds_vector
0xC5D5 | 0x0718        | 01394 | 	ior	r0, r0, 0x8
0xC5D6 | 0x03EB 0xCA08 | 01395 | 	st	r0, thrds_vector
0xC5D8 | 0x0284        | 01396 | 	outp	r0, 0x4
0xC5D9 | 0x0A86        | 01397 | 	outp	r1, 0x6
0xC5DA | 0x0A87        | 01398 | 	outp	r1, 0x7
0xC5DB | 0x03EA 0xCA08 | 01399 | 	ld	r0, thrds_vector
0xC5DD | 0x0720        | 01400 | 	ior	r0, r0, 0x10
0xC5DE | 0x03EB 0xCA08 | 01401 | 	st	r0, thrds_vector
0xC5E0 | 0x0284        | 01402 | 	outp	r0, 0x4
0xC5E1 | 0x0A86        | 01403 | 	outp	r1, 0x6
0xC5E2 | 0x0A87        | 01404 | 	outp	r1, 0x7
0xC5E3 | 0x03EA 0xCA08 | 01405 | 	ld	r0, thrds_vector
0xC5E5 | 0x0728        | 01406 | 	ior	r0, r0, 0x20
0xC5E6 | 0x03EB 0xCA08 | 01407 | 	st	r0, thrds_vector
0xC5E8 | 0x0284        | 01408 | 	outp	r0, 0x4
0xC5E9 | 0x0A86        | 01409 | 	outp	r1, 0x6
0xC5EA | 0x0226        | 01410 | 	inp	r0, 0x26
0xC5EB | 0x03C8 0xFF9F | 01411 | 	and	r0, r0, 0xff9f
0xC5ED | 0x02A6        | 01412 | 	outp	r0, 0x26
0xC5EE | 0x1384        | 01413 | 	mov	r2, 0x4
0xC5EF |               | 01414 | BB16_2:                                 // %.outer
       |               | 01415 |                                         //   Parent Loop BB16_1 Depth=1
       |               | 01416 |                                         // =>  This Loop Header: Depth=2
       |               | 01417 |                                         //       Child Loop BB16_19 Depth 3
       |               | 01418 |                                         //       Child Loop BB16_14 Depth 3
0xC5EF | 0x0384        | 01419 | 	mov	r0, 0x4
0xC5F0 | 0x0B42        | 01420 | 	sub	r1, r2, r0
0xC5F1 | 0x3000 0x013C | 01421 | 	bc	UGT, BB16_22
       |               | 01422 | // BB#3:                                // %.outer
       |               | 01423 |                                         //   in Loop: Header=BB16_2 Depth=2
0xC5F3 | 0x0BF2 0xCA17 | 01424 | 	ld	r1, r2,JTI16_0
0xC5F5 | 0x0BE1        | 01425 | 	jsr	r1, r1
0xC5F6 |               | 01426 | BB16_4:                                 // %.split
       |               | 01427 |                                         //   in Loop: Header=BB16_2 Depth=2
0xC5F6 | 0x0390        | 01428 | 	mov	r0, 0x10
0xC5F7 | 0x0287        | 01429 | 	outp	r0, 0x7
0xC5F8 | 0x03EA 0xCC9A | 01430 | 	ld	r0, sxc_profile_index
0xC5FA | 0xC7FC        | 01431 | 	st	r0, sp, 0xfffc          // 1-byte Folded Spill
0xC5FB | 0x13C7 0xFF30 | 01432 | 	add	r2, sp, 0xff30
0xC5FD | 0xD7FA        | 01433 | 	st	r2, sp, 0xfffa          // 1-byte Folded Spill
0xC5FE | 0x1BE8 0xCC06 | 01434 | 	mov	r3, sxc__ZZ17OLED_profile_pagejE5text1
0xC600 | 0x238C        | 01435 | 	mov	r4, 0xc
0xC601 | 0x33EC 0xC7C7 | 01436 | 	jsr	r6, sxc_memcpy
0xC603 | 0x13C7 0xFF3C | 01437 | 	add	r2, sp, 0xff3c
0xC605 | 0xD7FB        | 01438 | 	st	r2, sp, 0xfffb          // 1-byte Folded Spill
0xC606 | 0x1BE8 0xCC12 | 01439 | 	mov	r3, sxc__ZZ17OLED_profile_pagejE5text2
0xC608 | 0x2389        | 01440 | 	mov	r4, 0x9
0xC609 | 0x33EC 0xC7C7 | 01441 | 	jsr	r6, sxc_memcpy
0xC60B | 0x87FC        | 01442 | 	ld	r0, sp, 0xfffc          // 1-byte Folded Reload
0xC60C | 0x4030        | 01443 | 	add	r0, r0, 0x30
0xC60D | 0x03FF 0xFF45 | 01444 | 	st	r0, sp, 0xff45
0xC60F | 0x1385        | 01445 | 	mov	r2, 0x5
0xC610 | 0x1BE8 0x0064 | 01446 | 	mov	r3, 0x64
0xC612 | 0xA7FA        | 01447 | 	ld	r4, sp, 0xfffa          // 1-byte Folded Reload
0xC613 | 0x2B8C        | 01448 | 	mov	r5, 0xc
0xC614 | 0x33EC 0xC171 | 01449 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC616 | 0x1385        | 01450 | 	mov	r2, 0x5
0xC617 | 0x1BE8 0x0032 | 01451 | 	mov	r3, 0x32
0xC619 | 0xA7FB        | 01452 | 	ld	r4, sp, 0xfffb          // 1-byte Folded Reload
0xC61A | 0x2B89        | 01453 | 	mov	r5, 0x9
0xC61B | 0x33EC 0xC171 | 01454 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC61D | 0x23C7 0xFF45 | 01455 | 	add	r4, sp, 0xff45
0xC61F | 0x13E8 0x0078 | 01456 | 	mov	r2, 0x78
0xC621 | 0x1BE8 0x0032 | 01457 | 	mov	r3, 0x32
0xC623 | 0x2B81        | 01458 | 	mov	r5, 0x1
0xC624 | 0x33EC 0xC171 | 01459 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC626 | 0x1B90        | 01460 | 	mov	r3, 0x10
0xC627 | 0x1A86        | 01461 | 	outp	r3, 0x6
0xC628 | 0x0388        | 01462 | 	mov	r0, 0x8
0xC629 | 0x0287        | 01463 | 	outp	r0, 0x7
0xC62A | 0x23E8 0xCC97 | 01464 | 	mov	r4, sxc_r_encoder
0xC62C | 0x8402        | 01465 | 	ld	r0, r4, 0x2
0xC62D | 0x48FF        | 01466 | 	sub	r1, r0, 0x1
0xC62E | 0x2800 0x00B8 | 01467 | 	bc	NE, BB16_8
       |               | 01468 | // BB#5:                                //   in Loop: Header=BB16_2 Depth=2
0xC630 | 0x1A87        | 01469 | 	outp	r3, 0x7
0xC631 | 0x03EA 0xCC9A | 01470 | 	ld	r0, sxc_profile_index
0xC633 | 0x4001        | 01471 | 	add	r0, r0, 0x1
0xC634 | 0x03EB 0xCC9A | 01472 | 	st	r0, sxc_profile_index
0xC636 | 0x03EA 0xCC9A | 01473 | 	ld	r0, sxc_profile_index
0xC638 | 0x0B84        | 01474 | 	mov	r1, 0x4
0xC639 | 0x1381        | 01475 | 	mov	r2, 0x1
0xC63A | 0x0B48        | 01476 | 	sub	r1, r0, r1
0xC63B | 0x0002        | 01477 | 	bc	ULT, BB16_7
       |               | 01478 | // BB#6:                                //   in Loop: Header=BB16_2 Depth=2
0xC63C | 0x13EB 0xCC9A | 01479 | 	st	r2, sxc_profile_index
0xC63E |               | 01480 | BB16_7:                                 //   in Loop: Header=BB16_2 Depth=2
0xC63E | 0x1A86        | 01481 | 	outp	r3, 0x6
0xC63F | 0x0380        | 01482 | 	mov	r0, 0x0
0xC640 | 0xC402        | 01483 | 	st	r0, r4, 0x2
0xC641 | 0x0100 0x00B7 | 01484 | 	bra	BB16_12
0xC643 |               | 01485 | BB16_18:                                // %.split9
       |               | 01486 |                                         //   in Loop: Header=BB16_2 Depth=2
0xC643 | 0x0381        | 01487 | 	mov	r0, 0x1
0xC644 | 0x0287        | 01488 | 	outp	r0, 0x7
0xC645 | 0x0382        | 01489 | 	mov	r0, 0x2
0xC646 | 0x0287        | 01490 | 	outp	r0, 0x7
0xC647 | 0x03E8 0x0040 | 01491 | 	mov	r0, 0x40
0xC649 | 0x0287        | 01492 | 	outp	r0, 0x7
0xC64A | 0x13EA 0xCC94 | 01493 | 	ld	r2, sxc_current_temp
0xC64C | 0x1BEA 0xCC95 | 01494 | 	ld	r3, sxc_humidity
0xC64E | 0x23EA 0xCC9C | 01495 | 	ld	r4, sxc_progress
0xC650 | 0x33EC 0xC1E4 | 01496 | 	jsr	r6, sxc__Z14OLED_main_pagejjj
0xC652 | 0x1BE8 0x0040 | 01497 | 	mov	r3, 0x40
0xC654 | 0x1382        | 01498 | 	mov	r2, 0x2
0xC655 | 0x1A86        | 01499 | 	outp	r3, 0x6
0xC656 | 0x1286        | 01500 | 	outp	r2, 0x6
0xC657 | 0x0381        | 01501 | 	mov	r0, 0x1
0xC658 | 0x0286        | 01502 | 	outp	r0, 0x6
0xC659 | 0x0BE8 0x8000 | 01503 | 	mov	r1, 0x8000
0xC65B | 0x0A87        | 01504 | 	outp	r1, 0x7
0xC65C | 0x03EA 0xCA08 | 01505 | 	ld	r0, thrds_vector
0xC65E | 0x0698        | 01506 | 	and	r0, r0, 0xfff7
0xC65F | 0x03EB 0xCA08 | 01507 | 	st	r0, thrds_vector
0xC661 | 0x0284        | 01508 | 	outp	r0, 0x4
0xC662 | 0x0A86        | 01509 | 	outp	r1, 0x6
0xC663 | 0x0A87        | 01510 | 	outp	r1, 0x7
0xC664 | 0x03EA 0xCA08 | 01511 | 	ld	r0, thrds_vector
0xC666 | 0x06A0        | 01512 | 	and	r0, r0, 0xffef
0xC667 | 0x03EB 0xCA08 | 01513 | 	st	r0, thrds_vector
0xC669 | 0x0284        | 01514 | 	outp	r0, 0x4
0xC66A | 0x0A86        | 01515 | 	outp	r1, 0x6
0xC66B | 0x0A87        | 01516 | 	outp	r1, 0x7
0xC66C | 0x03EA 0xCA08 | 01517 | 	ld	r0, thrds_vector
0xC66E | 0x06A8        | 01518 | 	and	r0, r0, 0xffdf
0xC66F | 0x03EB 0xCA08 | 01519 | 	st	r0, thrds_vector
0xC671 | 0x0284        | 01520 | 	outp	r0, 0x4
0xC672 | 0x0A86        | 01521 | 	outp	r1, 0x6
0xC673 | 0x03EA 0xCC9C | 01522 | 	ld	r0, sxc_progress
0xC675 | 0x0BE8 0x0064 | 01523 | 	mov	r1, 0x64
0xC677 | 0x0B48        | 01524 | 	sub	r1, r0, r1
0xC678 | 0x3000 0xFF51 | 01525 | 	bc	UGT, BB16_20
0xC67A |               | 01526 | BB16_19:                                // %.lr.ph
       |               | 01527 |                                         //   Parent Loop BB16_1 Depth=1
       |               | 01528 |                                         //     Parent Loop BB16_2 Depth=2
       |               | 01529 |                                         // =>    This Inner Loop Header: Depth=3
0xC67A | 0x0381        | 01530 | 	mov	r0, 0x1
0xC67B | 0x0287        | 01531 | 	outp	r0, 0x7
0xC67C | 0x1287        | 01532 | 	outp	r2, 0x7
0xC67D | 0x1A87        | 01533 | 	outp	r3, 0x7
0xC67E | 0x13EA 0xCC94 | 01534 | 	ld	r2, sxc_current_temp
0xC680 | 0x1BEA 0xCC95 | 01535 | 	ld	r3, sxc_humidity
0xC682 | 0x23EA 0xCC9C | 01536 | 	ld	r4, sxc_progress
0xC684 | 0x33EC 0xC1E4 | 01537 | 	jsr	r6, sxc__Z14OLED_main_pagejjj
0xC686 | 0x1BE8 0x0040 | 01538 | 	mov	r3, 0x40
0xC688 | 0x1382        | 01539 | 	mov	r2, 0x2
0xC689 | 0x1A86        | 01540 | 	outp	r3, 0x6
0xC68A | 0x1286        | 01541 | 	outp	r2, 0x6
0xC68B | 0x0381        | 01542 | 	mov	r0, 0x1
0xC68C | 0x0286        | 01543 | 	outp	r0, 0x6
0xC68D | 0x03EA 0xCC9C | 01544 | 	ld	r0, sxc_progress
0xC68F | 0x0BE8 0x0065 | 01545 | 	mov	r1, 0x65
0xC691 | 0x0B48        | 01546 | 	sub	r1, r0, r1
0xC692 | 0x00E7        | 01547 | 	bc	ULT, BB16_19
0xC693 | 0x0100 0xFF36 | 01548 | 	bra	BB16_20
0xC695 |               | 01549 | BB16_17:                                // %.split6
       |               | 01550 |                                         //   in Loop: Header=BB16_2 Depth=2
0xC695 | 0x0BE8 0xCC1B | 01551 | 	mov	r1, sxc__ZZ18OLED_starting_pagevE5text1
0xC697 | 0x8106        | 01552 | 	ld	r0, r1, 0x6
0xC698 | 0x03FF 0xFF42 | 01553 | 	st	r0, sp, 0xff42
0xC69A | 0x8105        | 01554 | 	ld	r0, r1, 0x5
0xC69B | 0x03FF 0xFF41 | 01555 | 	st	r0, sp, 0xff41
0xC69D | 0x8104        | 01556 | 	ld	r0, r1, 0x4
0xC69E | 0x03FF 0xFF40 | 01557 | 	st	r0, sp, 0xff40
0xC6A0 | 0x8103        | 01558 | 	ld	r0, r1, 0x3
0xC6A1 | 0x03FF 0xFF3F | 01559 | 	st	r0, sp, 0xff3f
0xC6A3 | 0x8102        | 01560 | 	ld	r0, r1, 0x2
0xC6A4 | 0x03FF 0xFF3E | 01561 | 	st	r0, sp, 0xff3e
0xC6A6 | 0x8101        | 01562 | 	ld	r0, r1, 0x1
0xC6A7 | 0x03FF 0xFF3D | 01563 | 	st	r0, sp, 0xff3d
0xC6A9 | 0x03EA 0xCC1B | 01564 | 	ld	r0, sxc__ZZ18OLED_starting_pagevE5text1
0xC6AB | 0x03FF 0xFF3C | 01565 | 	st	r0, sp, 0xff3c
0xC6AD | 0x03E8 0x006E | 01566 | 	mov	r0, 0x6e
0xC6AF | 0x03FF 0xFF37 | 01567 | 	st	r0, sp, 0xff37
0xC6B1 | 0x03E8 0x0069 | 01568 | 	mov	r0, 0x69
0xC6B3 | 0x03FF 0xFF36 | 01569 | 	st	r0, sp, 0xff36
0xC6B5 | 0x03E8 0x0067 | 01570 | 	mov	r0, 0x67
0xC6B7 | 0x03FF 0xFF35 | 01571 | 	st	r0, sp, 0xff35
0xC6B9 | 0x03E8 0x0065 | 01572 | 	mov	r0, 0x65
0xC6BB | 0x03FF 0xFF34 | 01573 | 	st	r0, sp, 0xff34
0xC6BD | 0x03E8 0x0062 | 01574 | 	mov	r0, 0x62
0xC6BF | 0x03FF 0xFF33 | 01575 | 	st	r0, sp, 0xff33
0xC6C1 | 0x03E8 0x0020 | 01576 | 	mov	r0, 0x20
0xC6C3 | 0x03FF 0xFF32 | 01577 | 	st	r0, sp, 0xff32
0xC6C5 | 0x03E8 0x006F | 01578 | 	mov	r0, 0x6f
0xC6C7 | 0x03FF 0xFF31 | 01579 | 	st	r0, sp, 0xff31
0xC6C9 | 0x03E8 0x0074 | 01580 | 	mov	r0, 0x74
0xC6CB | 0x03FF 0xFF30 | 01581 | 	st	r0, sp, 0xff30
0xC6CD | 0x23C7 0xFF3C | 01582 | 	add	r4, sp, 0xff3c
0xC6CF | 0x1385        | 01583 | 	mov	r2, 0x5
0xC6D0 | 0x1BE8 0x0064 | 01584 | 	mov	r3, 0x64
0xC6D2 | 0x2B87        | 01585 | 	mov	r5, 0x7
0xC6D3 | 0x33EC 0xC171 | 01586 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC6D5 | 0x23C7 0xFF30 | 01587 | 	add	r4, sp, 0xff30
0xC6D7 | 0x1385        | 01588 | 	mov	r2, 0x5
0xC6D8 | 0x1BE8 0x0032 | 01589 | 	mov	r3, 0x32
0xC6DA | 0x2B88        | 01590 | 	mov	r5, 0x8
0xC6DB | 0x33EC 0xC171 | 01591 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC6DD | 0x13E8 0x07D0 | 01592 | 	mov	r2, 0x7d0
0xC6DF | 0x33EC 0xC01F | 01593 | 	jsr	r6, sxc__Z7wait_msj
0xC6E1 | 0x1380        | 01594 | 	mov	r2, 0x0
0xC6E2 | 0x1B80        | 01595 | 	mov	r3, 0x0
0xC6E3 | 0x33EC 0xC0A1 | 01596 | 	jsr	r6, sxc__Z25OLED_FillScreen_160128RGBm
0xC6E5 | 0x1381        | 01597 | 	mov	r2, 0x1
0xC6E6 | 0x0100 0xFF07 | 01598 | 	bra	BB16_2
0xC6E8 |               | 01599 | BB16_8:                                 //   in Loop: Header=BB16_2 Depth=2
0xC6E8 | 0x8402        | 01600 | 	ld	r0, r4, 0x2
0xC6E9 | 0x1380        | 01601 | 	mov	r2, 0x0
0xC6EA | 0x48FE        | 01602 | 	sub	r1, r0, 0x2
0xC6EB | 0x280E        | 01603 | 	bc	NE, BB16_12
       |               | 01604 | // BB#9:                                //   in Loop: Header=BB16_2 Depth=2
0xC6EC | 0x1A87        | 01605 | 	outp	r3, 0x7
0xC6ED | 0x03EA 0xCC9A | 01606 | 	ld	r0, sxc_profile_index
0xC6EF | 0x40FF        | 01607 | 	add	r0, r0, 0xffff
0xC6F0 | 0x03EB 0xCC9A | 01608 | 	st	r0, sxc_profile_index
0xC6F2 | 0x03EA 0xCC9A | 01609 | 	ld	r0, sxc_profile_index
       |               | 01610 | 	//cmp	r0, 0x0
0xC6F4 | 0x2803        | 01611 | 	bc	ZC, BB16_11
       |               | 01612 | // BB#10:                               //   in Loop: Header=BB16_2 Depth=2
0xC6F5 | 0x0383        | 01613 | 	mov	r0, 0x3
0xC6F6 | 0x03EB 0xCC9A | 01614 | 	st	r0, sxc_profile_index
0xC6F8 |               | 01615 | BB16_11:                                //   in Loop: Header=BB16_2 Depth=2
0xC6F8 | 0x1A86        | 01616 | 	outp	r3, 0x6
0xC6F9 | 0xD402        | 01617 | 	st	r2, r4, 0x2
0xC6FA |               | 01618 | BB16_12:                                //   in Loop: Header=BB16_2 Depth=2
0xC6FA | 0x0388        | 01619 | 	mov	r0, 0x8
0xC6FB | 0x0286        | 01620 | 	outp	r0, 0x6
0xC6FC | 0x0384        | 01621 | 	mov	r0, 0x4
0xC6FD | 0x0287        | 01622 | 	outp	r0, 0x7
0xC6FE | 0x022E        | 01623 | 	inp	r0, 0x2e
0xC6FF | 0x03C8 0xFFFC | 01624 | 	and	r0, r0, 0xfffc
0xC701 | 0x0670        | 01625 | 	rol	r0, r0, 0xe
0xC702 | 0x03C8 0x0001 | 01626 | 	and	r0, r0, 0x1
0xC704 | 0x0780        | 01627 | 	xor	r0, r0, 0x1
0xC705 | 0x03EB 0xCC96 | 01628 | 	st	r0, sxc_btn_press
0xC707 | 0x1380        | 01629 | 	mov	r2, 0x0
0xC708 | 0x03EA 0xCC96 | 01630 | 	ld	r0, sxc_btn_press
0xC70A | 0x48FF        | 01631 | 	sub	r1, r0, 0x1
0xC70B | 0x281F        | 01632 | 	bc	NE, BB16_16
       |               | 01633 | // BB#13:                               //   in Loop: Header=BB16_2 Depth=2
0xC70C | 0x1380        | 01634 | 	mov	r2, 0x0
0xC70D | 0x1B80        | 01635 | 	mov	r3, 0x0
0xC70E | 0x33EC 0xC0A1 | 01636 | 	jsr	r6, sxc__Z25OLED_FillScreen_160128RGBm
0xC710 | 0x13C7 0xFF46 | 01637 | 	add	r2, sp, 0xff46
0xC712 | 0xD7FA        | 01638 | 	st	r2, sp, 0xfffa          // 1-byte Folded Spill
0xC713 | 0x1BE8 0xCC9D | 01639 | 	mov	r3, sxc_selected_profile
0xC715 | 0x23E8 0x00B4 | 01640 | 	mov	r4, 0xb4
0xC717 | 0x33EC 0xC7C7 | 01641 | 	jsr	r6, sxc_memcpy
0xC719 | 0x23E8 0x00B4 | 01642 | 	mov	r4, 0xb4
0xC71B | 0x9FFA        | 01643 | 	ld	r3, sp, 0xfffa          // 1-byte Folded Reload
0xC71C | 0x1380        | 01644 | 	mov	r2, 0x0
0xC71D |               | 01645 | BB16_14:                                //   Parent Loop BB16_1 Depth=1
       |               | 01646 |                                         //     Parent Loop BB16_2 Depth=2
       |               | 01647 |                                         // =>    This Inner Loop Header: Depth=3
0xC71D | 0x0363        | 01648 | 	sub	r0, r3, r4
0xC71E | 0x13F8 0x00B4 | 01649 | 	st	r2, r0, 0xb4
0xC720 | 0x64FF        | 01650 | 	add	r4, r4, 0xffff
       |               | 01651 | 	//cmp	r4, 0x0
0xC721 | 0x28FB        | 01652 | 	bc	ZC, BB16_14
       |               | 01653 | // BB#15:                               // %_Z21generate_test_profile7profile.exit
       |               | 01654 |                                         //   in Loop: Header=BB16_2 Depth=2
0xC722 | 0x1BC7 0xFF46 | 01655 | 	add	r3, sp, 0xff46
0xC724 | 0x13E8 0xCC9D | 01656 | 	mov	r2, sxc_selected_profile
0xC726 | 0x23E8 0x00B4 | 01657 | 	mov	r4, 0xb4
0xC728 | 0x33EC 0xC7C7 | 01658 | 	jsr	r6, sxc_memcpy
0xC72A | 0x1382        | 01659 | 	mov	r2, 0x2
0xC72B |               | 01660 | BB16_16:                                //   in Loop: Header=BB16_2 Depth=2
0xC72B | 0x0384        | 01661 | 	mov	r0, 0x4
0xC72C | 0x0286        | 01662 | 	outp	r0, 0x6
0xC72D | 0x0100 0xFEC0 | 01663 | 	bra	BB16_2
0xC72F |               | 01664 | BB16_22:                                // %infloop
       |               | 01665 |                                         // =>This Inner Loop Header: Depth=1
0xC72F | 0x01FF        | 01666 | 	bra	BB16_22
       |               | 01667 | //	.section	//.text,"xr"
       |               | 01668 | //sxc_main
       |               | 01669 | //align
       |               | 01670 | @ = (@ + 1-1)  & -1
0xC730 |               | 01671 | sxc_main:                               // @main
       |               | 01672 | // BB#0:
0xC730 | 0x0396        | 01673 | 	mov	r0, 0x16
0xC731 | 0x02F0        | 01674 | 	outp	r0, 0x70
0xC732 | 0x03E8 0x0073 | 01675 | 	mov	r0, 0x73
0xC734 | 0x02F1        | 01676 | 	outp	r0, 0x71
0xC735 | 0x0272        | 01677 | 	inp	r0, 0x72
0xC736 | 0x06D0        | 01678 | 	and	r0, r0, 0xfbff
0xC737 | 0x02F2        | 01679 | 	outp	r0, 0x72
0xC738 |               | 01680 | BB17_1:                                 // =>This Inner Loop Header: Depth=1
0xC738 | 0x0272        | 01681 | 	inp	r0, 0x72
       |               | 01682 | 	//cmp	r0, 0x0
0xC739 | 0x0CFE        | 01683 | 	bc	LT0, BB17_1
       |               | 01684 | // BB#2:
0xC73A | 0x0381        | 01685 | 	mov	r0, 0x1
0xC73B | 0x02F5        | 01686 | 	outp	r0, 0x75
0xC73C | 0x03E8 0x0805 | 01687 | 	mov	r0, 0x805
0xC73E | 0x02F4        | 01688 | 	outp	r0, 0x74
0xC73F | 0x0272        | 01689 | 	inp	r0, 0x72
0xC740 | 0x06D0        | 01690 | 	and	r0, r0, 0xfbff
0xC741 | 0x02F2        | 01691 | 	outp	r0, 0x72
0xC742 |               | 01692 | BB17_3:                                 // =>This Inner Loop Header: Depth=1
0xC742 | 0x0272        | 01693 | 	inp	r0, 0x72
       |               | 01694 | 	//cmp	r0, 0x0
0xC743 | 0x0CFE        | 01695 | 	bc	LT0, BB17_3
       |               | 01696 | // BB#4:
0xC744 | 0x0272        | 01697 | 	inp	r0, 0x72
0xC745 | 0x03D0 0x0C00 | 01698 | 	ior	r0, r0, 0xc00
0xC747 | 0x02F2        | 01699 | 	outp	r0, 0x72
0xC748 |               | 01700 | BB17_5:                                 // =>This Inner Loop Header: Depth=1
0xC748 | 0x0272        | 01701 | 	inp	r0, 0x72
       |               | 01702 | 	//cmp	r0, 0x0
0xC749 | 0x2CFE        | 01703 | 	bc	NC, BB17_5
       |               | 01704 | // BB#6:                                // %_Z8InitGPIOv.exit
0xC74A | 0x03E8 0x8183 | 01705 | 	mov	r0, 0x8183
0xC74C | 0x02F3        | 01706 | 	outp	r0, 0x73
0xC74D | 0x038F        | 01707 | 	mov	r0, 0xf
0xC74E | 0x02B7        | 01708 | 	outp	r0, 0x37
0xC74F | 0x03E8 0x8F00 | 01709 | 	mov	r0, 0x8f00
0xC751 | 0x02A1        | 01710 | 	outp	r0, 0x21
0xC752 | 0x0220        | 01711 | 	inp	r0, 0x20
0xC753 | 0x0710        | 01712 | 	ior	r0, r0, 0x4
0xC754 | 0x02A0        | 01713 | 	outp	r0, 0x20
0xC755 | 0x0220        | 01714 | 	inp	r0, 0x20
0xC756 | 0x0738        | 01715 | 	ior	r0, r0, 0x80
0xC757 | 0x02A0        | 01716 | 	outp	r0, 0x20
0xC758 | 0x0391        | 01717 | 	mov	r0, 0x11
0xC759 | 0x02F0        | 01718 | 	outp	r0, 0x70
0xC75A | 0x038E        | 01719 | 	mov	r0, 0xe
0xC75B | 0x02F1        | 01720 | 	outp	r0, 0x71
0xC75C | 0x1B92        | 01721 | 	mov	r3, 0x12
0xC75D | 0x1AF0        | 01722 | 	outp	r3, 0x70
0xC75E | 0x02F1        | 01723 | 	outp	r0, 0x71
0xC75F | 0x03E8 0x6000 | 01724 | 	mov	r0, 0x6000
0xC761 | 0x02A7        | 01725 | 	outp	r0, 0x27
0xC762 | 0x03E8 0x0200 | 01726 | 	mov	r0, 0x200
0xC764 | 0x02B3        | 01727 | 	outp	r0, 0x33
0xC765 | 0x0232        | 01728 | 	inp	r0, 0x32
0xC766 | 0x0708        | 01729 | 	ior	r0, r0, 0x2
0xC767 | 0x02B2        | 01730 | 	outp	r0, 0x32
0xC768 | 0x139A        | 01731 | 	mov	r2, 0x1a
0xC769 | 0x12F0        | 01732 | 	outp	r2, 0x70
0xC76A | 0x03E8 0x0060 | 01733 | 	mov	r0, 0x60
0xC76C | 0x02F1        | 01734 | 	outp	r0, 0x71
0xC76D | 0x03E8 0x8000 | 01735 | 	mov	r0, 0x8000
0xC76F | 0x0287        | 01736 | 	outp	r0, 0x7
0xC770 | 0x0B8A        | 01737 | 	mov	r1, 0xa
0xC771 | 0x0A83        | 01738 | 	outp	r1, 0x3
0xC772 | 0x0B80        | 01739 | 	mov	r1, 0x0
0xC773 | 0x0A80        | 01740 | 	outp	r1, 0x0
0xC774 | 0x23E8 0xC4EE | 01741 | 	mov	r4, sxc__Z15stateOLEDThreadPv
0xC776 | 0x2281        | 01742 | 	outp	r4, 0x1
0xC777 | 0x0286        | 01743 | 	outp	r0, 0x6
0xC778 | 0x0287        | 01744 | 	outp	r0, 0x7
0xC779 | 0x23EA 0xCA08 | 01745 | 	ld	r4, thrds_vector
0xC77B | 0x268C        | 01746 | 	and	r4, r4, 0xfffd
0xC77C | 0x23EB 0xCA08 | 01747 | 	st	r4, thrds_vector
0xC77E | 0x2284        | 01748 | 	outp	r4, 0x4
0xC77F | 0x0286        | 01749 | 	outp	r0, 0x6
0xC780 | 0x0287        | 01750 | 	outp	r0, 0x7
0xC781 | 0x1A83        | 01751 | 	outp	r3, 0x3
0xC782 | 0x0A80        | 01752 | 	outp	r1, 0x0
0xC783 | 0x1BE8 0xC3D2 | 01753 | 	mov	r3, sxc__Z14RotEncodThreadPv
0xC785 | 0x1A81        | 01754 | 	outp	r3, 0x1
0xC786 | 0x0286        | 01755 | 	outp	r0, 0x6
0xC787 | 0x0287        | 01756 | 	outp	r0, 0x7
0xC788 | 0x1BEA 0xCA08 | 01757 | 	ld	r3, thrds_vector
0xC78A | 0x1E93        | 01758 | 	and	r3, r3, 0xfffb
0xC78B | 0x1BEB 0xCA08 | 01759 | 	st	r3, thrds_vector
0xC78D | 0x1A84        | 01760 | 	outp	r3, 0x4
0xC78E | 0x0286        | 01761 | 	outp	r0, 0x6
0xC78F | 0x0287        | 01762 | 	outp	r0, 0x7
0xC790 | 0x1283        | 01763 | 	outp	r2, 0x3
0xC791 | 0x0A80        | 01764 | 	outp	r1, 0x0
0xC792 | 0x13E8 0xC395 | 01765 | 	mov	r2, sxc__Z10TempThreadPv
0xC794 | 0x1281        | 01766 | 	outp	r2, 0x1
0xC795 | 0x0286        | 01767 | 	outp	r0, 0x6
0xC796 | 0x0287        | 01768 | 	outp	r0, 0x7
0xC797 | 0x13E8 0x0022 | 01769 | 	mov	r2, 0x22
0xC799 | 0x1283        | 01770 | 	outp	r2, 0x3
0xC79A | 0x0A80        | 01771 | 	outp	r1, 0x0
0xC79B | 0x13E8 0xC4D1 | 01772 | 	mov	r2, sxc__Z14HumidityThreadPv
0xC79D | 0x1281        | 01773 | 	outp	r2, 0x1
0xC79E | 0x0286        | 01774 | 	outp	r0, 0x6
0xC79F | 0x0287        | 01775 | 	outp	r0, 0x7
0xC7A0 | 0x13E8 0x002A | 01776 | 	mov	r2, 0x2a
0xC7A2 | 0x1283        | 01777 | 	outp	r2, 0x3
0xC7A3 | 0x0A80        | 01778 | 	outp	r1, 0x0
0xC7A4 | 0x0BE8 0xC42B | 01779 | 	mov	r1, sxc__Z9PIDThreadPv
0xC7A6 | 0x0A81        | 01780 | 	outp	r1, 0x1
0xC7A7 | 0x0286        | 01781 | 	outp	r0, 0x6
0xC7A8 | 0x0380        | 01782 | 	mov	r0, 0x0
0xC7A9 | 0x33E6        | 01783 | 	jsr	r6, r6
       |               | 01784 | 
       |               | 01785 | //align
       |               | 01786 | @ = (@ + 1-1)  & -1
0xC7AA |               | 01787 | sxc___xinc_udiv:                        // @__xinc_udiv
       |               | 01788 | // BB#0:
0xC7AA | 0x7F01        | 01789 | 	add	sp, sp, 0x1
0xC7AB | 0xF7FF        | 01790 | 	st	r6, sp, 0xffff          // 1-byte Folded Spill
0xC7AC | 0x4A00        | 01791 | 	add	r1, r2, 0x0
0xC7AD | 0x5300        | 01792 | 	add	r2, r3, 0x0
       |               | 01793 | 	//APP
0xC7AE | 0x33EC 0x1816 | 01794 | 	jsr	r6, UnsignedDivide
       |               | 01795 | 	//NO_APP
0xC7B0 | 0x4100        | 01796 | 	add	r0, r1, 0x0
0xC7B1 | 0xB7FF        | 01797 | 	ld	r6, sp, 0xffff          // 1-byte Folded Reload
0xC7B2 | 0x7FFF        | 01798 | 	sub	sp, sp, 0x1
0xC7B3 | 0x33E6        | 01799 | 	jsr	r6, r6
       |               | 01800 | 
       |               | 01801 | //align
       |               | 01802 | @ = (@ + 1-1)  & -1
0xC7B4 |               | 01803 | sxc___xinc_umod:                        // @__xinc_umod
       |               | 01804 | // BB#0:
0xC7B4 | 0x7F01        | 01805 | 	add	sp, sp, 0x1
0xC7B5 | 0xF7FF        | 01806 | 	st	r6, sp, 0xffff          // 1-byte Folded Spill
0xC7B6 | 0x4A00        | 01807 | 	add	r1, r2, 0x0
0xC7B7 | 0x5300        | 01808 | 	add	r2, r3, 0x0
       |               | 01809 | 	//APP
0xC7B8 | 0x33EC 0x1816 | 01810 | 	jsr	r6, UnsignedDivide
       |               | 01811 | 	//NO_APP
0xC7BA | 0x4200        | 01812 | 	add	r0, r2, 0x0
0xC7BB | 0xB7FF        | 01813 | 	ld	r6, sp, 0xffff          // 1-byte Folded Reload
0xC7BC | 0x7FFF        | 01814 | 	sub	sp, sp, 0x1
0xC7BD | 0x33E6        | 01815 | 	jsr	r6, r6
       |               | 01816 | 
       |               | 01817 | //align
       |               | 01818 | @ = (@ + 1-1)  & -1
0xC7BE |               | 01819 | sxc_memset:                             // @memset
       |               | 01820 | // BB#0:
0xC7BE | 0x4C00        | 01821 | 	sub	r1, r4, 0x0
0xC7BF | 0x0805        | 01822 | 	bc	EQ, BB20_3
       |               | 01823 | // BB#1:
0xC7C0 | 0x4200        | 01824 | 	add	r0, r2, 0x0
0xC7C1 |               | 01825 | BB20_2:                                 // %.lr.ph
       |               | 01826 |                                         // =>This Inner Loop Header: Depth=1
0xC7C1 | 0xD800        | 01827 | 	st	r3, r0, 0x0
0xC7C2 | 0x4001        | 01828 | 	add	r0, r0, 0x1
0xC7C3 | 0x64FF        | 01829 | 	add	r4, r4, 0xffff
       |               | 01830 | 	//cmp	r4, 0x0
0xC7C4 | 0x28FC        | 01831 | 	bc	ZC, BB20_2
0xC7C5 |               | 01832 | BB20_3:                                 // %._crit_edge
0xC7C5 | 0x4200        | 01833 | 	add	r0, r2, 0x0
0xC7C6 | 0x33E6        | 01834 | 	jsr	r6, r6
       |               | 01835 | 
       |               | 01836 | //align
       |               | 01837 | @ = (@ + 1-1)  & -1
0xC7C7 |               | 01838 | sxc_memcpy:                             // @memcpy
       |               | 01839 | // BB#0:
0xC7C7 | 0x0B5A        | 01840 | 	sub	r1, r2, r3
0xC7C8 | 0x0809        | 01841 | 	bc	EQ, BB21_4
       |               | 01842 | // BB#1:
0xC7C9 | 0x4C00        | 01843 | 	sub	r1, r4, 0x0
0xC7CA | 0x0807        | 01844 | 	bc	EQ, BB21_4
       |               | 01845 | // BB#2:
0xC7CB | 0x4200        | 01846 | 	add	r0, r2, 0x0
0xC7CC |               | 01847 | BB21_3:                                 // %.lr.ph.i
       |               | 01848 |                                         // =>This Inner Loop Header: Depth=1
0xC7CC | 0x8B00        | 01849 | 	ld	r1, r3, 0x0
0xC7CD | 0xC800        | 01850 | 	st	r1, r0, 0x0
0xC7CE | 0x5B01        | 01851 | 	add	r3, r3, 0x1
0xC7CF | 0x4001        | 01852 | 	add	r0, r0, 0x1
0xC7D0 | 0x64FF        | 01853 | 	add	r4, r4, 0xffff
       |               | 01854 | 	//cmp	r4, 0x0
0xC7D1 | 0x28FA        | 01855 | 	bc	ZC, BB21_3
0xC7D2 |               | 01856 | BB21_4:                                 // %memcpy_base.exit
0xC7D2 | 0x4200        | 01857 | 	add	r0, r2, 0x0
0xC7D3 | 0x33E6        | 01858 | 	jsr	r6, r6
       |               | 01859 | 
       |               | 01860 | //align
       |               | 01861 | @ = (@ + 1-1)  & -1
0xC7D4 |               | 01862 | sxc_memmove:                            // @memmove
       |               | 01863 | // BB#0:
0xC7D4 | 0x0381        | 01864 | 	mov	r0, 0x1
0xC7D5 | 0x2B81        | 01865 | 	mov	r5, 0x1
0xC7D6 | 0x4C00        | 01866 | 	sub	r1, r4, 0x0
0xC7D7 | 0x0801        | 01867 | 	bc	EQ, @ + 1 + 0x1
0xC7D8 | 0x2B80        | 01868 | 	mov	r5, 0x0 //Select--False
0xC7D9 | 0x0B5A        | 01869 | 	sub	r1, r2, r3
0xC7DA | 0x0801        | 01870 | 	bc	EQ, @ + 1 + 0x1
0xC7DB | 0x0380        | 01871 | 	mov	r0, 0x0 //Select--False
0xC7DC | 0x05A8        | 01872 | 	ior	r0, r0, r5
0xC7DD | 0x0B53        | 01873 | 	sub	r1, r3, r2
0xC7DE | 0x200D        | 01874 | 	bc	UGE, BB22_1
       |               | 01875 | // BB#4:
0xC7DF | 0x03C8 0x0001 | 01876 | 	and	r0, r0, 0x1
       |               | 01877 | 	//cmp	r0, 0x0
0xC7E1 | 0x2814        | 01878 | 	bc	ZC, BB22_7
       |               | 01879 | // BB#5:                                // %.lr.ph23.i.preheader
0xC7E2 | 0x0381        | 01880 | 	mov	r0, 0x1
0xC7E3 | 0x0360        | 01881 | 	sub	r0, r0, r4
0xC7E4 |               | 01882 | BB22_6:                                 // %.lr.ph23.i
       |               | 01883 |                                         // =>This Inner Loop Header: Depth=1
0xC7E4 | 0x0B42        | 01884 | 	sub	r1, r2, r0
0xC7E5 | 0x2343        | 01885 | 	sub	r4, r3, r0
0xC7E6 | 0xA400        | 01886 | 	ld	r4, r4, 0x0
0xC7E7 | 0xE100        | 01887 | 	st	r4, r1, 0x0
0xC7E8 | 0x4001        | 01888 | 	add	r0, r0, 0x1
0xC7E9 | 0x48FF        | 01889 | 	sub	r1, r0, 0x1
0xC7EA | 0x28F9        | 01890 | 	bc	NE, BB22_6
0xC7EB | 0x010A        | 01891 | 	bra	BB22_7
0xC7EC |               | 01892 | BB22_1:
0xC7EC | 0x03C8 0x0001 | 01893 | 	and	r0, r0, 0x1
       |               | 01894 | 	//cmp	r0, 0x0
0xC7EE | 0x2807        | 01895 | 	bc	ZC, BB22_7
       |               | 01896 | // BB#2:
0xC7EF | 0x4200        | 01897 | 	add	r0, r2, 0x0
0xC7F0 |               | 01898 | BB22_3:                                 // %.lr.ph.i
       |               | 01899 |                                         // =>This Inner Loop Header: Depth=1
0xC7F0 | 0x8B00        | 01900 | 	ld	r1, r3, 0x0
0xC7F1 | 0xC800        | 01901 | 	st	r1, r0, 0x0
0xC7F2 | 0x5B01        | 01902 | 	add	r3, r3, 0x1
0xC7F3 | 0x4001        | 01903 | 	add	r0, r0, 0x1
0xC7F4 | 0x64FF        | 01904 | 	add	r4, r4, 0xffff
       |               | 01905 | 	//cmp	r4, 0x0
0xC7F5 | 0x28FA        | 01906 | 	bc	ZC, BB22_3
0xC7F6 |               | 01907 | BB22_7:                                 // %memcpy_base.exit
0xC7F6 | 0x4200        | 01908 | 	add	r0, r2, 0x0
0xC7F7 | 0x33E6        | 01909 | 	jsr	r6, r6
       |               | 01910 | 

                                 //
                                 // "ReflowOvenController.main" -> "code.asm"
//============================== //==============================================================
                                 // "ReflowOvenController.main"
                                 //

       |               | 00010 | @ = (@ + 0x0800-1) & -0x0800
       |               | 00011 | #include "C:/Program Files/SXC/include/sxc-art0\XInC2_Thread_Definitions.asm"

                                 //
                                 // "ReflowOvenController.main"
//============================== //==============================================================
                                 // "ReflowOvenController.main" -> "XInC2_Thread_Definitions.asm"
                                 //

       |               | 00001 | #ifndef DEFAULT_STACK_SIZE
       |      = 0x0040 | 00002 | #define DEFAULT_STACK_SIZE 64
       |               | 00003 | #endif
       |               | 00004 | 
       |               | 00005 | #ifndef THREAD0_STACK_SIZE
       |      = 0x0040 | 00006 | #define THREAD0_STACK_SIZE DEFAULT_STACK_SIZE
       |               | 00007 | #endif
       |               | 00008 | 
       |               | 00009 | #ifndef THREAD1_STACK_SIZE
       |      = 0x0040 | 00010 | #define THREAD1_STACK_SIZE DEFAULT_STACK_SIZE
       |               | 00011 | #endif
       |               | 00012 | 
       |               | 00013 | #ifndef THREAD2_STACK_SIZE
       |      = 0x0040 | 00014 | #define THREAD2_STACK_SIZE DEFAULT_STACK_SIZE
       |               | 00015 | #endif
       |               | 00016 | 
       |               | 00017 | #ifndef THREAD3_STACK_SIZE
       |      = 0x0040 | 00018 | #define THREAD3_STACK_SIZE DEFAULT_STACK_SIZE
       |               | 00019 | #endif
       |               | 00020 | 
       |               | 00021 | #ifndef THREAD4_STACK_SIZE
       |      = 0x0040 | 00022 | #define THREAD4_STACK_SIZE DEFAULT_STACK_SIZE
       |               | 00023 | #endif
       |               | 00024 | 
       |               | 00025 | #ifndef THREAD5_STACK_SIZE
       |      = 0x0040 | 00026 | #define THREAD5_STACK_SIZE DEFAULT_STACK_SIZE
       |               | 00027 | #endif
       |               | 00028 | 
       |               | 00029 | #ifndef THREAD6_STACK_SIZE
       |      = 0x0040 | 00030 | #define THREAD6_STACK_SIZE DEFAULT_STACK_SIZE
       |               | 00031 | #endif
       |               | 00032 | 
       |               | 00033 | #ifndef THREAD7_STACK_SIZE
       |      = 0x0040 | 00034 | #define THREAD7_STACK_SIZE DEFAULT_STACK_SIZE
       |               | 00035 | #endif
       |               | 00036 | 
0xC800 |               | 00037 | THREAD0_STACK: @ = @ + THREAD0_STACK_SIZE
0xC840 |               | 00038 | THREAD1_STACK: @ = @ + THREAD1_STACK_SIZE
0xC880 |               | 00039 | THREAD2_STACK: @ = @ + THREAD2_STACK_SIZE
0xC8C0 |               | 00040 | THREAD3_STACK: @ = @ + THREAD3_STACK_SIZE
0xC900 |               | 00041 | THREAD4_STACK: @ = @ + THREAD4_STACK_SIZE
0xC940 |               | 00042 | THREAD5_STACK: @ = @ + THREAD5_STACK_SIZE
0xC980 |               | 00043 | THREAD6_STACK: @ = @ + THREAD6_STACK_SIZE
0xC9C0 |               | 00044 | THREAD7_STACK: @ = @ + THREAD7_STACK_SIZE
       |               | 00045 | 
0xCA00 |               | 00046 | THREAD_STACK_LOOKUP:
0xCA00 | 0xC800        | 00047 |   THREAD0_STACK
0xCA01 | 0xC840        | 00048 |   THREAD1_STACK
0xCA02 | 0xC880        | 00049 |   THREAD2_STACK
0xCA03 | 0xC8C0        | 00050 |   THREAD3_STACK
0xCA04 | 0xC900        | 00051 |   THREAD4_STACK
0xCA05 | 0xC940        | 00052 |   THREAD5_STACK
0xCA06 | 0xC980        | 00053 |   THREAD6_STACK
0xCA07 | 0xC9C0        | 00054 |   THREAD7_STACK
       |               | 00055 | 
0xCA08 | 0x00FE        | 00056 | thrds_vector: 0xFE //on program init, only thread0 is running

                                 //
                                 // "ReflowOvenController.main" -> "XInC2_Thread_Definitions.asm"
//============================== //==============================================================
                                 // "ReflowOvenController.main"
                                 //

       |               | 00012 | #include "C:/Users/cchin/CapstoneFirmware/Xinc2/ReflowOvenController/build\data.asm"

                                 //
                                 // "ReflowOvenController.main"
//============================== //==============================================================
                                 // "ReflowOvenController.main" -> "data.asm"
                                 //

       |               | 00001 | //	.section	.rdata,"r"
0xCA09 |               | 00002 | JTI1_0:
0xCA09 | 0xC045        | 00003 | 		BB1_2
0xCA0A | 0xC047        | 00004 | 		BB1_3
0xCA0B | 0xC049        | 00005 | 		BB1_4
0xCA0C | 0xC04B        | 00006 | 		BB1_5
0xCA0D | 0xC04D        | 00007 | 		BB1_6
0xCA0E | 0xC04F        | 00008 | 		BB1_7
0xCA0F | 0xC051        | 00009 | 		BB1_8
0xCA10 | 0xC053        | 00010 | 		BB1_9
0xCA11 | 0xC055        | 00011 | 		BB1_10
0xCA12 | 0xC057        | 00012 | 		BB1_11
       |               | 00013 | 
       |               | 00014 | //	.section	.rdata,"r"
0xCA13 |               | 00015 | JTI13_0:
0xCA13 | 0xC404        | 00016 | 		BB13_4
0xCA14 | 0xC409        | 00017 | 		BB13_7
0xCA15 | 0xC40E        | 00018 | 		BB13_9
0xCA16 | 0xC413        | 00019 | 		BB13_11
       |               | 00020 | 
       |               | 00021 | //	.section	.rdata,"r"
0xCA17 |               | 00022 | JTI16_0:
0xCA17 | 0xC5F6        | 00023 | 		BB16_4
0xCA18 | 0xC643        | 00024 | 		BB16_18
0xCA19 | 0xC695        | 00025 | 		BB16_17
0xCA1A | 0xC72F        | 00026 | 		BB16_22
0xCA1B | 0xC5B2        | 00027 | 		BB16_21
       |               | 00028 | 
       |               | 00029 | //	.section	//.data,"w"
0xCA1C |               | 00030 | sxc_Ascii_1:                            // @Ascii_1
       |               | 00031 | 	@ = @ + 5
0xCA21 | 0x0000        | 00032 | 		0                       // 0x0
0xCA22 | 0x0000        | 00033 | 		0                       // 0x0
0xCA23 | 0x004F        | 00034 | 		79                      // 0x4f
0xCA24 | 0x0000        | 00035 | 		0                       // 0x0
0xCA25 | 0x0000        | 00036 | 		0                       // 0x0
0xCA26 | 0x0000        | 00037 | 		0                       // 0x0
0xCA27 | 0x0007        | 00038 | 		7                       // 0x7
0xCA28 | 0x0000        | 00039 | 		0                       // 0x0
0xCA29 | 0x0007        | 00040 | 		7                       // 0x7
0xCA2A | 0x0000        | 00041 | 		0                       // 0x0
0xCA2B | 0x0014        | 00042 | 		20                      // 0x14
0xCA2C | 0x007F        | 00043 | 		127                     // 0x7f
0xCA2D | 0x0014        | 00044 | 		20                      // 0x14
0xCA2E | 0x007F        | 00045 | 		127                     // 0x7f
0xCA2F | 0x0014        | 00046 | 		20                      // 0x14
0xCA30 | 0x0024        | 00047 | 		36                      // 0x24
0xCA31 | 0x002A        | 00048 | 		42                      // 0x2a
0xCA32 | 0x007F        | 00049 | 		127                     // 0x7f
0xCA33 | 0x002A        | 00050 | 		42                      // 0x2a
0xCA34 | 0x0012        | 00051 | 		18                      // 0x12
0xCA35 | 0x0023        | 00052 | 		35                      // 0x23
0xCA36 | 0x0013        | 00053 | 		19                      // 0x13
0xCA37 | 0x0008        | 00054 | 		8                       // 0x8
0xCA38 | 0x0064        | 00055 | 		100                     // 0x64
0xCA39 | 0x0062        | 00056 | 		98                      // 0x62
0xCA3A | 0x0036        | 00057 | 		54                      // 0x36
0xCA3B | 0x0049        | 00058 | 		73                      // 0x49
0xCA3C | 0x0055        | 00059 | 		85                      // 0x55
0xCA3D | 0x0022        | 00060 | 		34                      // 0x22
0xCA3E | 0x0050        | 00061 | 		80                      // 0x50
0xCA3F | 0x0000        | 00062 | 		0                       // 0x0
0xCA40 | 0x0005        | 00063 | 		5                       // 0x5
0xCA41 | 0x0003        | 00064 | 		3                       // 0x3
0xCA42 | 0x0000        | 00065 | 		0                       // 0x0
0xCA43 | 0x0000        | 00066 | 		0                       // 0x0
0xCA44 | 0x0000        | 00067 | 		0                       // 0x0
0xCA45 | 0x001C        | 00068 | 		28                      // 0x1c
0xCA46 | 0x0022        | 00069 | 		34                      // 0x22
0xCA47 | 0x0041        | 00070 | 		65                      // 0x41
0xCA48 | 0x0000        | 00071 | 		0                       // 0x0
0xCA49 | 0x0000        | 00072 | 		0                       // 0x0
0xCA4A | 0x0041        | 00073 | 		65                      // 0x41
0xCA4B | 0x0022        | 00074 | 		34                      // 0x22
0xCA4C | 0x001C        | 00075 | 		28                      // 0x1c
0xCA4D | 0x0000        | 00076 | 		0                       // 0x0
0xCA4E | 0x0014        | 00077 | 		20                      // 0x14
0xCA4F | 0x0008        | 00078 | 		8                       // 0x8
0xCA50 | 0x003E        | 00079 | 		62                      // 0x3e
0xCA51 | 0x0008        | 00080 | 		8                       // 0x8
0xCA52 | 0x0014        | 00081 | 		20                      // 0x14
0xCA53 | 0x0008        | 00082 | 		8                       // 0x8
0xCA54 | 0x0008        | 00083 | 		8                       // 0x8
0xCA55 | 0x003E        | 00084 | 		62                      // 0x3e
0xCA56 | 0x0008        | 00085 | 		8                       // 0x8
0xCA57 | 0x0008        | 00086 | 		8                       // 0x8
0xCA58 | 0x0000        | 00087 | 		0                       // 0x0
0xCA59 | 0x0050        | 00088 | 		80                      // 0x50
0xCA5A | 0x0030        | 00089 | 		48                      // 0x30
0xCA5B | 0x0000        | 00090 | 		0                       // 0x0
0xCA5C | 0x0000        | 00091 | 		0                       // 0x0
0xCA5D | 0x0008        | 00092 | 		8                       // 0x8
0xCA5E | 0x0008        | 00093 | 		8                       // 0x8
0xCA5F | 0x0008        | 00094 | 		8                       // 0x8
0xCA60 | 0x0008        | 00095 | 		8                       // 0x8
0xCA61 | 0x0008        | 00096 | 		8                       // 0x8
0xCA62 | 0x0000        | 00097 | 		0                       // 0x0
0xCA63 | 0x0060        | 00098 | 		96                      // 0x60
0xCA64 | 0x0060        | 00099 | 		96                      // 0x60
0xCA65 | 0x0000        | 00100 | 		0                       // 0x0
0xCA66 | 0x0000        | 00101 | 		0                       // 0x0
0xCA67 | 0x0020        | 00102 | 		32                      // 0x20
0xCA68 | 0x0010        | 00103 | 		16                      // 0x10
0xCA69 | 0x0008        | 00104 | 		8                       // 0x8
0xCA6A | 0x0004        | 00105 | 		4                       // 0x4
0xCA6B | 0x0002        | 00106 | 		2                       // 0x2
0xCA6C | 0x003E        | 00107 | 		62                      // 0x3e
0xCA6D | 0x0051        | 00108 | 		81                      // 0x51
0xCA6E | 0x0049        | 00109 | 		73                      // 0x49
0xCA6F | 0x0045        | 00110 | 		69                      // 0x45
0xCA70 | 0x003E        | 00111 | 		62                      // 0x3e
0xCA71 | 0x0000        | 00112 | 		0                       // 0x0
0xCA72 | 0x0042        | 00113 | 		66                      // 0x42
0xCA73 | 0x007F        | 00114 | 		127                     // 0x7f
0xCA74 | 0x0040        | 00115 | 		64                      // 0x40
0xCA75 | 0x0000        | 00116 | 		0                       // 0x0
0xCA76 | 0x0042        | 00117 | 		66                      // 0x42
0xCA77 | 0x0061        | 00118 | 		97                      // 0x61
0xCA78 | 0x0051        | 00119 | 		81                      // 0x51
0xCA79 | 0x0049        | 00120 | 		73                      // 0x49
0xCA7A | 0x0046        | 00121 | 		70                      // 0x46
0xCA7B | 0x0021        | 00122 | 		33                      // 0x21
0xCA7C | 0x0041        | 00123 | 		65                      // 0x41
0xCA7D | 0x0045        | 00124 | 		69                      // 0x45
0xCA7E | 0x004B        | 00125 | 		75                      // 0x4b
0xCA7F | 0x0031        | 00126 | 		49                      // 0x31
0xCA80 | 0x0018        | 00127 | 		24                      // 0x18
0xCA81 | 0x0014        | 00128 | 		20                      // 0x14
0xCA82 | 0x0012        | 00129 | 		18                      // 0x12
0xCA83 | 0x007F        | 00130 | 		127                     // 0x7f
0xCA84 | 0x0010        | 00131 | 		16                      // 0x10
0xCA85 | 0x0027        | 00132 | 		39                      // 0x27
0xCA86 | 0x0045        | 00133 | 		69                      // 0x45
0xCA87 | 0x0045        | 00134 | 		69                      // 0x45
0xCA88 | 0x0045        | 00135 | 		69                      // 0x45
0xCA89 | 0x0039        | 00136 | 		57                      // 0x39
0xCA8A | 0x003C        | 00137 | 		60                      // 0x3c
0xCA8B | 0x004A        | 00138 | 		74                      // 0x4a
0xCA8C | 0x0049        | 00139 | 		73                      // 0x49
0xCA8D | 0x0049        | 00140 | 		73                      // 0x49
0xCA8E | 0x0030        | 00141 | 		48                      // 0x30
0xCA8F | 0x0001        | 00142 | 		1                       // 0x1
0xCA90 | 0x0071        | 00143 | 		113                     // 0x71
0xCA91 | 0x0009        | 00144 | 		9                       // 0x9
0xCA92 | 0x0005        | 00145 | 		5                       // 0x5
0xCA93 | 0x0003        | 00146 | 		3                       // 0x3
0xCA94 | 0x0036        | 00147 | 		54                      // 0x36
0xCA95 | 0x0049        | 00148 | 		73                      // 0x49
0xCA96 | 0x0049        | 00149 | 		73                      // 0x49
0xCA97 | 0x0049        | 00150 | 		73                      // 0x49
0xCA98 | 0x0036        | 00151 | 		54                      // 0x36
0xCA99 | 0x0006        | 00152 | 		6                       // 0x6
0xCA9A | 0x0049        | 00153 | 		73                      // 0x49
0xCA9B | 0x0049        | 00154 | 		73                      // 0x49
0xCA9C | 0x0029        | 00155 | 		41                      // 0x29
0xCA9D | 0x001E        | 00156 | 		30                      // 0x1e
0xCA9E | 0x0000        | 00157 | 		0                       // 0x0
0xCA9F | 0x0036        | 00158 | 		54                      // 0x36
0xCAA0 | 0x0036        | 00159 | 		54                      // 0x36
0xCAA1 | 0x0000        | 00160 | 		0                       // 0x0
0xCAA2 | 0x0000        | 00161 | 		0                       // 0x0
0xCAA3 | 0x0000        | 00162 | 		0                       // 0x0
0xCAA4 | 0x0056        | 00163 | 		86                      // 0x56
0xCAA5 | 0x0036        | 00164 | 		54                      // 0x36
0xCAA6 | 0x0000        | 00165 | 		0                       // 0x0
0xCAA7 | 0x0000        | 00166 | 		0                       // 0x0
0xCAA8 | 0x0008        | 00167 | 		8                       // 0x8
0xCAA9 | 0x0014        | 00168 | 		20                      // 0x14
0xCAAA | 0x0022        | 00169 | 		34                      // 0x22
0xCAAB | 0x0041        | 00170 | 		65                      // 0x41
0xCAAC | 0x0000        | 00171 | 		0                       // 0x0
0xCAAD | 0x0014        | 00172 | 		20                      // 0x14
0xCAAE | 0x0014        | 00173 | 		20                      // 0x14
0xCAAF | 0x0014        | 00174 | 		20                      // 0x14
0xCAB0 | 0x0014        | 00175 | 		20                      // 0x14
0xCAB1 | 0x0014        | 00176 | 		20                      // 0x14
0xCAB2 | 0x0000        | 00177 | 		0                       // 0x0
0xCAB3 | 0x0041        | 00178 | 		65                      // 0x41
0xCAB4 | 0x0022        | 00179 | 		34                      // 0x22
0xCAB5 | 0x0014        | 00180 | 		20                      // 0x14
0xCAB6 | 0x0008        | 00181 | 		8                       // 0x8
0xCAB7 | 0x0002        | 00182 | 		2                       // 0x2
0xCAB8 | 0x0001        | 00183 | 		1                       // 0x1
0xCAB9 | 0x0051        | 00184 | 		81                      // 0x51
0xCABA | 0x0009        | 00185 | 		9                       // 0x9
0xCABB | 0x0006        | 00186 | 		6                       // 0x6
0xCABC | 0x0032        | 00187 | 		50                      // 0x32
0xCABD | 0x0049        | 00188 | 		73                      // 0x49
0xCABE | 0x0079        | 00189 | 		121                     // 0x79
0xCABF | 0x0041        | 00190 | 		65                      // 0x41
0xCAC0 | 0x003E        | 00191 | 		62                      // 0x3e
0xCAC1 | 0x007E        | 00192 | 		126                     // 0x7e
0xCAC2 | 0x0011        | 00193 | 		17                      // 0x11
0xCAC3 | 0x0011        | 00194 | 		17                      // 0x11
0xCAC4 | 0x0011        | 00195 | 		17                      // 0x11
0xCAC5 | 0x007E        | 00196 | 		126                     // 0x7e
0xCAC6 | 0x007F        | 00197 | 		127                     // 0x7f
0xCAC7 | 0x0049        | 00198 | 		73                      // 0x49
0xCAC8 | 0x0049        | 00199 | 		73                      // 0x49
0xCAC9 | 0x0049        | 00200 | 		73                      // 0x49
0xCACA | 0x0036        | 00201 | 		54                      // 0x36
0xCACB | 0x003E        | 00202 | 		62                      // 0x3e
0xCACC | 0x0041        | 00203 | 		65                      // 0x41
0xCACD | 0x0041        | 00204 | 		65                      // 0x41
0xCACE | 0x0041        | 00205 | 		65                      // 0x41
0xCACF | 0x0022        | 00206 | 		34                      // 0x22
0xCAD0 | 0x007F        | 00207 | 		127                     // 0x7f
0xCAD1 | 0x0041        | 00208 | 		65                      // 0x41
0xCAD2 | 0x0041        | 00209 | 		65                      // 0x41
0xCAD3 | 0x0022        | 00210 | 		34                      // 0x22
0xCAD4 | 0x001C        | 00211 | 		28                      // 0x1c
0xCAD5 | 0x007F        | 00212 | 		127                     // 0x7f
0xCAD6 | 0x0049        | 00213 | 		73                      // 0x49
0xCAD7 | 0x0049        | 00214 | 		73                      // 0x49
0xCAD8 | 0x0049        | 00215 | 		73                      // 0x49
0xCAD9 | 0x0041        | 00216 | 		65                      // 0x41
0xCADA | 0x007F        | 00217 | 		127                     // 0x7f
0xCADB | 0x0009        | 00218 | 		9                       // 0x9
0xCADC | 0x0009        | 00219 | 		9                       // 0x9
0xCADD | 0x0009        | 00220 | 		9                       // 0x9
0xCADE | 0x0001        | 00221 | 		1                       // 0x1
0xCADF | 0x003E        | 00222 | 		62                      // 0x3e
0xCAE0 | 0x0041        | 00223 | 		65                      // 0x41
0xCAE1 | 0x0049        | 00224 | 		73                      // 0x49
0xCAE2 | 0x0049        | 00225 | 		73                      // 0x49
0xCAE3 | 0x007A        | 00226 | 		122                     // 0x7a
0xCAE4 | 0x007F        | 00227 | 		127                     // 0x7f
0xCAE5 | 0x0008        | 00228 | 		8                       // 0x8
0xCAE6 | 0x0008        | 00229 | 		8                       // 0x8
0xCAE7 | 0x0008        | 00230 | 		8                       // 0x8
0xCAE8 | 0x007F        | 00231 | 		127                     // 0x7f
0xCAE9 | 0x0000        | 00232 | 		0                       // 0x0
0xCAEA | 0x0041        | 00233 | 		65                      // 0x41
0xCAEB | 0x007F        | 00234 | 		127                     // 0x7f
0xCAEC | 0x0041        | 00235 | 		65                      // 0x41
0xCAED | 0x0000        | 00236 | 		0                       // 0x0
0xCAEE | 0x0020        | 00237 | 		32                      // 0x20
0xCAEF | 0x0040        | 00238 | 		64                      // 0x40
0xCAF0 | 0x0041        | 00239 | 		65                      // 0x41
0xCAF1 | 0x003F        | 00240 | 		63                      // 0x3f
0xCAF2 | 0x0001        | 00241 | 		1                       // 0x1
0xCAF3 | 0x007F        | 00242 | 		127                     // 0x7f
0xCAF4 | 0x0008        | 00243 | 		8                       // 0x8
0xCAF5 | 0x0014        | 00244 | 		20                      // 0x14
0xCAF6 | 0x0022        | 00245 | 		34                      // 0x22
0xCAF7 | 0x0041        | 00246 | 		65                      // 0x41
0xCAF8 | 0x007F        | 00247 | 		127                     // 0x7f
0xCAF9 | 0x0040        | 00248 | 		64                      // 0x40
0xCAFA | 0x0040        | 00249 | 		64                      // 0x40
0xCAFB | 0x0040        | 00250 | 		64                      // 0x40
0xCAFC | 0x0040        | 00251 | 		64                      // 0x40
0xCAFD | 0x007F        | 00252 | 		127                     // 0x7f
0xCAFE | 0x0002        | 00253 | 		2                       // 0x2
0xCAFF | 0x000C        | 00254 | 		12                      // 0xc
0xCB00 | 0x0002        | 00255 | 		2                       // 0x2
0xCB01 | 0x007F        | 00256 | 		127                     // 0x7f
0xCB02 | 0x007F        | 00257 | 		127                     // 0x7f
0xCB03 | 0x0004        | 00258 | 		4                       // 0x4
0xCB04 | 0x0008        | 00259 | 		8                       // 0x8
0xCB05 | 0x0010        | 00260 | 		16                      // 0x10
0xCB06 | 0x007F        | 00261 | 		127                     // 0x7f
0xCB07 | 0x003E        | 00262 | 		62                      // 0x3e
0xCB08 | 0x0041        | 00263 | 		65                      // 0x41
0xCB09 | 0x0041        | 00264 | 		65                      // 0x41
0xCB0A | 0x0041        | 00265 | 		65                      // 0x41
0xCB0B | 0x003E        | 00266 | 		62                      // 0x3e
0xCB0C | 0x007F        | 00267 | 		127                     // 0x7f
0xCB0D | 0x0009        | 00268 | 		9                       // 0x9
0xCB0E | 0x0009        | 00269 | 		9                       // 0x9
0xCB0F | 0x0009        | 00270 | 		9                       // 0x9
0xCB10 | 0x0006        | 00271 | 		6                       // 0x6
0xCB11 | 0x003E        | 00272 | 		62                      // 0x3e
0xCB12 | 0x0041        | 00273 | 		65                      // 0x41
0xCB13 | 0x0051        | 00274 | 		81                      // 0x51
0xCB14 | 0x0021        | 00275 | 		33                      // 0x21
0xCB15 | 0x005E        | 00276 | 		94                      // 0x5e
0xCB16 | 0x007F        | 00277 | 		127                     // 0x7f
0xCB17 | 0x0009        | 00278 | 		9                       // 0x9
0xCB18 | 0x0019        | 00279 | 		25                      // 0x19
0xCB19 | 0x0029        | 00280 | 		41                      // 0x29
0xCB1A | 0x0046        | 00281 | 		70                      // 0x46
0xCB1B | 0x0046        | 00282 | 		70                      // 0x46
0xCB1C | 0x0049        | 00283 | 		73                      // 0x49
0xCB1D | 0x0049        | 00284 | 		73                      // 0x49
0xCB1E | 0x0049        | 00285 | 		73                      // 0x49
0xCB1F | 0x0031        | 00286 | 		49                      // 0x31
0xCB20 | 0x0001        | 00287 | 		1                       // 0x1
0xCB21 | 0x0001        | 00288 | 		1                       // 0x1
0xCB22 | 0x007F        | 00289 | 		127                     // 0x7f
0xCB23 | 0x0001        | 00290 | 		1                       // 0x1
0xCB24 | 0x0001        | 00291 | 		1                       // 0x1
0xCB25 | 0x003F        | 00292 | 		63                      // 0x3f
0xCB26 | 0x0040        | 00293 | 		64                      // 0x40
0xCB27 | 0x0040        | 00294 | 		64                      // 0x40
0xCB28 | 0x0040        | 00295 | 		64                      // 0x40
0xCB29 | 0x003F        | 00296 | 		63                      // 0x3f
0xCB2A | 0x001F        | 00297 | 		31                      // 0x1f
0xCB2B | 0x0020        | 00298 | 		32                      // 0x20
0xCB2C | 0x0040        | 00299 | 		64                      // 0x40
0xCB2D | 0x0020        | 00300 | 		32                      // 0x20
0xCB2E | 0x001F        | 00301 | 		31                      // 0x1f
0xCB2F | 0x003F        | 00302 | 		63                      // 0x3f
0xCB30 | 0x0040        | 00303 | 		64                      // 0x40
0xCB31 | 0x0038        | 00304 | 		56                      // 0x38
0xCB32 | 0x0040        | 00305 | 		64                      // 0x40
0xCB33 | 0x003F        | 00306 | 		63                      // 0x3f
0xCB34 | 0x0063        | 00307 | 		99                      // 0x63
0xCB35 | 0x0014        | 00308 | 		20                      // 0x14
0xCB36 | 0x0008        | 00309 | 		8                       // 0x8
0xCB37 | 0x0014        | 00310 | 		20                      // 0x14
0xCB38 | 0x0063        | 00311 | 		99                      // 0x63
0xCB39 | 0x0007        | 00312 | 		7                       // 0x7
0xCB3A | 0x0008        | 00313 | 		8                       // 0x8
0xCB3B | 0x0070        | 00314 | 		112                     // 0x70
0xCB3C | 0x0008        | 00315 | 		8                       // 0x8
0xCB3D | 0x0007        | 00316 | 		7                       // 0x7
0xCB3E | 0x0061        | 00317 | 		97                      // 0x61
0xCB3F | 0x0051        | 00318 | 		81                      // 0x51
0xCB40 | 0x0049        | 00319 | 		73                      // 0x49
0xCB41 | 0x0045        | 00320 | 		69                      // 0x45
0xCB42 | 0x0043        | 00321 | 		67                      // 0x43
0xCB43 | 0x0000        | 00322 | 		0                       // 0x0
0xCB44 | 0x007F        | 00323 | 		127                     // 0x7f
0xCB45 | 0x0041        | 00324 | 		65                      // 0x41
0xCB46 | 0x0041        | 00325 | 		65                      // 0x41
0xCB47 | 0x0000        | 00326 | 		0                       // 0x0
0xCB48 | 0x0002        | 00327 | 		2                       // 0x2
0xCB49 | 0x0004        | 00328 | 		4                       // 0x4
0xCB4A | 0x0008        | 00329 | 		8                       // 0x8
0xCB4B | 0x0010        | 00330 | 		16                      // 0x10
0xCB4C | 0x0020        | 00331 | 		32                      // 0x20
0xCB4D | 0x0000        | 00332 | 		0                       // 0x0
0xCB4E | 0x0041        | 00333 | 		65                      // 0x41
0xCB4F | 0x0041        | 00334 | 		65                      // 0x41
0xCB50 | 0x007F        | 00335 | 		127                     // 0x7f
0xCB51 | 0x0000        | 00336 | 		0                       // 0x0
0xCB52 | 0x0004        | 00337 | 		4                       // 0x4
0xCB53 | 0x0002        | 00338 | 		2                       // 0x2
0xCB54 | 0x0001        | 00339 | 		1                       // 0x1
0xCB55 | 0x0002        | 00340 | 		2                       // 0x2
0xCB56 | 0x0004        | 00341 | 		4                       // 0x4
0xCB57 | 0x0040        | 00342 | 		64                      // 0x40
0xCB58 | 0x0040        | 00343 | 		64                      // 0x40
0xCB59 | 0x0040        | 00344 | 		64                      // 0x40
0xCB5A | 0x0040        | 00345 | 		64                      // 0x40
0xCB5B | 0x0040        | 00346 | 		64                      // 0x40
0xCB5C | 0x0001        | 00347 | 		1                       // 0x1
0xCB5D | 0x0002        | 00348 | 		2                       // 0x2
0xCB5E | 0x0004        | 00349 | 		4                       // 0x4
0xCB5F | 0x0000        | 00350 | 		0                       // 0x0
0xCB60 | 0x0000        | 00351 | 		0                       // 0x0
0xCB61 | 0x0020        | 00352 | 		32                      // 0x20
0xCB62 | 0x0054        | 00353 | 		84                      // 0x54
0xCB63 | 0x0054        | 00354 | 		84                      // 0x54
0xCB64 | 0x0054        | 00355 | 		84                      // 0x54
0xCB65 | 0x0078        | 00356 | 		120                     // 0x78
0xCB66 | 0x007F        | 00357 | 		127                     // 0x7f
0xCB67 | 0x0048        | 00358 | 		72                      // 0x48
0xCB68 | 0x0044        | 00359 | 		68                      // 0x44
0xCB69 | 0x0044        | 00360 | 		68                      // 0x44
0xCB6A | 0x0038        | 00361 | 		56                      // 0x38
0xCB6B | 0x0038        | 00362 | 		56                      // 0x38
0xCB6C | 0x0044        | 00363 | 		68                      // 0x44
0xCB6D | 0x0044        | 00364 | 		68                      // 0x44
0xCB6E | 0x0044        | 00365 | 		68                      // 0x44
0xCB6F | 0x0020        | 00366 | 		32                      // 0x20
0xCB70 | 0x0038        | 00367 | 		56                      // 0x38
0xCB71 | 0x0044        | 00368 | 		68                      // 0x44
0xCB72 | 0x0044        | 00369 | 		68                      // 0x44
0xCB73 | 0x0048        | 00370 | 		72                      // 0x48
0xCB74 | 0x007F        | 00371 | 		127                     // 0x7f
0xCB75 | 0x0038        | 00372 | 		56                      // 0x38
0xCB76 | 0x0054        | 00373 | 		84                      // 0x54
0xCB77 | 0x0054        | 00374 | 		84                      // 0x54
0xCB78 | 0x0054        | 00375 | 		84                      // 0x54
0xCB79 | 0x0018        | 00376 | 		24                      // 0x18
0xCB7A | 0x0008        | 00377 | 		8                       // 0x8
0xCB7B | 0x007E        | 00378 | 		126                     // 0x7e
0xCB7C | 0x0009        | 00379 | 		9                       // 0x9
0xCB7D | 0x0001        | 00380 | 		1                       // 0x1
0xCB7E | 0x0002        | 00381 | 		2                       // 0x2
0xCB7F | 0x0006        | 00382 | 		6                       // 0x6
0xCB80 | 0x0049        | 00383 | 		73                      // 0x49
0xCB81 | 0x0049        | 00384 | 		73                      // 0x49
0xCB82 | 0x0049        | 00385 | 		73                      // 0x49
0xCB83 | 0x003F        | 00386 | 		63                      // 0x3f
0xCB84 | 0x007F        | 00387 | 		127                     // 0x7f
0xCB85 | 0x0008        | 00388 | 		8                       // 0x8
0xCB86 | 0x0004        | 00389 | 		4                       // 0x4
0xCB87 | 0x0004        | 00390 | 		4                       // 0x4
0xCB88 | 0x0078        | 00391 | 		120                     // 0x78
0xCB89 | 0x0000        | 00392 | 		0                       // 0x0
0xCB8A | 0x0044        | 00393 | 		68                      // 0x44
0xCB8B | 0x007D        | 00394 | 		125                     // 0x7d
0xCB8C | 0x0040        | 00395 | 		64                      // 0x40
0xCB8D | 0x0000        | 00396 | 		0                       // 0x0
0xCB8E | 0x0020        | 00397 | 		32                      // 0x20
0xCB8F | 0x0040        | 00398 | 		64                      // 0x40
0xCB90 | 0x0044        | 00399 | 		68                      // 0x44
0xCB91 | 0x003D        | 00400 | 		61                      // 0x3d
0xCB92 | 0x0000        | 00401 | 		0                       // 0x0
0xCB93 | 0x007F        | 00402 | 		127                     // 0x7f
0xCB94 | 0x0010        | 00403 | 		16                      // 0x10
0xCB95 | 0x0028        | 00404 | 		40                      // 0x28
0xCB96 | 0x0044        | 00405 | 		68                      // 0x44
0xCB97 | 0x0000        | 00406 | 		0                       // 0x0
0xCB98 | 0x0000        | 00407 | 		0                       // 0x0
0xCB99 | 0x0041        | 00408 | 		65                      // 0x41
0xCB9A | 0x007F        | 00409 | 		127                     // 0x7f
0xCB9B | 0x0040        | 00410 | 		64                      // 0x40
0xCB9C | 0x0000        | 00411 | 		0                       // 0x0
0xCB9D | 0x007C        | 00412 | 		124                     // 0x7c
0xCB9E | 0x0004        | 00413 | 		4                       // 0x4
0xCB9F | 0x0018        | 00414 | 		24                      // 0x18
0xCBA0 | 0x0004        | 00415 | 		4                       // 0x4
0xCBA1 | 0x007C        | 00416 | 		124                     // 0x7c
0xCBA2 | 0x007C        | 00417 | 		124                     // 0x7c
0xCBA3 | 0x0008        | 00418 | 		8                       // 0x8
0xCBA4 | 0x0004        | 00419 | 		4                       // 0x4
0xCBA5 | 0x0004        | 00420 | 		4                       // 0x4
0xCBA6 | 0x0078        | 00421 | 		120                     // 0x78
0xCBA7 | 0x0038        | 00422 | 		56                      // 0x38
0xCBA8 | 0x0044        | 00423 | 		68                      // 0x44
0xCBA9 | 0x0044        | 00424 | 		68                      // 0x44
0xCBAA | 0x0044        | 00425 | 		68                      // 0x44
0xCBAB | 0x0038        | 00426 | 		56                      // 0x38
0xCBAC | 0x007C        | 00427 | 		124                     // 0x7c
0xCBAD | 0x0014        | 00428 | 		20                      // 0x14
0xCBAE | 0x0014        | 00429 | 		20                      // 0x14
0xCBAF | 0x0014        | 00430 | 		20                      // 0x14
0xCBB0 | 0x0008        | 00431 | 		8                       // 0x8
0xCBB1 | 0x0008        | 00432 | 		8                       // 0x8
0xCBB2 | 0x0014        | 00433 | 		20                      // 0x14
0xCBB3 | 0x0014        | 00434 | 		20                      // 0x14
0xCBB4 | 0x0018        | 00435 | 		24                      // 0x18
0xCBB5 | 0x007C        | 00436 | 		124                     // 0x7c
0xCBB6 | 0x007C        | 00437 | 		124                     // 0x7c
0xCBB7 | 0x0008        | 00438 | 		8                       // 0x8
0xCBB8 | 0x0004        | 00439 | 		4                       // 0x4
0xCBB9 | 0x0004        | 00440 | 		4                       // 0x4
0xCBBA | 0x0008        | 00441 | 		8                       // 0x8
0xCBBB | 0x0048        | 00442 | 		72                      // 0x48
0xCBBC | 0x0054        | 00443 | 		84                      // 0x54
0xCBBD | 0x0054        | 00444 | 		84                      // 0x54
0xCBBE | 0x0054        | 00445 | 		84                      // 0x54
0xCBBF | 0x0020        | 00446 | 		32                      // 0x20
0xCBC0 | 0x0004        | 00447 | 		4                       // 0x4
0xCBC1 | 0x003F        | 00448 | 		63                      // 0x3f
0xCBC2 | 0x0044        | 00449 | 		68                      // 0x44
0xCBC3 | 0x0040        | 00450 | 		64                      // 0x40
0xCBC4 | 0x0020        | 00451 | 		32                      // 0x20
0xCBC5 | 0x003C        | 00452 | 		60                      // 0x3c
0xCBC6 | 0x0040        | 00453 | 		64                      // 0x40
0xCBC7 | 0x0040        | 00454 | 		64                      // 0x40
0xCBC8 | 0x0020        | 00455 | 		32                      // 0x20
0xCBC9 | 0x007C        | 00456 | 		124                     // 0x7c
0xCBCA | 0x001C        | 00457 | 		28                      // 0x1c
0xCBCB | 0x0020        | 00458 | 		32                      // 0x20
0xCBCC | 0x0040        | 00459 | 		64                      // 0x40
0xCBCD | 0x0020        | 00460 | 		32                      // 0x20
0xCBCE | 0x001C        | 00461 | 		28                      // 0x1c
0xCBCF | 0x003C        | 00462 | 		60                      // 0x3c
0xCBD0 | 0x0040        | 00463 | 		64                      // 0x40
0xCBD1 | 0x0030        | 00464 | 		48                      // 0x30
0xCBD2 | 0x0040        | 00465 | 		64                      // 0x40
0xCBD3 | 0x003C        | 00466 | 		60                      // 0x3c
0xCBD4 | 0x0044        | 00467 | 		68                      // 0x44
0xCBD5 | 0x0028        | 00468 | 		40                      // 0x28
0xCBD6 | 0x0010        | 00469 | 		16                      // 0x10
0xCBD7 | 0x0028        | 00470 | 		40                      // 0x28
0xCBD8 | 0x0044        | 00471 | 		68                      // 0x44
0xCBD9 | 0x000C        | 00472 | 		12                      // 0xc
0xCBDA | 0x0050        | 00473 | 		80                      // 0x50
0xCBDB | 0x0050        | 00474 | 		80                      // 0x50
0xCBDC | 0x0050        | 00475 | 		80                      // 0x50
0xCBDD | 0x003C        | 00476 | 		60                      // 0x3c
0xCBDE | 0x0044        | 00477 | 		68                      // 0x44
0xCBDF | 0x0064        | 00478 | 		100                     // 0x64
0xCBE0 | 0x0054        | 00479 | 		84                      // 0x54
0xCBE1 | 0x004C        | 00480 | 		76                      // 0x4c
0xCBE2 | 0x0044        | 00481 | 		68                      // 0x44
0xCBE3 | 0x0000        | 00482 | 		0                       // 0x0
0xCBE4 | 0x0008        | 00483 | 		8                       // 0x8
0xCBE5 | 0x0036        | 00484 | 		54                      // 0x36
0xCBE6 | 0x0041        | 00485 | 		65                      // 0x41
0xCBE7 | 0x0000        | 00486 | 		0                       // 0x0
0xCBE8 | 0x0000        | 00487 | 		0                       // 0x0
0xCBE9 | 0x0000        | 00488 | 		0                       // 0x0
0xCBEA | 0x007F        | 00489 | 		127                     // 0x7f
0xCBEB | 0x0000        | 00490 | 		0                       // 0x0
0xCBEC | 0x0000        | 00491 | 		0                       // 0x0
0xCBED | 0x0000        | 00492 | 		0                       // 0x0
0xCBEE | 0x0041        | 00493 | 		65                      // 0x41
0xCBEF | 0x0036        | 00494 | 		54                      // 0x36
0xCBF0 | 0x0008        | 00495 | 		8                       // 0x8
0xCBF1 | 0x0000        | 00496 | 		0                       // 0x0
0xCBF2 | 0x0002        | 00497 | 		2                       // 0x2
0xCBF3 | 0x0001        | 00498 | 		1                       // 0x1
0xCBF4 | 0x0002        | 00499 | 		2                       // 0x2
0xCBF5 | 0x0004        | 00500 | 		4                       // 0x4
0xCBF6 | 0x0002        | 00501 | 		2                       // 0x2
0xCBF7 | 0x0008        | 00502 | 		8                       // 0x8
0xCBF8 | 0x000C        | 00503 | 		12                      // 0xc
0xCBF9 | 0x000E        | 00504 | 		14                      // 0xe
0xCBFA | 0x000C        | 00505 | 		12                      // 0xc
0xCBFB | 0x0008        | 00506 | 		8                       // 0x8
0xCBFC | 0x0008        | 00507 | 		8                       // 0x8
0xCBFD | 0x0018        | 00508 | 		24                      // 0x18
0xCBFE | 0x0038        | 00509 | 		56                      // 0x38
0xCBFF | 0x0018        | 00510 | 		24                      // 0x18
0xCC00 | 0x0008        | 00511 | 		8                       // 0x8
0xCC01 | 0x0000        | 00512 | 		0                       // 0x0
0xCC02 | 0x000F        | 00513 | 		15                      // 0xf
0xCC03 | 0x0009        | 00514 | 		9                       // 0x9
0xCC04 | 0x0009        | 00515 | 		9                       // 0x9
0xCC05 | 0x000F        | 00516 | 		15                      // 0xf
       |               | 00517 | 
0xCC06 |               | 00518 | sxc__ZZ17OLED_profile_pagejE5text1:     // @_ZZ17OLED_profile_pagejE5text1
0xCC06 | 0x0050        | 00519 | 		80                      // 0x50
0xCC07 | 0x0072        | 00520 | 		114                     // 0x72
0xCC08 | 0x006F        | 00521 | 		111                     // 0x6f
0xCC09 | 0x0066        | 00522 | 		102                     // 0x66
0xCC0A | 0x0069        | 00523 | 		105                     // 0x69
0xCC0B | 0x006C        | 00524 | 		108                     // 0x6c
0xCC0C | 0x0065        | 00525 | 		101                     // 0x65
0xCC0D | 0x0020        | 00526 | 		32                      // 0x20
0xCC0E | 0x0050        | 00527 | 		80                      // 0x50
0xCC0F | 0x0061        | 00528 | 		97                      // 0x61
0xCC10 | 0x0067        | 00529 | 		103                     // 0x67
0xCC11 | 0x0065        | 00530 | 		101                     // 0x65
       |               | 00531 | 
0xCC12 |               | 00532 | sxc__ZZ17OLED_profile_pagejE5text2:     // @_ZZ17OLED_profile_pagejE5text2
0xCC12 | 0x0050        | 00533 | 		80                      // 0x50
0xCC13 | 0x0072        | 00534 | 		114                     // 0x72
0xCC14 | 0x006F        | 00535 | 		111                     // 0x6f
0xCC15 | 0x0066        | 00536 | 		102                     // 0x66
0xCC16 | 0x0069        | 00537 | 		105                     // 0x69
0xCC17 | 0x006C        | 00538 | 		108                     // 0x6c
0xCC18 | 0x0065        | 00539 | 		101                     // 0x65
0xCC19 | 0x0020        | 00540 | 		32                      // 0x20
0xCC1A | 0x0023        | 00541 | 		35                      // 0x23
       |               | 00542 | 
0xCC1B |               | 00543 | sxc__ZZ18OLED_starting_pagevE5text1:    // @_ZZ18OLED_starting_pagevE5text1
0xCC1B | 0x0057        | 00544 | 		87                      // 0x57
0xCC1C | 0x0061        | 00545 | 		97                      // 0x61
0xCC1D | 0x0069        | 00546 | 		105                     // 0x69
0xCC1E | 0x0074        | 00547 | 		116                     // 0x74
0xCC1F | 0x0069        | 00548 | 		105                     // 0x69
0xCC20 | 0x006E        | 00549 | 		110                     // 0x6e
0xCC21 | 0x0067        | 00550 | 		103                     // 0x67
       |               | 00551 | 
0xCC22 |               | 00552 | sxc__ZZ17OLED_end_progressvE4text:      // @_ZZ17OLED_end_progressvE4text
0xCC22 | 0x0043        | 00553 | 		67                      // 0x43
0xCC23 | 0x006F        | 00554 | 		111                     // 0x6f
0xCC24 | 0x006D        | 00555 | 		109                     // 0x6d
0xCC25 | 0x0070        | 00556 | 		112                     // 0x70
0xCC26 | 0x006C        | 00557 | 		108                     // 0x6c
0xCC27 | 0x0065        | 00558 | 		101                     // 0x65
0xCC28 | 0x0074        | 00559 | 		116                     // 0x74
0xCC29 | 0x0065        | 00560 | 		101                     // 0x65
0xCC2A | 0x0021        | 00561 | 		33                      // 0x21
       |               | 00562 | 
0xCC2B |               | 00563 | sxc_.str:                               // @.str
0xCC2B | 0x0054        | 00564 | 		84                      // 0x54
0xCC2C | 0x0068        | 00565 | 		104                     // 0x68
0xCC2D | 0x0065        | 00566 | 		101                     // 0x65
0xCC2E | 0x0072        | 00567 | 		114                     // 0x72
0xCC2F | 0x006D        | 00568 | 		109                     // 0x6d
0xCC30 | 0x006F        | 00569 | 		111                     // 0x6f
0xCC31 | 0x0063        | 00570 | 		99                      // 0x63
0xCC32 | 0x006F        | 00571 | 		111                     // 0x6f
0xCC33 | 0x0075        | 00572 | 		117                     // 0x75
0xCC34 | 0x0070        | 00573 | 		112                     // 0x70
0xCC35 | 0x006C        | 00574 | 		108                     // 0x6c
0xCC36 | 0x0065        | 00575 | 		101                     // 0x65
0xCC37 | 0x003A        | 00576 | 		58                      // 0x3a
0xCC38 | 0x0020        | 00577 | 		32                      // 0x20
0xCC39 | 0x0045        | 00578 | 		69                      // 0x45
0xCC3A | 0x006E        | 00579 | 		110                     // 0x6e
0xCC3B | 0x0074        | 00580 | 		116                     // 0x74
0xCC3C | 0x0065        | 00581 | 		101                     // 0x65
0xCC3D | 0x0072        | 00582 | 		114                     // 0x72
0xCC3E | 0x0065        | 00583 | 		101                     // 0x65
0xCC3F | 0x0064        | 00584 | 		100                     // 0x64
0xCC40 | 0x0020        | 00585 | 		32                      // 0x20
0xCC41 | 0x0046        | 00586 | 		70                      // 0x46
0xCC42 | 0x0061        | 00587 | 		97                      // 0x61
0xCC43 | 0x0075        | 00588 | 		117                     // 0x75
0xCC44 | 0x006C        | 00589 | 		108                     // 0x6c
0xCC45 | 0x0074        | 00590 | 		116                     // 0x74
0xCC46 | 0x0020        | 00591 | 		32                      // 0x20
0xCC47 | 0x0046        | 00592 | 		70                      // 0x46
0xCC48 | 0x0075        | 00593 | 		117                     // 0x75
0xCC49 | 0x006E        | 00594 | 		110                     // 0x6e
0xCC4A | 0x0063        | 00595 | 		99                      // 0x63
0xCC4B | 0x0074        | 00596 | 		116                     // 0x74
0xCC4C | 0x0069        | 00597 | 		105                     // 0x69
0xCC4D | 0x006F        | 00598 | 		111                     // 0x6f
0xCC4E | 0x006E        | 00599 | 		110                     // 0x6e
0xCC4F | 0x000A        | 00600 | 		10                      // 0xa
0xCC50 | 0x0000        | 00601 | 		0                       // 0x0
       |               | 00602 | 
0xCC51 |               | 00603 | sxc_.str1:                              // @.str1
0xCC51 | 0x0054        | 00604 | 		84                      // 0x54
0xCC52 | 0x0068        | 00605 | 		104                     // 0x68
0xCC53 | 0x0065        | 00606 | 		101                     // 0x65
0xCC54 | 0x0072        | 00607 | 		114                     // 0x72
0xCC55 | 0x006D        | 00608 | 		109                     // 0x6d
0xCC56 | 0x006F        | 00609 | 		111                     // 0x6f
0xCC57 | 0x0063        | 00610 | 		99                      // 0x63
0xCC58 | 0x006F        | 00611 | 		111                     // 0x6f
0xCC59 | 0x0075        | 00612 | 		117                     // 0x75
0xCC5A | 0x0070        | 00613 | 		112                     // 0x70
0xCC5B | 0x006C        | 00614 | 		108                     // 0x6c
0xCC5C | 0x0065        | 00615 | 		101                     // 0x65
0xCC5D | 0x003A        | 00616 | 		58                      // 0x3a
0xCC5E | 0x0020        | 00617 | 		32                      // 0x20
0xCC5F | 0x004F        | 00618 | 		79                      // 0x4f
0xCC60 | 0x0070        | 00619 | 		112                     // 0x70
0xCC61 | 0x0065        | 00620 | 		101                     // 0x65
0xCC62 | 0x006E        | 00621 | 		110                     // 0x6e
0xCC63 | 0x0020        | 00622 | 		32                      // 0x20
0xCC64 | 0x0043        | 00623 | 		67                      // 0x43
0xCC65 | 0x0069        | 00624 | 		105                     // 0x69
0xCC66 | 0x0072        | 00625 | 		114                     // 0x72
0xCC67 | 0x0063        | 00626 | 		99                      // 0x63
0xCC68 | 0x0075        | 00627 | 		117                     // 0x75
0xCC69 | 0x0069        | 00628 | 		105                     // 0x69
0xCC6A | 0x0074        | 00629 | 		116                     // 0x74
0xCC6B | 0x0020        | 00630 | 		32                      // 0x20
0xCC6C | 0x0064        | 00631 | 		100                     // 0x64
0xCC6D | 0x0065        | 00632 | 		101                     // 0x65
0xCC6E | 0x0074        | 00633 | 		116                     // 0x74
0xCC6F | 0x0065        | 00634 | 		101                     // 0x65
0xCC70 | 0x0063        | 00635 | 		99                      // 0x63
0xCC71 | 0x0074        | 00636 | 		116                     // 0x74
0xCC72 | 0x0065        | 00637 | 		101                     // 0x65
0xCC73 | 0x0064        | 00638 | 		100                     // 0x64
0xCC74 | 0x000A        | 00639 | 		10                      // 0xa
0xCC75 | 0x0000        | 00640 | 		0                       // 0x0
       |               | 00641 | 
0xCC76 |               | 00642 | sxc_.str4:                              // @.str4
0xCC76 | 0x0054        | 00643 | 		84                      // 0x54
0xCC77 | 0x0068        | 00644 | 		104                     // 0x68
0xCC78 | 0x0065        | 00645 | 		101                     // 0x65
0xCC79 | 0x0072        | 00646 | 		114                     // 0x72
0xCC7A | 0x006D        | 00647 | 		109                     // 0x6d
0xCC7B | 0x006F        | 00648 | 		111                     // 0x6f
0xCC7C | 0x0063        | 00649 | 		99                      // 0x63
0xCC7D | 0x006F        | 00650 | 		111                     // 0x6f
0xCC7E | 0x0075        | 00651 | 		117                     // 0x75
0xCC7F | 0x0070        | 00652 | 		112                     // 0x70
0xCC80 | 0x006C        | 00653 | 		108                     // 0x6c
0xCC81 | 0x0065        | 00654 | 		101                     // 0x65
0xCC82 | 0x0020        | 00655 | 		32                      // 0x20
0xCC83 | 0x0045        | 00656 | 		69                      // 0x45
0xCC84 | 0x0072        | 00657 | 		114                     // 0x72
0xCC85 | 0x0072        | 00658 | 		114                     // 0x72
0xCC86 | 0x006F        | 00659 | 		111                     // 0x6f
0xCC87 | 0x0072        | 00660 | 		114                     // 0x72
0xCC88 | 0x0020        | 00661 | 		32                      // 0x20
0xCC89 | 0x0064        | 00662 | 		100                     // 0x64
0xCC8A | 0x0065        | 00663 | 		101                     // 0x65
0xCC8B | 0x0074        | 00664 | 		116                     // 0x74
0xCC8C | 0x0065        | 00665 | 		101                     // 0x65
0xCC8D | 0x0063        | 00666 | 		99                      // 0x63
0xCC8E | 0x0074        | 00667 | 		116                     // 0x74
0xCC8F | 0x0065        | 00668 | 		101                     // 0x65
0xCC90 | 0x0064        | 00669 | 		100                     // 0x64
0xCC91 | 0x002E        | 00670 | 		46                      // 0x2e
0xCC92 | 0x000A        | 00671 | 		10                      // 0xa
0xCC93 | 0x0000        | 00672 | 		0                       // 0x0
       |               | 00673 | 
0xCC94 |               | 00674 | 	sxc_current_temp: @ = @ + 1 // .lcomm // @current_temp
0xCC95 |               | 00675 | 	sxc_humidity: @ = @ + 1 // .lcomm // @humidity
0xCC96 |               | 00676 | 	sxc_btn_press: @ = @ + 1 // .lcomm // @btn_press
0xCC97 |               | 00677 | sxc_r_encoder:                          // @r_encoder
0xCC97 | 0x0000        | 00678 | 		0                       // 0x0
0xCC98 | 0x0003        | 00679 | 		3                       // 0x3
0xCC99 | 0x0000        | 00680 | 		0                       // 0x0
       |               | 00681 | 
0xCC9A |               | 00682 | sxc_profile_index:                      // @profile_index
0xCC9A | 0x0001        | 00683 | 		1                       // 0x1
       |               | 00684 | 
0xCC9B |               | 00685 | 	sxc_target_temp_index: @ = @ + 1 // .lcomm // @target_temp_index
0xCC9C |               | 00686 | 	sxc_progress: @ = @ + 1 // .lcomm // @progress
0xCC9D |               | 00687 | 	sxc_selected_profile: @ = @ + 180 // .lcomm // @selected_profile
       |               | 00688 | 
0xCD51 |               | 00689 | SXCA_PARSED_CONSTRUCTOR_LIST_START:
0xCD51 |               | 00690 | SXCA_PARSED_CONSTRUCTOR_LIST_END:
         >>>--------->0 Error(s), 0 Warning(s).
