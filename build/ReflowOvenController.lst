ADDR   | VALUES        | LINE  | SOURCE CODE
=================================================================================================
       |               | 00001 | //The following defines were inserted from the command line:
       |      = 0x0001 | 00002 | #define __XINA_CMD__
       |               | 00003 | //end of command line defines
       |               | 00004 | #include "C:/Program Files/SXC/include/sxc-art0\XInC2.asm"

                                 //
                                 // "ReflowOvenController.main"
//============================== //==============================================================
                                 // "ReflowOvenController.main" -> "XInC2.asm"
                                 //

       |               | 00001 | //*************************************************************************************************
       |               | 00002 | //************************ (C) 2001 - 2006, Eleven Engineering Incorporated ***********************
       |               | 00003 | //*************************************************************************************************
       |               | 00004 | //**
       |               | 00005 | //**		Tabs:	This file looks best with tab stops set every 6 spaces.
       |               | 00006 | //**
       |               | 00007 | //*************************************************************************************************
       |               | 00008 | //*************************************************************************************************
       |               | 00009 | //**
       |               | 00010 | //**          File:  XInC2.h
       |               | 00011 | //**       Project:  XInC2 Library
       |               | 00012 | //**       Created:  05 Sep 2006 by Dan Beutel
       |               | 00013 | //**       Revised:  08 Sep 2006 by Dan Beutel
       |               | 00014 | //**
       |               | 00015 | //**   Description:  Constants used for XInC2 Assembly programming.
       |               | 00016 | //**
       |               | 00017 | //** Compatibility:  Requires XInA v4.4 or higher.
       |               | 00018 | //**
       |               | 00019 | //**    Disclaimer:  You may incorporate this sample source code into your program(s) without
       |               | 00020 | //**                 restriction.  This sample source code has been provided "AS IS" and the
       |               | 00021 | //**                 responsibility for its operation is yours.  You are not permitted to
       |               | 00022 | //**                 redistribute this sample source code as "Eleven sample source code" after
       |               | 00023 | //**                 having made changes.  If you are going to re-distribute the source, we require
       |               | 00024 | //**                 that you make it clear in the source that the code was descended from Eleven
       |               | 00025 | //**                 sample source code, but that you have made changes.
       |               | 00026 | //**
       |               | 00027 | //*************************************************************************************************
       |               | 00028 | //************************************************************************************************* 
       |               | 00029 | //=================================================================================================
       |               | 00030 | // Register Set
       |               | 00031 | //=================================================================================================
       |               | 00032 | 
       |      = %0     | 00033 | 		#define	r0				%0
       |      = %1     | 00034 | 		#define	r1				%1
       |      = %2     | 00035 | 		#define	r2				%2
       |      = %3     | 00036 | 		#define	r3				%3
       |      = %4     | 00037 | 		#define	r4				%4
       |      = %5     | 00038 | 		#define	r5				%5
       |      = %6     | 00039 | 		#define	r6				%6
       |      = %7     | 00040 | 		#define	r7				%7
       |      = %7     | 00041 | 		#define	sp				%7
       |               | 00042 | 
       |               | 00043 | //=================================================================================================
       |               | 00044 | // Conditional Branch Tests
       |               | 00045 | //=================================================================================================
       |               | 00046 | 
       |               | 00047 | // 	Test NZVC Bits (Clear or Set)
       |               | 00048 | //		#define	NC				0xB
       |               | 00049 | //		#define	NS				0x3
       |               | 00050 | //		#define	ZC				0xA
       |               | 00051 | //		#define	ZS				0x2
       |               | 00052 | //		#define	VC				0x9
       |               | 00053 | //		#define	VS				0x1
       |               | 00054 | //		#define	CC				0x8
       |               | 00055 | //		#define	CS				0x0
       |               | 00056 | //
       |               | 00057 | //	Comparison
       |               | 00058 | //		#define	EQ				0x2
       |               | 00059 | //		#define	NE				0xA
       |               | 00060 | //
       |               | 00061 | //		#define	LT0				0x3
       |               | 00062 | //		#define	LE0				0x7
       |               | 00063 | //		#define	GE0				0xB
       |               | 00064 | //		#define	GT0				0xF
       |               | 00065 | //
       |               | 00066 | //	Signed Comparison
       |               | 00067 | //		#define	LT				0x5
       |               | 00068 | //		#define	LE				0x6
       |               | 00069 | //		#define	GE				0xD
       |               | 00070 | //		#define	GT				0xE
       |               | 00071 | //
       |               | 00072 | //	Unsigned Comparison
       |               | 00073 | //		#define	ULT				0x0
       |               | 00074 | //		#define	ULE				0x4
       |               | 00075 | //		#define	UGE				0x8
       |               | 00076 | //		#define	UGT				0xC
       |               | 00077 | 
       |               | 00078 | //=================================================================================================
       |               | 00079 | // I/O Peripheral Addresses common to both iopage = 0 and iopage = 1
       |               | 00080 | //=================================================================================================
       |               | 00081 | 
       |               | 00082 | 	// SCU (Supervisory Control Unit)
       |      = 0x0000 | 00083 | 		#define	SCUreg			0x00
       |      = 0x0001 | 00084 | 		#define	SCUpc				0x01
       |      = 0x0002 | 00085 | 		#define	SCUcc				0x02
       |      = 0x0003 | 00086 | 		#define	SCUtime			0x03
       |      = 0x0003 | 00087 | 		#define	SCUpntr			0x03
       |      = 0x0004 | 00088 | 		#define	SCUbkpt			0x04
       |      = 0x0004 | 00089 | 		#define	SCUstop			0x04
       |      = 0x0005 | 00090 | 		#define	SCUwait			0x05
       |      = 0x0005 | 00091 | 		#define	SCUiopageWR			0x05
       |      = 0x0006 | 00092 | 		#define	SCUrsrc			0x06
       |      = 0x0006 | 00093 | 		#define	SCUup				0x06
       |      = 0x0007 | 00094 | 		#define	SCUiopageRD			0x07
       |      = 0x0007 | 00095 | 		#define	SCUdown			0x07
       |               | 00096 | 
       |               | 00097 | 
       |               | 00098 | 	//LFSR0 (Linear Feedback Shift Register)
       |      = 0x0008 | 00099 | 		#define	LFSR0cfg			0x08
       |      = 0x0009 | 00100 | 		#define	LFSR0tapcfg			0x09
       |      = 0x000A | 00101 | 		#define	LFSR0reg			0x0A
       |      = 0x000B | 00102 | 		#define	LFSR0data			0x0B
       |               | 00103 | 
       |               | 00104 | 	//LFSR1 (Linear Feedback Shift Register)
       |      = 0x000C | 00105 | 		#define	LFSR1cfg			0x0C
       |      = 0x000D | 00106 | 		#define	LFSR1tapcfg			0x0D
       |      = 0x000E | 00107 | 		#define	LFSR1reg			0x0E
       |      = 0x000F | 00108 | 		#define	LFSR1data			0x0F
       |               | 00109 | 
       |               | 00110 | 	//VPU (Vector Processing Unit)
       |               | 00111 | 
       |      = 0x0010 | 00112 | 		#define	VPUcfg0			0x10
       |      = 0x0011 | 00113 | 		#define	VPUcfg1			0x11
       |      = 0x0012 | 00114 | 		#define	VPUopAba			0x12
       |      = 0x0013 | 00115 | 		#define	VPUopBba			0x13
       |      = 0x0014 | 00116 | 		#define	VPUopadrmsk			0x14
       |      = 0x0015 | 00117 | 		#define	VPUopA			0x15
       |      = 0x0016 | 00118 | 		#define	VPUopB			0x16
       |      = 0x0017 | 00119 | 		#define	VPUrsba			0x17
       |      = 0x0018 | 00120 | 		#define	VPUrsadrsmk			0x18
       |      = 0x0019 | 00121 | 		#define	VPUrslsw			0x19
       |      = 0x001A | 00122 | 		#define	VPUrsmsw			0x1A
       |      = 0x001B | 00123 | 		#define	VPUrsext			0x1B
       |      = 0x001C | 00124 | 		#define	VPUfilterLength		0x1C
       |               | 00125 | 
       |               | 00126 | 	// SPI0 (Serial Peripheral Interface)
       |      = 0x0034 | 00127 | 		#define	SPI0rx			0x34
       |      = 0x0034 | 00128 | 		#define	SPI0tx			0x34
       |      = 0x0035 | 00129 | 		#define	SPI0cfg			0x35
       |               | 00130 | 
       |               | 00131 | 	// SPI1 (Serial Peripheral Interface)
       |      = 0x0036 | 00132 | 		#define	SPI1rx			0x36
       |      = 0x0036 | 00133 | 		#define	SPI1tx			0x36
       |      = 0x0037 | 00134 | 		#define	SPI1cfg			0x37
       |               | 00135 | 
       |               | 00136 | 	// SFU (Shared Functional Units)
       |      = 0x0038 | 00137 | 		#define	SFUrev			0x38
       |      = 0x0039 | 00138 | 		#define	SFUpack			0x39
       |      = 0x003A | 00139 | 		#define	SFUpop			0x3A
       |      = 0x003B | 00140 | 		#define	SFUls1			0x3B
       |               | 00141 | 
       |               | 00142 | 	// TMRA (TimerA)
       |      = 0x003E | 00143 | 		#define	TMRAcfg			0x3E
       |      = 0x003F | 00144 | 		#define	TMRAcount			0x3F
       |      = 0x0040 | 00145 | 		#define	TMRACCR0			0x40
       |      = 0x0041 | 00146 | 		#define	TMRACCM0cfg			0x41
       |      = 0x0042 | 00147 | 		#define	TMRACCR1			0x42
       |      = 0x0043 | 00148 | 		#define	TMRACCM1cfg			0x43
       |      = 0x0044 | 00149 | 		#define	TMRACCR2			0x44
       |      = 0x0045 | 00150 | 		#define	TMRACCM2cfg			0x45
       |      = 0x0046 | 00151 | 		#define	TMRACCR3			0x46
       |      = 0x0047 | 00152 | 		#define	TMRACCM3cfg			0x47
       |               | 00153 | 
       |               | 00154 | 
       |               | 00155 | 	// GPIO (General Purpose I/O)
       |      = 0x0020 | 00156 |    		#define	GPAin				0x20
       |      = 0x0020 | 00157 | 		#define	GPAout			0x20
       |      = 0x0021 | 00158 | 		#define	GPAcfg			0x21
       |               | 00159 | 
       |      = 0x0022 | 00160 | 		#define	GPBin				0x22
       |      = 0x0022 | 00161 | 		#define	GPBout			0x22
       |      = 0x0023 | 00162 | 		#define	GPBcfg			0x23
       |               | 00163 | 
       |      = 0x0024 | 00164 | 		#define	GPCin				0x24
       |      = 0x0024 | 00165 | 		#define	GPCout			0x24
       |      = 0x0025 | 00166 | 		#define	GPCcfg			0x25
       |               | 00167 | 
       |      = 0x0026 | 00168 | 		#define	GPDin				0x26
       |      = 0x0026 | 00169 | 		#define	GPDout			0x26
       |      = 0x0027 | 00170 | 		#define	GPDcfg			0x27
       |               | 00171 | 
       |      = 0x0028 | 00172 | 		#define	GPEin				0x28
       |      = 0x0028 | 00173 | 		#define	GPEout			0x28
       |      = 0x0029 | 00174 | 		#define	GPEcfg			0x29
       |               | 00175 | 
       |      = 0x002A | 00176 | 		#define	GPFin				0x2A
       |      = 0x002A | 00177 | 		#define	GPFout			0x2A
       |      = 0x002B | 00178 | 		#define	GPFcfg			0x2B
       |               | 00179 | 
       |      = 0x002C | 00180 | 		#define	GPGin				0x2C
       |      = 0x002C | 00181 | 		#define	GPGout			0x2C
       |      = 0x002D | 00182 | 		#define	GPGcfg			0x2D
       |               | 00183 | 
       |      = 0x002E | 00184 | 		#define	GPHin				0x2E
       |      = 0x002E | 00185 | 		#define	GPHout			0x2E
       |      = 0x002F | 00186 | 		#define	GPHcfg			0x2F
       |               | 00187 | 
       |      = 0x0030 | 00188 | 		#define	GPIin				0x30
       |      = 0x0030 | 00189 | 		#define	GPIout			0x30
       |      = 0x0031 | 00190 | 		#define	GPIcfg			0x31
       |               | 00191 | 
       |      = 0x0032 | 00192 | 		#define	GPJin				0x32
       |      = 0x0032 | 00193 | 		#define	GPJout			0x32
       |      = 0x0033 | 00194 | 		#define	GPJcfg			0x33
       |               | 00195 | 
       |               | 00196 | 
       |               | 00197 | //=================================================================================================
       |               | 00198 | // I/O Peripheral Addresses for iopage = 0
       |               | 00199 | //=================================================================================================
       |               | 00200 | 
       |               | 00201 | 	// TMRB (TimerB)
       |      = 0x0048 | 00202 | 		#define	TMRBcfg			0x48
       |      = 0x0049 | 00203 | 		#define	TMRBcount			0x49
       |      = 0x004A | 00204 | 		#define	TMRBCCR0			0x4A
       |      = 0x004B | 00205 | 		#define	TMRBCCM0cfg			0x4B
       |      = 0x004C | 00206 | 		#define	TMRBCCR1			0x4C
       |      = 0x004D | 00207 | 		#define	TMRBCCM1cfg			0x4D
       |               | 00208 | 
       |               | 00209 | 
       |               | 00210 | 
       |               | 00211 | 	// XInC1 BBU names for ease of use with XInC1 code
       |      = 0x0058 | 00212 | 		#define	BBUcfg			0x58
       |      = 0x0058 | 00213 | 		#define	BBUstatus			0x58
       |      = 0x005A | 00214 | 		#define	BBUtx				0x5A
       |      = 0x005A | 00215 | 		#define	BBUrx				0x5A
       |      = 0x005B | 00216 | 		#define	BBUbrg			0x5B
       |      = 0x005C | 00217 | 		#define	BBUtime			0x5C
       |      = 0x005D | 00218 | 		#define	BBUrx4			0x5D
       |      = 0x005E | 00219 | 		#define	BBUrx6			0x5E
       |      = 0x005F | 00220 | 		#define	BBUstart			0x5F
       |               | 00221 | 
       |               | 00222 | 
       |               | 00223 | 	// BBU0
       |      = 0x0058 | 00224 | 		#define	BBU0cfg0			0x58
       |      = 0x0059 | 00225 | 		#define	BBU0cfg1 			0x59
       |      = 0x005A | 00226 | 		#define	BBU0tx			0x5A
       |      = 0x005A | 00227 | 		#define	BBU0rx			0x5A
       |      = 0x005B | 00228 | 		#define	BBU0brg			0x5B
       |      = 0x005C | 00229 | 		#define	BBU0time			0x5C
       |      = 0x005D | 00230 | 		#define	BBU0rx4			0x5D
       |      = 0x005E | 00231 | 		#define	BBU0rx6			0x5E
       |      = 0x005F | 00232 | 		#define	BBU0start			0x5F
       |               | 00233 | 
       |               | 00234 | 	// BBU1
       |      = 0x0060 | 00235 | 		#define	BBU1cfg0			0x60
       |      = 0x0061 | 00236 | 		#define	BBU1cfg1 			0x61
       |      = 0x0062 | 00237 | 		#define	BBU1tx			0x62
       |      = 0x0062 | 00238 | 		#define	BBU1rx			0x62
       |      = 0x0063 | 00239 | 		#define	BBU1brg			0x63
       |      = 0x0064 | 00240 | 		#define	BBU1time			0x64
       |      = 0x0065 | 00241 | 		#define	BBU1flow			0x65
       |      = 0x0065 | 00242 | 		#define	BBU1rx4			0x65
       |      = 0x0067 | 00243 | 		#define	BBU1start			0x67
       |               | 00244 | 
       |               | 00245 | 	// DASI (Digital Audio Serial Interface)
       |      = 0x0068 | 00246 | 		#define	DASIconfig0			0x68
       |      = 0x0069 | 00247 | 		#define	DASIconfig1			0x69
       |      = 0x006A | 00248 | 		#define	DASIconfig2			0x6A
       |      = 0x006B | 00249 | 		#define	DASIstatus0			0x6B
       |      = 0x006C | 00250 | 		#define	DASIstatus1			0x6C
       |      = 0x006D | 00251 | 		#define	DASIstatus2			0x6D
       |               | 00252 | 
       |      = 0x006B | 00253 | 	       #define    DASIrx0         	   	0x6B
       |      = 0x006C | 00254 | 	       #define    DASIrx1         	   	0x6C
       |      = 0x006D | 00255 | 	       #define    DASIrx2         	   	0x6D
       |      = 0x006B | 00256 | 	       #define    DASItx0            	0x6B
       |      = 0x006C | 00257 | 	       #define    DASItx1            	0x6C
       |      = 0x006D | 00258 | 	       #define    DASItx2            	0x6D
       |      = 0x006E | 00259 | 	       #define	DASIcount0			0x6E
       |      = 0x006F | 00260 | 	       #define	DASIcount1			0x6F
       |               | 00261 | 
       |               | 00262 | 
       |               | 00263 | 
       |               | 00264 | 	// SCX (Supervisory Control Extensions)
       |      = 0x0070 | 00265 | 		#define	SCXioCfgP			0x70
       |      = 0x0071 | 00266 | 		#define	SCXioCfgD			0x71
       |               | 00267 | 
       |      = 0x0072 | 00268 | 		#define	SCXclkCfg			0x72
       |      = 0x0073 | 00269 | 		#define	SCXaltCfg			0x73
       |      = 0x0074 | 00270 | 		#define	SCXPLLCfg0			0x74
       |      = 0x0075 | 00271 | 		#define	SCXPLLCfg1			0x75
       |      = 0x0076 | 00272 | 		#define	SCXmemcol			0x76
       |      = 0x0077 | 00273 | 		#define	SCXcount			0x77
       |               | 00274 | 
       |               | 00275 | 	// SMU (Sleep Mode Unit)
       |      = 0x0078 | 00276 | 		#define	SMUcfg0			0x78
       |      = 0x0079 | 00277 | 		#define	SMUcfg1			0x79
       |               | 00278 | 
       |               | 00279 | 	//ADC
       |      = 0x007D | 00280 | 	     #define      ADCcfg0			0x7D
       |      = 0x007E | 00281 | 	     #define      ADCcfg1			0x7E
       |      = 0x007F | 00282 | 	     #define      ADCdata			0x7F
       |               | 00283 | 
       |               | 00284 | //=================================================================================================
       |               | 00285 | // I/O Peripheral Addresses for iopage = 1
       |               | 00286 | //=================================================================================================
       |               | 00287 | 
       |               | 00288 | 	// Quant0 (ADPCM Difference Quantizer)
       |      = 0x0048 | 00289 | 		#define	Quant0cfg			0x48
       |      = 0x0049 | 00290 | 		#define	Quant0pred			0x49
       |      = 0x0049 | 00291 | 		#define	Quant0dec			0x49
       |      = 0x004A | 00292 | 		#define	Quant0step			0x4A
       |      = 0x004A | 00293 | 		#define	Quant0delta			0x4A
       |      = 0x004B | 00294 | 		#define	Quant0samp			0x4B
       |               | 00295 | 
       |               | 00296 | 	// Quant1 (ADPCM Difference Quantizer)
       |      = 0x004C | 00297 | 		#define	Quant1cfg			0x4C
       |      = 0x004D | 00298 | 		#define	Quant1pred			0x4D
       |      = 0x004D | 00299 | 		#define	Quant1dec			0x4D
       |      = 0x004E | 00300 | 		#define	Quant1step			0x4E
       |      = 0x004E | 00301 | 		#define	Quant1delta			0x4E
       |      = 0x004F | 00302 | 		#define	Quant1samp			0x4F
       |               | 00303 | 
       |               | 00304 | 	// Quant2 (ADPCM Difference Quantizer)
       |      = 0x0050 | 00305 | 		#define	Quant2cfg			0x50
       |      = 0x0051 | 00306 | 		#define	Quant2pred			0x51
       |      = 0x0051 | 00307 | 		#define	Quant2dec			0x51
       |      = 0x0052 | 00308 | 		#define	Quant2step			0x52
       |      = 0x0052 | 00309 | 		#define	Quant2delta			0x52
       |      = 0x0053 | 00310 | 		#define	Quant2samp			0x53
       |               | 00311 | 
       |               | 00312 | 	// Quant3 (ADPCM Difference Quantizer)
       |      = 0x0054 | 00313 | 		#define	Quant3cfg			0x54
       |      = 0x0055 | 00314 | 		#define	Quant3pred			0x55
       |      = 0x0055 | 00315 | 		#define	Quant3dec			0x55
       |      = 0x0056 | 00316 | 		#define	Quant3step			0x56
       |      = 0x0056 | 00317 | 		#define	Quant3delta			0x56
       |      = 0x0057 | 00318 | 		#define	Quant3samp			0x57
       |               | 00319 | 
       |               | 00320 | 	// InvQuant0 (ADPCM Inverse Difference Quantizer)
       |      = 0x0058 | 00321 | 		#define	InvQuant0cfg		0x58
       |      = 0x0059 | 00322 | 		#define	InvQuant0delta		0x59
       |      = 0x0059 | 00323 | 		#define	InvQuant0vpdiff		0x59
       |      = 0x005A | 00324 | 		#define	InvQuant0step		0x5A
       |               | 00325 | 
       |               | 00326 | 	// InvQuant1 (ADPCM Inverse Difference Quantizer)
       |      = 0x005C | 00327 | 		#define	InvQuant1cfg		0x5C
       |      = 0x005D | 00328 | 		#define	InvQuant1delta		0x5D
       |      = 0x005D | 00329 | 		#define	InvQuant1vpdiff		0x5D
       |      = 0x005E | 00330 | 		#define	InvQuant1step		0x5E
       |               | 00331 | 
       |               | 00332 | 	// InvQuant2 (ADPCM Inverse Difference Quantizer)
       |      = 0x0060 | 00333 | 		#define	InvQuant2cfg		0x60
       |      = 0x0061 | 00334 | 		#define	InvQuant2delta		0x61
       |      = 0x0061 | 00335 | 		#define	InvQuant2vpdiff		0x61
       |      = 0x0062 | 00336 | 		#define	InvQuant2step		0x62
       |               | 00337 | 
       |               | 00338 | 	// InvQuant3 (ADPCM Inverse Difference Quantizer)
       |      = 0x0064 | 00339 | 		#define	InvQuant3cfg		0x64
       |      = 0x0065 | 00340 | 		#define	InvQuant3delta		0x65
       |      = 0x0065 | 00341 | 		#define	InvQuant3vpdiff		0x65
       |      = 0x0066 | 00342 | 		#define	InvQuant3step		0x66
       |               | 00343 | 
       |               | 00344 | 	// Accum0 (Accumulator)
       |      = 0x0068 | 00345 | 		#define	Accum0cfg			0x68
       |      = 0x0069 | 00346 | 		#define	Accum0high			0x69
       |      = 0x006A | 00347 | 		#define	Accum0low			0x6A
       |      = 0x006B | 00348 | 		#define	Accum0addsubhigh		0x6B
       |      = 0x006C | 00349 | 		#define	Accum0addlow		0x6C
       |      = 0x006D | 00350 | 		#define	Accum0sublow		0x6D
       |               | 00351 | 
       |               | 00352 | 	// Accum1 (Accumulator)
       |      = 0x006E | 00353 | 		#define	Accum1cfg			0x6E
       |      = 0x006F | 00354 | 		#define	Accum1high			0x6F
       |      = 0x0070 | 00355 | 		#define	Accum1low			0x70
       |      = 0x0071 | 00356 | 		#define	Accum1addsubhigh		0x71
       |      = 0x0072 | 00357 | 		#define	Accum1addlow		0x72
       |      = 0x0073 | 00358 | 		#define	Accum1sublow		0x73
       |               | 00359 | 
       |               | 00360 | 
       |               | 00361 | 
       |               | 00362 | //ADC Configuration
       |      = 0x000F | 00363 | 		#define 	ADC_ENABLE			15
       |      = 0x000C | 00364 | 		#define 	ADC_CLK_DIV			12
       |      = 0x0009 | 00365 | 		#define 	ADC_START			9
       |      = 0x0000 | 00366 | 		#define	MUX_ENABLE			0
       |               | 00367 | 
       |               | 00368 | //configuration0
       |      = 0x000F | 00369 | 		#define	clrA		15	//clear accumuluator(WRITE ONLY)
       |      = 0x000E | 00370 | 		#define	clraaOPB	14	//USE FOR VECTOR MAC clear OPBa
       |      = 0x000D | 00371 | 		#define	addnsubCfg	13	//add/subtract mode
       |      = 0x000C | 00372 | 		#define	RSh		12	//result shift config
       |      = 0x000B | 00373 | 		#define	Rinc		11	//increment Result base address
       |      = 0x000A | 00374 | 		#define	Binc		10	//increment OPB base address
       |      = 0x0009 | 00375 | 		#define	ADec		9	//decimation mode
       |      = 0x0008 | 00376 | 		#define	Ainc		8	//increment OPA base address
       |      = 0x0007 | 00377 | 		#define	ACcfg		7	//accumulaor source config
       |      = 0x0006 | 00378 | 		#define	aB		6	//adder operandB config
       |      = 0x0005 | 00379 | 		#define	aA		5	//adder operandA config
       |      = 0x0003 | 00380 | 		#define	DFW		3	//data field to write
       |      = 0x0002 | 00381 | 		#define	Rdest		2	//result memory destination
       |      = 0x0000 | 00382 | 		#define	OPsrc		0	//operand source configuration
       |               | 00383 | 
       |               | 00384 | //configuration1
       |      = 0x0007 | 00385 | 		#define	Pipe		7	//piple line enable
       |      = 0x0005 | 00386 | 		#define	RS		5	//Result saturation
       |      = 0x0004 | 00387 | 		#define	RR		4	//result rounding
       |      = 0x0003 | 00388 | 		#define	AddAlign	3	//configure alignemnt of operands for add operation
       |      = 0x0002 | 00389 | 		#define	MS		2	//multiplier shift
       |      = 0x0001 | 00390 | 		#define	Btyp		1	//operand B type
       |      = 0x0000 | 00391 | 		#define	Atyp		0	//operand A type
       |               | 00392 | //Timer configuration
       |               | 00393 | 
       |      = 0x18BB | 00394 | #define 	XPD_EchoString_ROM         	0x18BB
       |               | 00395 |  //=================================================================================================
       |               | 00396 |  // Boolean Logic
       |               | 00397 |  //=================================================================================================
       |               | 00398 | 
       |      = 0x0001 | 00399 | 		#define	true				1
       |      = 0x0000 | 00400 |  		#define	false				0
       |               | 00401 | 
       |               | 00402 |  //=================================================================================================
       |               | 00403 |  // Hardware Semaphores
       |               | 00404 |  //=================================================================================================
       |               | 00405 | 
       |      = 0x0001 | 00406 |   		#define	kHardwareSemaphore0	1 << 0
       |      = 0x0002 | 00407 |  		#define	kHardwareSemaphore1	1 << 1
       |      = 0x0004 | 00408 | 		#define	kHardwareSemaphore2	1 << 2
       |      = 0x0008 | 00409 |  		#define	kHardwareSemaphore3	1 << 3
       |      = 0x0010 | 00410 |  		#define	kHardwareSemaphore4	1 << 4
       |      = 0x0020 | 00411 |  		#define	kHardwareSemaphore5	1 << 5
       |      = 0x0040 | 00412 | 		#define	kHardwareSemaphore6	1 << 6
       |      = 0x0080 | 00413 |  		#define	kHardwareSemaphore7	1 << 7
       |      = 0x0100 | 00414 |  		#define	kHardwareSemaphore8	1 << 8
       |      = 0x0200 | 00415 |  		#define	kHardwareSemaphore9	1 << 9
       |      = 0x0400 | 00416 |  		#define	kHardwareSemaphore10	1 << 10
       |      = 0x0800 | 00417 |  		#define	kHardwareSemaphore11	1 << 11
       |      = 0x1000 | 00418 |  		#define	kHardwareSemaphore12	1 << 12
       |      = 0x2000 | 00419 |  		#define	kHardwareSemaphore13	1 << 13
       |      = 0x4000 | 00420 |  		#define	kHardwareSemaphore14	1 << 14
       |      = 0x8000 | 00421 | 		#define	kHardwareSemaphore15	1 << 15
       |               | 00422 | 
       |               | 00423 | //*****************************************************************************
       |               | 00424 | //*****************************************************************************
       |               | 00425 | //**  XInC2 Mask ROM Data
       |               | 00426 | //*****************************************************************************
       |               | 00427 | //*****************************************************************************
       |               | 00428 | 
       |      = 0x00D6 | 00429 | 		#define	table_bintohex				0x00D6
       |               | 00430 | 			//"0123456789ABCDEF"
       |               | 00431 | 		
       |               | 00432 | 		
       |      = 0x2000 | 00433 | 		#define	BitShiftLeftByXTableROM			0x2000
       |               | 00434 | 			//0b1111111111111111
       |               | 00435 | 			//0b1111111111111110
       |               | 00436 | 			//0b1111111111111100
       |               | 00437 | 			//0b1111111111111000
       |               | 00438 | 			//0b1111111111110000
       |               | 00439 | 			//0b1111111111100000
       |               | 00440 | 			//0b1111111111000000
       |               | 00441 | 			//0b1111111110000000
       |               | 00442 | 			//0b1111111100000000
       |               | 00443 | 			//0b1111111000000000
       |               | 00444 | 			//0b1111110000000000
       |               | 00445 | 			//0b1111100000000000
       |               | 00446 | 			//0b1111000000000000
       |               | 00447 | 			//0b1110000000000000
       |               | 00448 | 			//0b1100000000000000
       |               | 00449 | 			//0b1000000000000000
       |               | 00450 | 		
       |               | 00451 | 		
       |      = 0x2010 | 00452 | 		#define	BitShiftLeftBy16MinusXTableROM	0x2010
       |               | 00453 | 			//0b0000000000000000
       |               | 00454 | 			//0b1000000000000000
       |               | 00455 | 			//0b1100000000000000
       |               | 00456 | 			//0b1110000000000000
       |               | 00457 | 			//0b1111000000000000
       |               | 00458 | 			//0b1111100000000000
       |               | 00459 | 			//0b1111110000000000
       |               | 00460 | 			//0b1111111000000000
       |               | 00461 | 			//0b1111111100000000
       |               | 00462 | 			//0b1111111110000000
       |               | 00463 | 			//0b1111111111000000
       |               | 00464 | 			//0b1111111111100000
       |               | 00465 | 			//0b1111111111110000
       |               | 00466 | 			//0b1111111111111000
       |               | 00467 | 			//0b1111111111111100
       |               | 00468 | 			//0b1111111111111110
       |               | 00469 | 		
       |               | 00470 | 		
       |      = 0x2020 | 00471 | 		#define	BitShiftRightByXTableROM		0x2020
       |               | 00472 | 			//0b1111111111111111
       |               | 00473 | 			//0b0111111111111111
       |               | 00474 | 			//0b0011111111111111
       |               | 00475 | 			//0b0001111111111111
       |               | 00476 | 			//0b0000111111111111
       |               | 00477 | 			//0b0000011111111111
       |               | 00478 | 			//0b0000001111111111
       |               | 00479 | 			//0b0000000111111111
       |               | 00480 | 			//0b0000000011111111
       |               | 00481 | 			//0b0000000001111111
       |               | 00482 | 			//0b0000000000111111
       |               | 00483 | 			//0b0000000000011111
       |               | 00484 | 			//0b0000000000001111
       |               | 00485 | 			//0b0000000000000111
       |               | 00486 | 			//0b0000000000000011
       |               | 00487 | 			//0b0000000000000001
       |               | 00488 | 		
       |               | 00489 | 		
       |      = 0x2030 | 00490 | 		#define	BitShiftRightBy16MinusXTableROM	0x2030
       |               | 00491 | 			//0b0000000000000000
       |               | 00492 | 			//0b0000000000000001
       |               | 00493 | 			//0b0000000000000011
       |               | 00494 | 			//0b0000000000000111
       |               | 00495 | 			//0b0000000000001111
       |               | 00496 | 			//0b0000000000011111
       |               | 00497 | 			//0b0000000000111111
       |               | 00498 | 			//0b0000000001111111
       |               | 00499 | 			//0b0000000011111111
       |               | 00500 | 			//0b0000000111111111
       |               | 00501 | 			//0b0000001111111111
       |               | 00502 | 			//0b0000011111111111
       |               | 00503 | 			//0b0000111111111111
       |               | 00504 | 			//0b0001111111111111
       |               | 00505 | 			//0b0011111111111111
       |               | 00506 | 			//0b0111111111111111
       |               | 00507 | 		
       |               | 00508 | 		
       |               | 00509 | 	// Useful Messages for use with XPD_EchoString in Mask ROM
       |               | 00510 | 	
       |      = 0x00E6 | 00511 | 		#define	MSG_HEX_PREFIX		0x00E6
       |               | 00512 | 			//"0x", EOS
       |               | 00513 | 			
       |      = 0x00E9 | 00514 | 		#define	MSG_COMMA			0x00E9
       |               | 00515 | 			//", ", EOS
       |               | 00516 | 			
       |      = 0x00EC | 00517 | 		#define	MSG_NEWLINE			0x00EC
       |               | 00518 | 			//CR, LF, EOS
       |               | 00519 | 			
       |      = 0x00EF | 00520 | 		#define	MSG_SPACE			0x00EF
       |               | 00521 | 			//" ", EOS
       |               | 00522 | 
       |               | 00523 | //*****************************************************************************
       |               | 00524 | //*****************************************************************************
       |               | 00525 | //**  XInC2 Mask ROM Routines
       |               | 00526 | //*****************************************************************************
       |               | 00527 | //*****************************************************************************
       |               | 00528 | 
       |               | 00529 | 		//=============================================================================
       |               | 00530 | 		// Input Params:	None
       |               | 00531 | 		// Output Params:	None
       |               | 00532 | 		//-----------------------------------------------------------------------------
       |               | 00533 | 		// Description:	Switches to SIMD mode and enters HardReset.  Can be called
       |               | 00534 | 		//			safely from any thread.
       |               | 00535 | 		//
       |               | 00536 | 		//			Does not return.
       |               | 00537 | 		//=============================================================================
       |      = 0x0002 | 00538 | 		#define	SoftReset			0x0002
       |               | 00539 | 		
       |               | 00540 | 		
       |               | 00541 | 		//=============================================================================
       |               | 00542 | 		// Input Params:	r0 = 16-bit Termination Code
       |               | 00543 | 		// Output Params:	None
       |               | 00544 | 		//-----------------------------------------------------------------------------
       |               | 00545 | 		// Description:	Stops all threads, echos the termination code to the XPD
       |               | 00546 | 		//			module once formatted in hexadecimal, and then goes into an
       |               | 00547 | 		//			infinite loop echoing the termination code to the SPI0 bus.
       |               | 00548 | 		//
       |               | 00549 | 		//			This may be called by the boot loader upon a failed boot and
       |               | 00550 | 		//			can be safely called by user code from any thread to signify
       |               | 00551 | 		//			a fatal error condition. 
       |               | 00552 | 		//
       |               | 00553 | 		//			Does not return.
       |               | 00554 | 		//=============================================================================
       |      = 0x0006 | 00555 | 		#define	ShowTerminationCode	0x0006
       |               | 00556 | 		
       |               | 00557 | 		//=============================================================================
       |               | 00558 | 		// Input Params:	Inline configuration word
       |               | 00559 | 		// Output Params:	None
       |               | 00560 | 		//-----------------------------------------------------------------------------
       |               | 00561 | 		// Description:	Writes the current RAM image to the EEPROM.
       |               | 00562 | 		//
       |               | 00563 | 		//			Does not return.
       |               | 00564 | 		//=============================================================================
       |      = 0x0014 | 00565 | 		#define	ProgramSPIEEPROM		0x0014
       |               | 00566 | 
       |               | 00567 | 		//=============================================================================
       |               | 00568 | 		// Input Params:	r1 = ASCII Character to echo
       |               | 00569 | 		//			r6 = Return Address
       |               | 00570 | 		// Output Params:	r0 = Garbage
       |               | 00571 | 		//			r4 = Garbage
       |               | 00572 | 		//			r5 = Garbage
       |               | 00573 | 		//			r6 = Garbage
       |               | 00574 | 		//-----------------------------------------------------------------------------
       |               | 00575 | 		// Description:	Echos an ASCII character to the terminal.
       |               | 00576 | 		//=============================================================================
       |      = 0x1800 | 00577 | 		#define 	XPD_MiniEcho           	0x1800
       |      = 0x1808 | 00578 | 		#define 	XPD_MiniEcho_RW        		0x1808
       |               | 00579 | 
       |               | 00580 | 		//=============================================================================
       |               | 00581 | 		// Input Params:	r1 = Numerator (Unsigned 16-bit Integer)
       |               | 00582 | 		//			r2 = Divisor (Unsigned 16-bit Integer)
       |               | 00583 | 		//			r6 = Return Address
       |               | 00584 | 		// Output Params:	r1 = Result
       |               | 00585 | 		//			r2 = Remainder
       |               | 00586 | 		//			r6 = GARBAGE
       |               | 00587 | 		//-----------------------------------------------------------------------------
       |               | 00588 | 		// Description:	Performs the unsigned integer division of one 16-Bit unsigned
       |               | 00589 | 		//			integer by another 16-bit unsinged integer.
       |               | 00590 | 		//
       |               | 00591 | 		//			Note:  x/0 is treated as x/1 to prevent an infinite loop.
       |               | 00592 | 		//
       |               | 00593 | 		// 			There is some optimization in the register usage to be done
       |               | 00594 | 		//			but this routine is compatible with the old UnsignedDivide
       |               | 00595 | 		//			routine.  This version has some speed optimizations over the
       |               | 00596 | 		//			previous version.
       |               | 00597 | 		//=============================================================================
       |      = 0x1816 | 00598 | 		#define 	UnsignedDivide         	0x1816
       |               | 00599 | 
       |               | 00600 | 
       |               | 00601 | 		//=============================================================================
       |               | 00602 | 		// Input Params:  r6 = Return Address
       |               | 00603 | 		// Output Params: r1 = Configuration Word
       |               | 00604 | 		//			r6 = GARBAGE
       |               | 00605 | 		//-----------------------------------------------------------------------------
       |               | 00606 | 		// Description:	Reads config and status data from the MAX3100 SPI-UART
       |               | 00607 | 		//			Converter chip on the XPD Module.  Can be used to determine
       |               | 00608 | 		//			the status of the transmit and receive buffers by checking
       |               | 00609 | 		//			the transmit and receive bits.
       |               | 00610 | 		//=============================================================================
       |      = 0x185E | 00611 | 		#define	XPD_ReadConfigWord	0x185E
       |               | 00612 | 		
       |               | 00613 | 		
       |               | 00614 | 		//=============================================================================
       |               | 00615 | 		// Input Params:	r1 = The byte to write
       |               | 00616 | 		//			r6 = Return Address
       |               | 00617 | 		// Output Params:	r6 = GARBAGE
       |               | 00618 | 		//-----------------------------------------------------------------------------
       |               | 00619 | 		// Description:	Used to shift a data byte out to the SPI-UART.  The data byte
       |               | 00620 | 		//			shifted in is discarded.  The data is always in the LSB of
       |               | 00621 | 		//			the word.
       |               | 00622 | 		//=============================================================================
       |      = 0x1867 | 00623 | 		#define 	XPD_WriteByte          	0x1867
       |               | 00624 | 		
       |               | 00625 | 		
       |               | 00626 | 		//=============================================================================
       |               | 00627 | 		// Input Params:	r6 = Return Address
       |               | 00628 | 		// Output Params:	r1 = The byte read from the SPI-UART
       |               | 00629 | 		//			r6 = GARBAGE
       |               | 00630 | 		//-----------------------------------------------------------------------------
       |               | 00631 | 		// Description:	Used to shift a data byte in from the SPI-UART.  A zero byte
       |               | 00632 | 		//			is shifted out.  This subroutine does not return until a byte
       |               | 00633 | 		//			has been received.  The data is always in the LSB of the
       |               | 00634 | 		//			word.
       |               | 00635 | 		//=============================================================================
       |      = 0x1878 | 00636 | 		#define 	XPD_ReadByte           	0x1878
       |               | 00637 | 		
       |               | 00638 | 		
       |               | 00639 | 		//=============================================================================
       |               | 00640 | 		// Input Params:	r1 = The maximum number of read attempts
       |               | 00641 | 		//			r6 = Return Address
       |               | 00642 | 		// Output Params:	r1 = The byte read from the SPI-UART
       |               | 00643 | 		//			r6 = GARBAGE
       |               | 00644 | 		//-----------------------------------------------------------------------------
       |               | 00645 | 		// Description:	Used to read a data byte from the SPI-UART.  A zero byte is
       |               | 00646 | 		//			shifted out.  This subroutine does not return until a byte
       |               | 00647 | 		//			has been received or the maximum number of attempts has been
       |               | 00648 | 		//			reached.  The data is always in the LSB of the word.
       |               | 00649 | 		//=============================================================================
       |      = 0x1884 | 00650 | 		#define 	XPD_ReadByteWithTimeout	0x1884
       |               | 00651 | 		
       |               | 00652 | 		
       |               | 00653 | 		//=============================================================================
       |               | 00654 | 		// Input Params:	r1 = The byte to write
       |               | 00655 | 		//			r6 = Return Address
       |               | 00656 | 		// Output Params:	r1 = The byte read back
       |               | 00657 | 		//			r6 = GARBAGE
       |               | 00658 | 		//-----------------------------------------------------------------------------
       |               | 00659 | 		// Description:	Used to shift out a data byte to the SPI-UART and to shift
       |               | 00660 | 		//			back in another byte from the SPI-UART.  The data is always
       |               | 00661 | 		//			in the LSB of the word.
       |               | 00662 | 		//=============================================================================
       |      = 0x1898 | 00663 | 		#define 	XPD_ReadWriteByte      	0x1898
       |               | 00664 | 		
       |               | 00665 | 		
       |               | 00666 | 		//=============================================================================
       |               | 00667 | 		// Input Params:	r1 = 16-bit word to write to the SPI-UART
       |               | 00668 | 		//			r6 = Return Address
       |               | 00669 | 		// Output Params:	r1 = 16-bit word read back from the SPI-UART
       |               | 00670 | 		//			r6 = GARBAGE
       |               | 00671 | 		//-----------------------------------------------------------------------------
       |               | 00672 | 		// Description:	Used to shift out the word in r1 to the SPI-UART and to
       |               | 00673 | 		//			read back a word into r1.  The MSB of the word is a control
       |               | 00674 | 		//			byte and the LSB is a data byte.
       |               | 00675 | 		//=============================================================================
       |      = 0x18A9 | 00676 | 		#define 	XPD_ShiftInOut         	0x18A9
       |               | 00677 | 		
       |               | 00678 | 		
       |               | 00679 | 		//=============================================================================
       |               | 00680 | 		// Input Params:	r1 = Pointer to a Null Terminated String
       |               | 00681 | 		//			r6 = Return Address
       |               | 00682 | 		// Output Params:	r6 = GARBAGE
       |               | 00683 | 		//-----------------------------------------------------------------------------
       |               | 00684 | 		// Description:	Used to echo ASCII Strings to a computer terminal for
       |               | 00685 | 		//			debugging.  Newlines and other control characters can be
       |               | 00686 | 		//			embedded in the string.  All strings must be
       |               | 00687 | 		//			Null-terminated with the End-Of-String character (EOS).
       |               | 00688 | 		//=============================================================================
       |      = 0x18BB | 00689 | 		#define 	XPD_EchoString         	0x18BB
       |               | 00690 | 		
       |               | 00691 | 		
       |               | 00692 | 		//=============================================================================
       |               | 00693 | 		// Input Params:	r1 = 16-bit Unsigned Integer
       |               | 00694 | 		//			r6 = Return Address
       |               | 00695 | 		// Output Params:	r6 = GARBAGE
       |               | 00696 | 		//-----------------------------------------------------------------------------
       |               | 00697 | 		// Description:	Echos a 16-bit unsigned integer to the terminal.  Leading
       |               | 00698 | 		//			zeros are output if necessary to pad the output to 5 digits.
       |               | 00699 | 		//=============================================================================
       |      = 0x18CB | 00700 | 		#define 	XPD_EchoUnsignedDec    	0x18CB
       |               | 00701 | 		
       |               | 00702 | 		
       |               | 00703 | 		//=============================================================================
       |               | 00704 | 		// Input Params:	r1 = 16-bit Unsigned Integer
       |               | 00705 | 		//			r6 = Return Address
       |               | 00706 | 		// Output Params:	r6 = GARBAGE
       |               | 00707 | 		//-----------------------------------------------------------------------------
       |               | 00708 | 		// Description:	Echos a 16-bit unsigned integer to the terminal without leading
       |               | 00709 | 		//			zeros (No Leading Zeros).
       |               | 00710 | 		//=============================================================================
       |      = 0x18F6 | 00711 | 		#define	XPD_EchoUnsignedDecNLZ	0x18F6
       |               | 00712 | 		
       |               | 00713 | 		
       |               | 00714 | 		//=============================================================================
       |               | 00715 | 		// Input Params:	r1 = 16-bit Signed Integer
       |               | 00716 | 		//			r6 = Return Address
       |               | 00717 | 		// Output Params:	r6 = GARBAGE
       |               | 00718 | 		//-----------------------------------------------------------------------------
       |               | 00719 | 		// Description:	Echos a 16-bit signed integer to the terminal.  Leading
       |               | 00720 | 		//			zeros are output if necessary to pad the output to 5 digits.
       |               | 00721 | 		//			In total, 6 characters are output: 1 sign and 5 digits.
       |               | 00722 | 		//=============================================================================
       |      = 0x1929 | 00723 | 		#define 	XPD_EchoSignedDec      	0x1929
       |               | 00724 | 		
       |               | 00725 | 		
       |               | 00726 | 		//=============================================================================
       |               | 00727 | 		// Input Params:	r1 = 16-bit Signed Integer
       |               | 00728 | 		//			r6 = Return Address
       |               | 00729 | 		// Output Params:	r6 = GARBAGE
       |               | 00730 | 		//-----------------------------------------------------------------------------
       |               | 00731 | 		// Description:	Echos a 16-bit signed integer to the terminal without leading
       |               | 00732 | 		//			zeros (No Leading Zeros).
       |               | 00733 | 		//=============================================================================
       |      = 0x196A | 00734 | 		#define	XPD_EchoSignedDecNLZ	0x196A
       |               | 00735 | 		
       |               | 00736 | 		
       |               | 00737 | 		//=============================================================================
       |               | 00738 | 		// Input Params:	r1 = 16-bit Number
       |               | 00739 | 		//			r6 = Return Address
       |               | 00740 | 		// Output Params:	r6 = GARBAGE
       |               | 00741 | 		//-----------------------------------------------------------------------------
       |               | 00742 | 		// Description:	Echos a 16-bit number to the terminal formatted as a
       |               | 00743 | 		//			hexadecimal integer with format 0xABCD where ABCD are hex
       |               | 00744 | 		//			digits.
       |               | 00745 | 		//=============================================================================
       |      = 0x19B3 | 00746 | 		#define 	XPD_EchoHex            	0x19B3
       |               | 00747 | 		
       |               | 00748 | 		
       |               | 00749 | 		//=============================================================================
       |               | 00750 | 		// Input Params:	r1 = 16-bit Number
       |               | 00751 | 		//			r6 = Return Address
       |               | 00752 | 		// Output Params:	r6 = GARBAGE
       |               | 00753 | 		//-----------------------------------------------------------------------------
       |               | 00754 | 		// Description:	Echos a 16-bit number to the terminal formatted as a
       |               | 00755 | 		//			hexadecimal integer without the '0x' prefix (No prefix).
       |               | 00756 | 		//=============================================================================
       |      = 0x19C1 | 00757 | 		#define 	XPD_EchoHexNP          	0x19C1
       |               | 00758 | 		
       |               | 00759 | 		
       |               | 00760 | 		//=============================================================================
       |               | 00761 | 		// Input Params:	r1 = 8-bit Number
       |               | 00762 | 		//			r6 = Return Address
       |               | 00763 | 		// Output Params:	r6 = GARBAGE
       |               | 00764 | 		//-----------------------------------------------------------------------------
       |               | 00765 | 		// Description:	Echos an 8-bit number to the terminal formatted as a
       |               | 00766 | 		//			hexadecimal integer with the '0x' prefix.
       |               | 00767 | 		//=============================================================================
       |      = 0x19E7 | 00768 | 		#define 	XPD_EchoHexByte        	0x19E7
       |               | 00769 | 		
       |               | 00770 | 		
       |               | 00771 | 		//=============================================================================
       |               | 00772 | 		// Input Params:	r1 = 8-bit Number
       |               | 00773 | 		//			r6 = Return Address
       |               | 00774 | 		// Output Params:	r6 = GARBAGE
       |               | 00775 | 		//-----------------------------------------------------------------------------
       |               | 00776 | 		// Description:	Echos an 8-bit number to the terminal formatted as a
       |               | 00777 | 		//			hexadecimal integer without the '0x' prefix (No Prefix).
       |               | 00778 | 		//=============================================================================
       |      = 0x19F5 | 00779 | 		#define 	XPD_EchoHexByteNP      	0x19F5
       |               | 00780 | 		
       |               | 00781 | 		
       |               | 00782 | 		//=============================================================================
       |               | 00783 | 		// Input Params:	r1 = 16-Bit Vector
       |               | 00784 | 		//			r6 = Return Address
       |               | 00785 | 		// Output Params:	r6 = GARBAGE
       |               | 00786 | 		//-----------------------------------------------------------------------------
       |               | 00787 | 		// Description:	Echos to the terminal a comma delimited list of the bits
       |               | 00788 | 		//			that are set in a 16-bit vector.
       |               | 00789 | 		//=============================================================================
       |      = 0x1A0D | 00790 | 		#define 	XPD_EchoSetBitList     	0x1A0D
       |               | 00791 | 		
       |               | 00792 | 		
       |               | 00793 | 		//=============================================================================
       |               | 00794 | 		// Input Params:	r4 = Number of words to display
       |               | 00795 | 		//			r5 = Start address of the block
       |               | 00796 | 		//			r6 = Return Address
       |               | 00797 | 		// Output Params:	r6 = GARBAGE
       |               | 00798 | 		//-----------------------------------------------------------------------------
       |               | 00799 | 		// Description:	Echos to the terminal a given number of words of data in
       |               | 00800 | 		//			hex format starting at a given memory address.  The output is
       |               | 00801 | 		//			formatted with 8 words per line and a space in between each
       |               | 00802 | 		//			word.
       |               | 00803 | 		//=============================================================================
       |      = 0x1A32 | 00804 | 		#define 	XPD_EchoBlock          	0x1A32
       |               | 00805 | 
       |      = 0x000F | 00806 | 		#define	SPI_UART_Rbit 		 	15
       |               | 00807 | 
       |               | 00808 | //*****************************************************************************
       |               | 00809 | //*****************************************************************************
       |               | 00810 | //**  Useful ASCII Characters
       |               | 00811 | //*****************************************************************************
       |               | 00812 | //*****************************************************************************
       |               | 00813 | 
       |      = 0x0000 | 00814 | 	#define	EOS				0	// End Of String  
       |      = 0x0008 | 00815 | 	#define	BS				8	// Back Space     
       |      = 0x000A | 00816 | 	#define	LF				10	// Line Feed      
       |      = 0x000D | 00817 | 	#define	CR				13	// Carriage Return		
       |               | 00818 | 

                                 //
                                 // "ReflowOvenController.main" -> "XInC2.asm"
//============================== //==============================================================
                                 // "ReflowOvenController.main"
                                 //

       |               | 00005 | @ = 0xC000
0xC000 | 0x0100 0x4012 | 00006 | bra ProgramSPIEEPROM
0xC002 | 0x9945        | 00007 | 39237
       |               | 00008 | #include "C:/Program Files/SXC/include/sxc-art0\XInC2_Entry.asm"

                                 //
                                 // "ReflowOvenController.main"
//============================== //==============================================================
                                 // "ReflowOvenController.main" -> "XInC2_Entry.asm"
                                 //

0xC003 |               | 00001 | sxc___main:
0xC003 | 0x0B81        | 00002 |     mov  r1, 1
0xC004 | 0x138F        | 00003 |     mov  r2, (1 << 3) | 7  // start at thread 1, register 7
       |               | 00004 | 
0xC005 |               | 00005 |   sxc___main_stack_setup_loop:
0xC005 | 0x1283        | 00006 |     outp r2, SCUpntr
0xC006 | 0x1BF1 0xCA00 | 00007 |     ld   r3, r1, THREAD_STACK_LOOKUP
0xC008 | 0x1A80        | 00008 |     outp r3, SCUreg
0xC009 | 0x5208        | 00009 |     add  r2, r2, (1 << 3) // adding (1 << 3) points at next stack entry
0xC00A | 0x4901        | 00010 |     add  r1, r1, 1
0xC00B | 0x59F8        | 00011 |     sub  r3, r1, 8  // loop over all 8 threads
0xC00C | 0x28F8        | 00012 |     bc   NE, sxc___main_stack_setup_loop
       |               | 00013 | 
0xC00D | 0x3BE8 0xC800 | 00014 |     mov  sp, THREAD0_STACK
0xC00F | 0x7F01        | 00015 |     add  sp, sp, 1
0xC010 | 0x03E8 0xCC10 | 00016 |     mov  r0, SXCA_PARSED_CONSTRUCTOR_LIST_START
0xC012 |               | 00017 |   sxc___main_constructor_loop:
0xC012 | 0x0BC0 0x33F0 | 00018 |     sub  r1, r0, SXCA_PARSED_CONSTRUCTOR_LIST_END
0xC014 | 0x0806        | 00019 |     bc   EQ, sxc___main_constructor_loop_exit
       |               | 00020 | 
0xC015 | 0xC7FF        | 00021 |     st   r0, sp, -1
0xC016 | 0x8800        | 00022 |     ld   r1, r0, 0
0xC017 | 0x33E1        | 00023 |     jsr  r6, r1
0xC018 | 0x87FF        | 00024 |     ld   r0, sp, -1
0xC019 | 0x4001        | 00025 |     add  r0, r0, 1
0xC01A | 0x01F7        | 00026 |     bra sxc___main_constructor_loop
0xC01B |               | 00027 |   sxc___main_constructor_loop_exit:
       |               | 00028 |     
0xC01B | 0x7FFF        | 00029 |     sub  sp, sp, 1
0xC01C | 0x33EC 0xC422 | 00030 |     jsr  r6, sxc_main
0xC01E | 0x01FF        | 00031 |     bra  @

                                 //
                                 // "ReflowOvenController.main" -> "XInC2_Entry.asm"
//============================== //==============================================================
                                 // "ReflowOvenController.main"
                                 //

       |               | 00009 | #include "C:/Users/cchin/CapstoneFirmware/Xinc2/ReflowOvenController/build\code.asm"

                                 //
                                 // "ReflowOvenController.main"
//============================== //==============================================================
                                 // "ReflowOvenController.main" -> "code.asm"
                                 //

       |               | 00001 | 	// .file	"C:/Users/cchin/CapstoneFirmware/Xinc2/ReflowOvenController/build/ReflowOvenController.opt"
       |               | 00002 | //	.section	//.text,"xr"
       |               | 00003 | //align
       |               | 00004 | @ = (@ + 1-1)  & -1
0xC01F |               | 00005 | sxc__Z7wait_msj:                        // @_Z7wait_msj
       |               | 00006 | // BB#0:
0xC01F | 0x7F01        | 00007 | 	add	sp, sp, 0x1
0xC020 | 0xF7FF        | 00008 | 	st	r6, sp, 0xffff          // 1-byte Folded Spill
0xC021 | 0x4A00        | 00009 | 	sub	r1, r2, 0x0
0xC022 | 0x0817        | 00010 | 	bc	EQ, BB0_9
       |               | 00011 | // BB#1:
0xC023 | 0x0380        | 00012 | 	mov	r0, 0x0
0xC024 | 0x1BE8 0x4350 | 00013 | 	mov	r3, 0x4350
0xC026 | 0x23E8 0x3CB0 | 00014 | 	mov	r4, 0x3cb0
0xC028 |               | 00015 | BB0_2:                                  // %.preheader
       |               | 00016 |                                         // =>This Loop Header: Depth=1
       |               | 00017 |                                         //     Child Loop BB0_3 Depth 2
       |               | 00018 |                                         //       Child Loop BB0_4 Depth 3
       |               | 00019 |                                         //       Child Loop BB0_6 Depth 3
0xC028 | 0x2B80        | 00020 | 	mov	r5, 0x0
0xC029 |               | 00021 | BB0_3:                                  //   Parent Loop BB0_2 Depth=1
       |               | 00022 |                                         // =>  This Loop Header: Depth=2
       |               | 00023 |                                         //       Child Loop BB0_4 Depth 3
       |               | 00024 |                                         //       Child Loop BB0_6 Depth 3
0xC029 | 0x0A03        | 00025 | 	inp	r1, 0x3
0xC02A | 0x334B        | 00026 | 	sub	r6, r3, r1
0xC02B |               | 00027 | BB0_4:                                  //   Parent Loop BB0_2 Depth=1
       |               | 00028 |                                         //     Parent Loop BB0_3 Depth=2
       |               | 00029 |                                         // =>    This Inner Loop Header: Depth=3
0xC02B | 0x0A03        | 00030 | 	inp	r1, 0x3
0xC02C | 0x0B0E        | 00031 | 	add	r1, r6, r1
       |               | 00032 | 	//cmp	r1, 0x0
0xC02D | 0x0CFD        | 00033 | 	bc	LT0, BB0_4
       |               | 00034 | // BB#5:                                // %_Z14sys_clock_waitj.exit
       |               | 00035 |                                         //   in Loop: Header=BB0_3 Depth=2
0xC02E | 0x0A03        | 00036 | 	inp	r1, 0x3
0xC02F | 0x334C        | 00037 | 	sub	r6, r4, r1
0xC030 |               | 00038 | BB0_6:                                  //   Parent Loop BB0_2 Depth=1
       |               | 00039 |                                         //     Parent Loop BB0_3 Depth=2
       |               | 00040 |                                         // =>    This Inner Loop Header: Depth=3
0xC030 | 0x0A03        | 00041 | 	inp	r1, 0x3
0xC031 | 0x0B0E        | 00042 | 	add	r1, r6, r1
       |               | 00043 | 	//cmp	r1, 0x0
0xC032 | 0x0CFD        | 00044 | 	bc	LT0, BB0_6
       |               | 00045 | // BB#7:                                // %_Z14sys_clock_waitj.exit5
       |               | 00046 |                                         //   in Loop: Header=BB0_3 Depth=2
0xC033 | 0x6D01        | 00047 | 	add	r5, r5, 0x1
0xC034 | 0x0BC5 0xFC18 | 00048 | 	sub	r1, r5, 0x3e8
0xC036 | 0x28F2        | 00049 | 	bc	NE, BB0_3
       |               | 00050 | // BB#8:                                //   in Loop: Header=BB0_2 Depth=1
0xC037 | 0x4001        | 00051 | 	add	r0, r0, 0x1
0xC038 | 0x0B50        | 00052 | 	sub	r1, r0, r2
0xC039 | 0x28EE        | 00053 | 	bc	NE, BB0_2
0xC03A |               | 00054 | BB0_9:                                  // %._crit_edge
0xC03A | 0xB7FF        | 00055 | 	ld	r6, sp, 0xffff          // 1-byte Folded Reload
0xC03B | 0x7FFF        | 00056 | 	sub	sp, sp, 0x1
0xC03C | 0x33E6        | 00057 | 	jsr	r6, r6
       |               | 00058 | 
       |               | 00059 | //align
       |               | 00060 | @ = (@ + 1-1)  & -1
0xC03D |               | 00061 | sxc__Z12Num_To_ASCIIj:                  // @_Z12Num_To_ASCIIj
       |               | 00062 | // BB#0:
0xC03D | 0x03E8 0x0063 | 00063 | 	mov	r0, 0x63
0xC03F | 0x0B89        | 00064 | 	mov	r1, 0x9
0xC040 | 0x0B4A        | 00065 | 	sub	r1, r2, r1
0xC041 | 0x3016        | 00066 | 	bc	UGT, BB1_12
       |               | 00067 | // BB#1:
0xC042 | 0x0BF2 0xCA09 | 00068 | 	ld	r1, r2,JTI1_0
0xC044 | 0x0BE1        | 00069 | 	jsr	r1, r1
0xC045 |               | 00070 | BB1_2:
0xC045 | 0x0390        | 00071 | 	mov	r0, 0x10
0xC046 | 0x33E6        | 00072 | 	jsr	r6, r6
0xC047 |               | 00073 | BB1_3:
0xC047 | 0x0391        | 00074 | 	mov	r0, 0x11
0xC048 | 0x33E6        | 00075 | 	jsr	r6, r6
0xC049 |               | 00076 | BB1_4:
0xC049 | 0x0392        | 00077 | 	mov	r0, 0x12
0xC04A | 0x33E6        | 00078 | 	jsr	r6, r6
0xC04B |               | 00079 | BB1_5:
0xC04B | 0x0393        | 00080 | 	mov	r0, 0x13
0xC04C | 0x33E6        | 00081 | 	jsr	r6, r6
0xC04D |               | 00082 | BB1_6:
0xC04D | 0x0394        | 00083 | 	mov	r0, 0x14
0xC04E | 0x33E6        | 00084 | 	jsr	r6, r6
0xC04F |               | 00085 | BB1_7:
0xC04F | 0x0395        | 00086 | 	mov	r0, 0x15
0xC050 | 0x33E6        | 00087 | 	jsr	r6, r6
0xC051 |               | 00088 | BB1_8:
0xC051 | 0x0396        | 00089 | 	mov	r0, 0x16
0xC052 | 0x33E6        | 00090 | 	jsr	r6, r6
0xC053 |               | 00091 | BB1_9:
0xC053 | 0x0397        | 00092 | 	mov	r0, 0x17
0xC054 | 0x33E6        | 00093 | 	jsr	r6, r6
0xC055 |               | 00094 | BB1_10:
0xC055 | 0x0398        | 00095 | 	mov	r0, 0x18
0xC056 | 0x33E6        | 00096 | 	jsr	r6, r6
0xC057 |               | 00097 | BB1_11:
0xC057 | 0x0399        | 00098 | 	mov	r0, 0x19
0xC058 |               | 00099 | BB1_12:
0xC058 | 0x33E6        | 00100 | 	jsr	r6, r6
       |               | 00101 | //	.section	//.text,"xr"
       |               | 00102 | //align
       |               | 00103 | @ = (@ + 1-1)  & -1
0xC059 |               | 00104 | sxc__Z22OLED_Command_160128RGBh:        // @_Z22OLED_Command_160128RGBh
       |               | 00105 | // BB#0:
0xC059 | 0x0220        | 00106 | 	inp	r0, 0x20
0xC05A | 0x0690        | 00107 | 	and	r0, r0, 0xfffb
0xC05B | 0x02A0        | 00108 | 	outp	r0, 0x20
0xC05C | 0x0220        | 00109 | 	inp	r0, 0x20
0xC05D | 0x0688        | 00110 | 	and	r0, r0, 0xfffd
0xC05E | 0x02A0        | 00111 | 	outp	r0, 0x20
0xC05F | 0x12B6        | 00112 | 	outp	r2, 0x36
0xC060 | 0x0236        | 00113 | 	inp	r0, 0x36
0xC061 | 0x0220        | 00114 | 	inp	r0, 0x20
0xC062 | 0x0710        | 00115 | 	ior	r0, r0, 0x4
0xC063 | 0x02A0        | 00116 | 	outp	r0, 0x20
0xC064 | 0x33E6        | 00117 | 	jsr	r6, r6
       |               | 00118 | 
       |               | 00119 | //align
       |               | 00120 | @ = (@ + 1-1)  & -1
0xC065 |               | 00121 | sxc__Z19OLED_Data_160128RGBh:           // @_Z19OLED_Data_160128RGBh
       |               | 00122 | // BB#0:
0xC065 | 0x0220        | 00123 | 	inp	r0, 0x20
0xC066 | 0x0690        | 00124 | 	and	r0, r0, 0xfffb
0xC067 | 0x02A0        | 00125 | 	outp	r0, 0x20
0xC068 | 0x0220        | 00126 | 	inp	r0, 0x20
0xC069 | 0x0708        | 00127 | 	ior	r0, r0, 0x2
0xC06A | 0x02A0        | 00128 | 	outp	r0, 0x20
0xC06B | 0x12B6        | 00129 | 	outp	r2, 0x36
0xC06C | 0x0236        | 00130 | 	inp	r0, 0x36
0xC06D | 0x0220        | 00131 | 	inp	r0, 0x20
0xC06E | 0x0710        | 00132 | 	ior	r0, r0, 0x4
0xC06F | 0x02A0        | 00133 | 	outp	r0, 0x20
0xC070 | 0x33E6        | 00134 | 	jsr	r6, r6
       |               | 00135 | 
       |               | 00136 | //align
       |               | 00137 | @ = (@ + 1-1)  & -1
0xC071 |               | 00138 | sxc__Z31OLED_WriteMemoryStart_160128RGBv: // @_Z31OLED_WriteMemoryStart_160128RGBv
       |               | 00139 | // BB#0:
0xC071 | 0x7F01        | 00140 | 	add	sp, sp, 0x1
0xC072 | 0xF7FF        | 00141 | 	st	r6, sp, 0xffff          // 1-byte Folded Spill
0xC073 | 0x13E8 0x0022 | 00142 | 	mov	r2, 0x22
0xC075 | 0x33EC 0xC059 | 00143 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC077 | 0xB7FF        | 00144 | 	ld	r6, sp, 0xffff          // 1-byte Folded Reload
0xC078 | 0x7FFF        | 00145 | 	sub	sp, sp, 0x1
0xC079 | 0x33E6        | 00146 | 	jsr	r6, r6
       |               | 00147 | 
       |               | 00148 | //align
       |               | 00149 | @ = (@ + 1-1)  & -1
0xC07A |               | 00150 | sxc__Z20OLED_Pixel_160128RGBm:          // @_Z20OLED_Pixel_160128RGBm
       |               | 00151 | // BB#0:
0xC07A | 0x7F02        | 00152 | 	add	sp, sp, 0x2
0xC07B | 0xF7FE        | 00153 | 	st	r6, sp, 0xfffe          // 1-byte Folded Spill
0xC07C | 0xD7FF        | 00154 | 	st	r2, sp, 0xffff          // 1-byte Folded Spill
0xC07D | 0x03CB 0x00FF | 00155 | 	and	r0, r3, 0xff
0xC07F | 0x0640        | 00156 | 	rol	r0, r0, 0x8
0xC080 | 0x0BCA 0xFF00 | 00157 | 	and	r1, r2, 0xff00
0xC082 | 0x0E41        | 00158 | 	rol	r1, r1, 0x8
0xC083 | 0x1581        | 00159 | 	ior	r2, r1, r0
0xC084 | 0x33EC 0xC065 | 00160 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC086 | 0x97FF        | 00161 | 	ld	r2, sp, 0xffff          // 1-byte Folded Reload
0xC087 | 0x33EC 0xC065 | 00162 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC089 | 0xB7FE        | 00163 | 	ld	r6, sp, 0xfffe          // 1-byte Folded Reload
0xC08A | 0x7FFE        | 00164 | 	sub	sp, sp, 0x2
0xC08B | 0x33E6        | 00165 | 	jsr	r6, r6
       |               | 00166 | 
       |               | 00167 | //align
       |               | 00168 | @ = (@ + 1-1)  & -1
0xC08C |               | 00169 | sxc__Z26OLED_SetPosition_160128RGBhh:   // @_Z26OLED_SetPosition_160128RGBhh
       |               | 00170 | // BB#0:
0xC08C | 0x7F03        | 00171 | 	add	sp, sp, 0x3
0xC08D | 0xF7FD        | 00172 | 	st	r6, sp, 0xfffd          // 1-byte Folded Spill
0xC08E | 0xDFFE        | 00173 | 	st	r3, sp, 0xfffe          // 1-byte Folded Spill
0xC08F | 0xD7FF        | 00174 | 	st	r2, sp, 0xffff          // 1-byte Folded Spill
0xC090 | 0x13E8 0x0020 | 00175 | 	mov	r2, 0x20
0xC092 | 0x33EC 0xC059 | 00176 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC094 | 0x97FF        | 00177 | 	ld	r2, sp, 0xffff          // 1-byte Folded Reload
0xC095 | 0x33EC 0xC065 | 00178 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC097 | 0x13E8 0x0021 | 00179 | 	mov	r2, 0x21
0xC099 | 0x33EC 0xC059 | 00180 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC09B | 0x97FE        | 00181 | 	ld	r2, sp, 0xfffe          // 1-byte Folded Reload
0xC09C | 0x33EC 0xC065 | 00182 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC09E | 0xB7FD        | 00183 | 	ld	r6, sp, 0xfffd          // 1-byte Folded Reload
0xC09F | 0x7FFD        | 00184 | 	sub	sp, sp, 0x3
0xC0A0 | 0x33E6        | 00185 | 	jsr	r6, r6
       |               | 00186 | 
       |               | 00187 | //align
       |               | 00188 | @ = (@ + 1-1)  & -1
0xC0A1 |               | 00189 | sxc__Z19OLED_Text_160128RGBhhhmm:       // @_Z19OLED_Text_160128RGBhhhmm
       |               | 00190 | // BB#0:
0xC0A1 | 0x7F07        | 00191 | 	add	sp, sp, 0x7
0xC0A2 | 0xF7F9        | 00192 | 	st	r6, sp, 0xfff9          // 1-byte Folded Spill
0xC0A3 | 0xD7FF        | 00193 | 	st	r2, sp, 0xffff          // 1-byte Folded Spill
0xC0A4 | 0x0614        | 00194 | 	rol	r0, r4, 0x2
0xC0A5 | 0x03C8 0xFFFC | 00195 | 	and	r0, r0, 0xfffc
0xC0A7 | 0x0304        | 00196 | 	add	r0, r4, r0
0xC0A8 | 0x1380        | 00197 | 	mov	r2, 0x0
0xC0A9 | 0x0BE8 0x0080 | 00198 | 	mov	r1, 0x80
0xC0AB | 0xCFFB        | 00199 | 	st	r1, sp, 0xfffb          // 1-byte Folded Spill
0xC0AC | 0x03C0 0xCA13 | 00200 | 	add	r0, r0, sxc_Ascii_1
0xC0AE | 0xC7FC        | 00201 | 	st	r0, sp, 0xfffc          // 1-byte Folded Spill
0xC0AF |               | 00202 | BB7_1:                                  // =>This Loop Header: Depth=1
       |               | 00203 |                                         //     Child Loop BB7_2 Depth 2
0xC0AF | 0xD7FE        | 00204 | 	st	r2, sp, 0xfffe          // 1-byte Folded Spill
0xC0B0 | 0xDFFD        | 00205 | 	st	r3, sp, 0xfffd          // 1-byte Folded Spill
0xC0B1 | 0x97FF        | 00206 | 	ld	r2, sp, 0xffff          // 1-byte Folded Reload
0xC0B2 | 0x33EC 0xC08C | 00207 | 	jsr	r6, sxc__Z26OLED_SetPosition_160128RGBhh
0xC0B4 | 0x33EC 0xC071 | 00208 | 	jsr	r6, sxc__Z31OLED_WriteMemoryStart_160128RGBv
0xC0B6 | 0x1385        | 00209 | 	mov	r2, 0x5
0xC0B7 |               | 00210 | BB7_2:                                  //   Parent Loop BB7_1 Depth=1
       |               | 00211 |                                         // =>  This Inner Loop Header: Depth=2
0xC0B7 | 0xD7FA        | 00212 | 	st	r2, sp, 0xfffa          // 1-byte Folded Spill
0xC0B8 | 0x87FC        | 00213 | 	ld	r0, sp, 0xfffc          // 1-byte Folded Reload
0xC0B9 | 0x0350        | 00214 | 	sub	r0, r0, r2
0xC0BA | 0x8005        | 00215 | 	ld	r0, r0, 0x5
0xC0BB | 0x8FFB        | 00216 | 	ld	r1, sp, 0xfffb          // 1-byte Folded Reload
0xC0BC | 0x0548        | 00217 | 	and	r0, r0, r1
0xC0BD | 0x0B48        | 00218 | 	sub	r1, r0, r1
0xC0BE | 0x2802        | 00219 | 	bc	NE, BB7_4
       |               | 00220 | // BB#3:                                //   in Loop: Header=BB7_2 Depth=2
0xC0BF | 0x13BF        | 00221 | 	mov	r2, 0xffff
0xC0C0 | 0x0101        | 00222 | 	bra	BB7_5
0xC0C1 |               | 00223 | BB7_4:                                  //   in Loop: Header=BB7_2 Depth=2
0xC0C1 | 0x1380        | 00224 | 	mov	r2, 0x0
0xC0C2 |               | 00225 | BB7_5:                                  //   in Loop: Header=BB7_2 Depth=2
0xC0C2 | 0x1B80        | 00226 | 	mov	r3, 0x0
0xC0C3 | 0x33EC 0xC07A | 00227 | 	jsr	r6, sxc__Z20OLED_Pixel_160128RGBm
0xC0C5 | 0x97FA        | 00228 | 	ld	r2, sp, 0xfffa          // 1-byte Folded Reload
0xC0C6 | 0x52FF        | 00229 | 	add	r2, r2, 0xffff
       |               | 00230 | 	//cmp	r2, 0x0
0xC0C7 | 0x28EF        | 00231 | 	bc	ZC, BB7_2
       |               | 00232 | // BB#6:                                //   in Loop: Header=BB7_1 Depth=1
0xC0C8 | 0x9FFD        | 00233 | 	ld	r3, sp, 0xfffd          // 1-byte Folded Reload
0xC0C9 | 0x5B01        | 00234 | 	add	r3, r3, 0x1
0xC0CA | 0x87FB        | 00235 | 	ld	r0, sp, 0xfffb          // 1-byte Folded Reload
0xC0CB | 0x0680        | 00236 | 	and	r0, r0, 0xfffe
0xC0CC | 0x0678        | 00237 | 	rol	r0, r0, 0xf
0xC0CD | 0xC7FB        | 00238 | 	st	r0, sp, 0xfffb          // 1-byte Folded Spill
0xC0CE | 0x97FE        | 00239 | 	ld	r2, sp, 0xfffe          // 1-byte Folded Reload
0xC0CF | 0x5201        | 00240 | 	add	r2, r2, 0x1
0xC0D0 | 0x4AF8        | 00241 | 	sub	r1, r2, 0x8
0xC0D1 | 0x28DD        | 00242 | 	bc	NE, BB7_1
       |               | 00243 | // BB#7:
0xC0D2 | 0xB7F9        | 00244 | 	ld	r6, sp, 0xfff9          // 1-byte Folded Reload
0xC0D3 | 0x7FF9        | 00245 | 	sub	sp, sp, 0x7
0xC0D4 | 0x33E6        | 00246 | 	jsr	r6, r6
       |               | 00247 | 
       |               | 00248 | //align
       |               | 00249 | @ = (@ + 1-1)  & -1
0xC0D5 |               | 00250 | sxc__Z21OLED_Print_Sensor_Valhhjj:      // @_Z21OLED_Print_Sensor_Valhhjj
       |               | 00251 | // BB#0:
0xC0D5 | 0x7F05        | 00252 | 	add	sp, sp, 0x5
0xC0D6 | 0xF7FB        | 00253 | 	st	r6, sp, 0xfffb          // 1-byte Folded Spill
0xC0D7 | 0xEFFF        | 00254 | 	st	r5, sp, 0xffff          // 1-byte Folded Spill
0xC0D8 | 0xD7FD        | 00255 | 	st	r2, sp, 0xfffd          // 1-byte Folded Spill
0xC0D9 | 0x0389        | 00256 | 	mov	r0, 0x9
0xC0DA | 0x0B44        | 00257 | 	sub	r1, r4, r0
0xC0DB | 0x200B        | 00258 | 	bc	UGE, BB8_1
       |               | 00259 | // BB#8:                                // %.thread
0xC0DC | 0x5400        | 00260 | 	add	r2, r4, 0x0
0xC0DD | 0xDFFC        | 00261 | 	st	r3, sp, 0xfffc          // 1-byte Folded Spill
0xC0DE | 0x33EC 0xC03D | 00262 | 	jsr	r6, sxc__Z12Num_To_ASCIIj
0xC0E0 | 0x97FD        | 00263 | 	ld	r2, sp, 0xfffd          // 1-byte Folded Reload
0xC0E1 | 0x9FFC        | 00264 | 	ld	r3, sp, 0xfffc          // 1-byte Folded Reload
0xC0E2 | 0x6000        | 00265 | 	add	r4, r0, 0x0
0xC0E3 | 0x33EC 0xC0A1 | 00266 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC0E5 | 0x0387        | 00267 | 	mov	r0, 0x7
0xC0E6 | 0x0156        | 00268 | 	bra	BB8_4
0xC0E7 |               | 00269 | BB8_1:
0xC0E7 | 0xDFFC        | 00270 | 	st	r3, sp, 0xfffc          // 1-byte Folded Spill
0xC0E8 | 0x03E8 0x0064 | 00271 | 	mov	r0, 0x64
0xC0EA | 0x0B44        | 00272 | 	sub	r1, r4, r0
0xC0EB | 0x2020        | 00273 | 	bc	UGE, BB8_3
       |               | 00274 | // BB#2:
0xC0EC | 0x5400        | 00275 | 	add	r2, r4, 0x0
0xC0ED | 0x1B8A        | 00276 | 	mov	r3, 0xa
0xC0EE | 0xE7FE        | 00277 | 	st	r4, sp, 0xfffe          // 1-byte Folded Spill
0xC0EF | 0x33EC 0xC490 | 00278 | 	jsr	r6, sxc___xinc_udiv
0xC0F1 | 0x5000        | 00279 | 	add	r2, r0, 0x0
0xC0F2 | 0x1B8A        | 00280 | 	mov	r3, 0xa
0xC0F3 | 0x33EC 0xC49A | 00281 | 	jsr	r6, sxc___xinc_umod
0xC0F5 | 0x5000        | 00282 | 	add	r2, r0, 0x0
0xC0F6 | 0x33EC 0xC03D | 00283 | 	jsr	r6, sxc__Z12Num_To_ASCIIj
0xC0F8 | 0x97FD        | 00284 | 	ld	r2, sp, 0xfffd          // 1-byte Folded Reload
0xC0F9 | 0x9FFC        | 00285 | 	ld	r3, sp, 0xfffc          // 1-byte Folded Reload
0xC0FA | 0x6000        | 00286 | 	add	r4, r0, 0x0
0xC0FB | 0x33EC 0xC0A1 | 00287 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC0FD | 0x97FE        | 00288 | 	ld	r2, sp, 0xfffe          // 1-byte Folded Reload
0xC0FE | 0x1B8A        | 00289 | 	mov	r3, 0xa
0xC0FF | 0x33EC 0xC49A | 00290 | 	jsr	r6, sxc___xinc_umod
0xC101 | 0x5000        | 00291 | 	add	r2, r0, 0x0
0xC102 | 0x33EC 0xC03D | 00292 | 	jsr	r6, sxc__Z12Num_To_ASCIIj
0xC104 | 0x8FFD        | 00293 | 	ld	r1, sp, 0xfffd          // 1-byte Folded Reload
0xC105 | 0x5107        | 00294 | 	add	r2, r1, 0x7
0xC106 | 0x9FFC        | 00295 | 	ld	r3, sp, 0xfffc          // 1-byte Folded Reload
0xC107 | 0x6000        | 00296 | 	add	r4, r0, 0x0
0xC108 | 0x33EC 0xC0A1 | 00297 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC10A | 0x038E        | 00298 | 	mov	r0, 0xe
0xC10B | 0x0131        | 00299 | 	bra	BB8_4
0xC10C |               | 00300 | BB8_3:
0xC10C | 0x5400        | 00301 | 	add	r2, r4, 0x0
0xC10D | 0x1BE8 0x0064 | 00302 | 	mov	r3, 0x64
0xC10F | 0xE7FE        | 00303 | 	st	r4, sp, 0xfffe          // 1-byte Folded Spill
0xC110 | 0x33EC 0xC490 | 00304 | 	jsr	r6, sxc___xinc_udiv
0xC112 | 0x5000        | 00305 | 	add	r2, r0, 0x0
0xC113 | 0x1B8A        | 00306 | 	mov	r3, 0xa
0xC114 | 0x33EC 0xC49A | 00307 | 	jsr	r6, sxc___xinc_umod
0xC116 | 0x5000        | 00308 | 	add	r2, r0, 0x0
0xC117 | 0x33EC 0xC03D | 00309 | 	jsr	r6, sxc__Z12Num_To_ASCIIj
0xC119 | 0x97FD        | 00310 | 	ld	r2, sp, 0xfffd          // 1-byte Folded Reload
0xC11A | 0x9FFC        | 00311 | 	ld	r3, sp, 0xfffc          // 1-byte Folded Reload
0xC11B | 0x6000        | 00312 | 	add	r4, r0, 0x0
0xC11C | 0x33EC 0xC0A1 | 00313 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC11E | 0x97FE        | 00314 | 	ld	r2, sp, 0xfffe          // 1-byte Folded Reload
0xC11F | 0x1B8A        | 00315 | 	mov	r3, 0xa
0xC120 | 0x33EC 0xC490 | 00316 | 	jsr	r6, sxc___xinc_udiv
0xC122 | 0x5000        | 00317 | 	add	r2, r0, 0x0
0xC123 | 0x1B8A        | 00318 | 	mov	r3, 0xa
0xC124 | 0x33EC 0xC49A | 00319 | 	jsr	r6, sxc___xinc_umod
0xC126 | 0x5000        | 00320 | 	add	r2, r0, 0x0
0xC127 | 0x33EC 0xC03D | 00321 | 	jsr	r6, sxc__Z12Num_To_ASCIIj
0xC129 | 0x8FFD        | 00322 | 	ld	r1, sp, 0xfffd          // 1-byte Folded Reload
0xC12A | 0x5107        | 00323 | 	add	r2, r1, 0x7
0xC12B | 0x9FFC        | 00324 | 	ld	r3, sp, 0xfffc          // 1-byte Folded Reload
0xC12C | 0x6000        | 00325 | 	add	r4, r0, 0x0
0xC12D | 0x33EC 0xC0A1 | 00326 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC12F | 0x97FE        | 00327 | 	ld	r2, sp, 0xfffe          // 1-byte Folded Reload
0xC130 | 0x1B8A        | 00328 | 	mov	r3, 0xa
0xC131 | 0x33EC 0xC49A | 00329 | 	jsr	r6, sxc___xinc_umod
0xC133 | 0x5000        | 00330 | 	add	r2, r0, 0x0
0xC134 | 0x33EC 0xC03D | 00331 | 	jsr	r6, sxc__Z12Num_To_ASCIIj
0xC136 | 0x8FFD        | 00332 | 	ld	r1, sp, 0xfffd          // 1-byte Folded Reload
0xC137 | 0x510E        | 00333 | 	add	r2, r1, 0xe
0xC138 | 0x9FFC        | 00334 | 	ld	r3, sp, 0xfffc          // 1-byte Folded Reload
0xC139 | 0x6000        | 00335 | 	add	r4, r0, 0x0
0xC13A | 0x33EC 0xC0A1 | 00336 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC13C | 0x0395        | 00337 | 	mov	r0, 0x15
0xC13D |               | 00338 | BB8_4:
0xC13D | 0x8FFD        | 00339 | 	ld	r1, sp, 0xfffd          // 1-byte Folded Reload
0xC13E | 0x1308        | 00340 | 	add	r2, r0, r1
0xC13F | 0x87FF        | 00341 | 	ld	r0, sp, 0xffff          // 1-byte Folded Reload
0xC140 | 0x4800        | 00342 | 	sub	r1, r0, 0x0
0xC141 | 0x0803        | 00343 | 	bc	EQ, BB8_5
       |               | 00344 | // BB#6:
0xC142 | 0x9FFC        | 00345 | 	ld	r3, sp, 0xfffc          // 1-byte Folded Reload
0xC143 | 0x2385        | 00346 | 	mov	r4, 0x5
0xC144 | 0x010B        | 00347 | 	bra	BB8_7
0xC145 |               | 00348 | BB8_5:
0xC145 | 0xD7FD        | 00349 | 	st	r2, sp, 0xfffd          // 1-byte Folded Spill
0xC146 | 0x9FFC        | 00350 | 	ld	r3, sp, 0xfffc          // 1-byte Folded Reload
0xC147 | 0x23E8 0x0061 | 00351 | 	mov	r4, 0x61
0xC149 | 0x33EC 0xC0A1 | 00352 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC14B | 0x87FD        | 00353 | 	ld	r0, sp, 0xfffd          // 1-byte Folded Reload
0xC14C | 0x5007        | 00354 | 	add	r2, r0, 0x7
0xC14D | 0x9FFC        | 00355 | 	ld	r3, sp, 0xfffc          // 1-byte Folded Reload
0xC14E | 0x23E8 0x0023 | 00356 | 	mov	r4, 0x23
0xC150 |               | 00357 | BB8_7:
0xC150 | 0x33EC 0xC0A1 | 00358 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC152 | 0xB7FB        | 00359 | 	ld	r6, sp, 0xfffb          // 1-byte Folded Reload
0xC153 | 0x7FFB        | 00360 | 	sub	sp, sp, 0x5
0xC154 | 0x33E6        | 00361 | 	jsr	r6, r6
       |               | 00362 | 
       |               | 00363 | //align
       |               | 00364 | @ = (@ + 1-1)  & -1
0xC155 |               | 00365 | sxc__Z8Draw_Barhhmmjjj:                 // @_Z8Draw_Barhhmmjjj
       |               | 00366 | // BB#0:                                // %.lr.ph13
0xC155 | 0x7F05        | 00367 | 	add	sp, sp, 0x5
0xC156 | 0xF7FB        | 00368 | 	st	r6, sp, 0xfffb          // 1-byte Folded Spill
0xC157 | 0x060A        | 00369 | 	rol	r0, r2, 0x1
0xC158 | 0x0680        | 00370 | 	and	r0, r0, 0xfffe
0xC159 | 0x0E10        | 00371 | 	rol	r1, r0, 0x2
0xC15A | 0x0BC9 0xFFFC | 00372 | 	and	r1, r1, 0xfffc
0xC15C | 0x0308        | 00373 | 	add	r0, r0, r1
0xC15D | 0x0E09        | 00374 | 	rol	r1, r1, 0x1
0xC15E | 0x0E81        | 00375 | 	and	r1, r1, 0xfffe
0xC15F | 0x0308        | 00376 | 	add	r0, r0, r1
0xC160 | 0x0E09        | 00377 | 	rol	r1, r1, 0x1
0xC161 | 0x0E81        | 00378 | 	and	r1, r1, 0xfffe
0xC162 | 0x0308        | 00379 | 	add	r0, r0, r1
0xC163 | 0x0E09        | 00380 | 	rol	r1, r1, 0x1
0xC164 | 0x0E81        | 00381 | 	and	r1, r1, 0xfffe
0xC165 | 0x1308        | 00382 | 	add	r2, r0, r1
0xC166 | 0xD7FC        | 00383 | 	st	r2, sp, 0xfffc          // 1-byte Folded Spill
0xC167 | 0x1BE8 0x0064 | 00384 | 	mov	r3, 0x64
0xC169 | 0x33EC 0xC490 | 00385 | 	jsr	r6, sxc___xinc_udiv
0xC16B | 0x1BE8 0x0049 | 00386 | 	mov	r3, 0x49
0xC16D | 0x0BE8 0x0063 | 00387 | 	mov	r1, 0x63
0xC16F | 0x97FC        | 00388 | 	ld	r2, sp, 0xfffc          // 1-byte Folded Reload
0xC170 | 0x0B4A        | 00389 | 	sub	r1, r2, r1
0xC171 | 0x101C        | 00390 | 	bc	ULE, BB9_5
       |               | 00391 | // BB#1:
0xC172 | 0xC7FD        | 00392 | 	st	r0, sp, 0xfffd          // 1-byte Folded Spill
0xC173 | 0x0380        | 00393 | 	mov	r0, 0x0
0xC174 |               | 00394 | BB9_4:                                  // %.lr.ph.us
       |               | 00395 |                                         // =>This Loop Header: Depth=1
       |               | 00396 |                                         //     Child Loop BB9_2 Depth 2
0xC174 | 0xC7FF        | 00397 | 	st	r0, sp, 0xffff          // 1-byte Folded Spill
0xC175 | 0xDFFE        | 00398 | 	st	r3, sp, 0xfffe          // 1-byte Folded Spill
0xC176 | 0x1397        | 00399 | 	mov	r2, 0x17
0xC177 | 0x33EC 0xC08C | 00400 | 	jsr	r6, sxc__Z26OLED_SetPosition_160128RGBhh
0xC179 | 0x33EC 0xC071 | 00401 | 	jsr	r6, sxc__Z31OLED_WriteMemoryStart_160128RGBv
0xC17B | 0x0380        | 00402 | 	mov	r0, 0x0
0xC17C |               | 00403 | BB9_2:                                  //   Parent Loop BB9_4 Depth=1
       |               | 00404 |                                         // =>  This Inner Loop Header: Depth=2
0xC17C | 0xC7FC        | 00405 | 	st	r0, sp, 0xfffc          // 1-byte Folded Spill
0xC17D | 0x13E8 0xF800 | 00406 | 	mov	r2, 0xf800
0xC17F | 0x1B80        | 00407 | 	mov	r3, 0x0
0xC180 | 0x33EC 0xC07A | 00408 | 	jsr	r6, sxc__Z20OLED_Pixel_160128RGBm
0xC182 | 0x87FC        | 00409 | 	ld	r0, sp, 0xfffc          // 1-byte Folded Reload
0xC183 | 0x4001        | 00410 | 	add	r0, r0, 0x1
0xC184 | 0x8FFD        | 00411 | 	ld	r1, sp, 0xfffd          // 1-byte Folded Reload
0xC185 | 0x0B48        | 00412 | 	sub	r1, r0, r1
0xC186 | 0x00F5        | 00413 | 	bc	ULT, BB9_2
       |               | 00414 | // BB#3:                                //   in Loop: Header=BB9_4 Depth=1
0xC187 | 0x9FFE        | 00415 | 	ld	r3, sp, 0xfffe          // 1-byte Folded Reload
0xC188 | 0x5B01        | 00416 | 	add	r3, r3, 0x1
0xC189 | 0x87FF        | 00417 | 	ld	r0, sp, 0xffff          // 1-byte Folded Reload
0xC18A | 0x4001        | 00418 | 	add	r0, r0, 0x1
0xC18B | 0x48E6        | 00419 | 	sub	r1, r0, 0x1a
0xC18C | 0x080D        | 00420 | 	bc	EQ, BB9_6
0xC18D | 0x01E6        | 00421 | 	bra	BB9_4
0xC18E |               | 00422 | BB9_5:                                  // %.preheader
       |               | 00423 |                                         // =>This Inner Loop Header: Depth=1
0xC18E | 0xDFFE        | 00424 | 	st	r3, sp, 0xfffe          // 1-byte Folded Spill
0xC18F | 0x1397        | 00425 | 	mov	r2, 0x17
0xC190 | 0x33EC 0xC08C | 00426 | 	jsr	r6, sxc__Z26OLED_SetPosition_160128RGBhh
0xC192 | 0x33EC 0xC071 | 00427 | 	jsr	r6, sxc__Z31OLED_WriteMemoryStart_160128RGBv
0xC194 | 0x8FFE        | 00428 | 	ld	r1, sp, 0xfffe          // 1-byte Folded Reload
0xC195 | 0x4101        | 00429 | 	add	r0, r1, 0x1
0xC196 | 0x49B8        | 00430 | 	add	r1, r1, 0xffb8
0xC197 | 0x5800        | 00431 | 	add	r3, r0, 0x0
0xC198 | 0x49E6        | 00432 | 	sub	r1, r1, 0x1a
0xC199 | 0x28F4        | 00433 | 	bc	NE, BB9_5
0xC19A |               | 00434 | BB9_6:                                  // %._crit_edge14
0xC19A | 0xB7FB        | 00435 | 	ld	r6, sp, 0xfffb          // 1-byte Folded Reload
0xC19B | 0x7FFB        | 00436 | 	sub	sp, sp, 0x5
0xC19C | 0x33E6        | 00437 | 	jsr	r6, r6
       |               | 00438 | 
       |               | 00439 | //align
       |               | 00440 | @ = (@ + 1-1)  & -1
0xC19D |               | 00441 | sxc__Z19OLED_Init_160128RGBv:           // @_Z19OLED_Init_160128RGBv
       |               | 00442 | // BB#0:
0xC19D | 0x7F01        | 00443 | 	add	sp, sp, 0x1
0xC19E | 0xF7FF        | 00444 | 	st	r6, sp, 0xffff          // 1-byte Folded Spill
0xC19F | 0x0220        | 00445 | 	inp	r0, 0x20
0xC1A0 | 0x0680        | 00446 | 	and	r0, r0, 0xfffe
0xC1A1 | 0x02A0        | 00447 | 	outp	r0, 0x20
0xC1A2 | 0x1382        | 00448 | 	mov	r2, 0x2
0xC1A3 | 0x33EC 0xC01F | 00449 | 	jsr	r6, sxc__Z7wait_msj
0xC1A5 | 0x0220        | 00450 | 	inp	r0, 0x20
0xC1A6 | 0x0700        | 00451 | 	ior	r0, r0, 0x1
0xC1A7 | 0x02A0        | 00452 | 	outp	r0, 0x20
0xC1A8 | 0x1382        | 00453 | 	mov	r2, 0x2
0xC1A9 | 0x33EC 0xC01F | 00454 | 	jsr	r6, sxc__Z7wait_msj
0xC1AB | 0x1384        | 00455 | 	mov	r2, 0x4
0xC1AC | 0x33EC 0xC059 | 00456 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC1AE | 0x1381        | 00457 | 	mov	r2, 0x1
0xC1AF | 0x33EC 0xC065 | 00458 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC1B1 | 0x1381        | 00459 | 	mov	r2, 0x1
0xC1B2 | 0x33EC 0xC01F | 00460 | 	jsr	r6, sxc__Z7wait_msj
0xC1B4 | 0x1384        | 00461 | 	mov	r2, 0x4
0xC1B5 | 0x33EC 0xC059 | 00462 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC1B7 | 0x1380        | 00463 | 	mov	r2, 0x0
0xC1B8 | 0x33EC 0xC065 | 00464 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC1BA | 0x1381        | 00465 | 	mov	r2, 0x1
0xC1BB | 0x33EC 0xC01F | 00466 | 	jsr	r6, sxc__Z7wait_msj
0xC1BD | 0x1386        | 00467 | 	mov	r2, 0x6
0xC1BE | 0x33EC 0xC059 | 00468 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC1C0 | 0x1380        | 00469 | 	mov	r2, 0x0
0xC1C1 | 0x33EC 0xC065 | 00470 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC1C3 | 0x1381        | 00471 | 	mov	r2, 0x1
0xC1C4 | 0x33EC 0xC01F | 00472 | 	jsr	r6, sxc__Z7wait_msj
0xC1C6 | 0x1382        | 00473 | 	mov	r2, 0x2
0xC1C7 | 0x33EC 0xC059 | 00474 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC1C9 | 0x1381        | 00475 | 	mov	r2, 0x1
0xC1CA | 0x33EC 0xC065 | 00476 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC1CC | 0x1383        | 00477 | 	mov	r2, 0x3
0xC1CD | 0x33EC 0xC059 | 00478 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC1CF | 0x13E8 0x0030 | 00479 | 	mov	r2, 0x30
0xC1D1 | 0x33EC 0xC065 | 00480 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC1D3 | 0x13E8 0x0028 | 00481 | 	mov	r2, 0x28
0xC1D5 | 0x33EC 0xC059 | 00482 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC1D7 | 0x13E8 0x007F | 00483 | 	mov	r2, 0x7f
0xC1D9 | 0x33EC 0xC065 | 00484 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC1DB | 0x13E8 0x0029 | 00485 | 	mov	r2, 0x29
0xC1DD | 0x33EC 0xC059 | 00486 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC1DF | 0x1380        | 00487 | 	mov	r2, 0x0
0xC1E0 | 0x33EC 0xC065 | 00488 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC1E2 | 0x1394        | 00489 | 	mov	r2, 0x14
0xC1E3 | 0x33EC 0xC059 | 00490 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC1E5 | 0x13E8 0x0031 | 00491 | 	mov	r2, 0x31
0xC1E7 | 0x33EC 0xC065 | 00492 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC1E9 | 0x1396        | 00493 | 	mov	r2, 0x16
0xC1EA | 0x33EC 0xC059 | 00494 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC1EC | 0x13E8 0x0066 | 00495 | 	mov	r2, 0x66
0xC1EE | 0x33EC 0xC065 | 00496 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC1F0 | 0x1390        | 00497 | 	mov	r2, 0x10
0xC1F1 | 0x33EC 0xC059 | 00498 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC1F3 | 0x13E8 0x0045 | 00499 | 	mov	r2, 0x45
0xC1F5 | 0x33EC 0xC065 | 00500 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC1F7 | 0x1391        | 00501 | 	mov	r2, 0x11
0xC1F8 | 0x33EC 0xC059 | 00502 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC1FA | 0x13E8 0x0034 | 00503 | 	mov	r2, 0x34
0xC1FC | 0x33EC 0xC065 | 00504 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC1FE | 0x1392        | 00505 | 	mov	r2, 0x12
0xC1FF | 0x33EC 0xC059 | 00506 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC201 | 0x13E8 0x0033 | 00507 | 	mov	r2, 0x33
0xC203 | 0x33EC 0xC065 | 00508 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC205 | 0x1388        | 00509 | 	mov	r2, 0x8
0xC206 | 0x33EC 0xC059 | 00510 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC208 | 0x1384        | 00511 | 	mov	r2, 0x4
0xC209 | 0x33EC 0xC065 | 00512 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC20B | 0x1389        | 00513 | 	mov	r2, 0x9
0xC20C | 0x33EC 0xC059 | 00514 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC20E | 0x1385        | 00515 | 	mov	r2, 0x5
0xC20F | 0x33EC 0xC065 | 00516 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC211 | 0x138A        | 00517 | 	mov	r2, 0xa
0xC212 | 0x33EC 0xC059 | 00518 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC214 | 0x1385        | 00519 | 	mov	r2, 0x5
0xC215 | 0x33EC 0xC065 | 00520 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC217 | 0x138B        | 00521 | 	mov	r2, 0xb
0xC218 | 0x33EC 0xC059 | 00522 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC21A | 0x13E8 0x009D | 00523 | 	mov	r2, 0x9d
0xC21C | 0x33EC 0xC065 | 00524 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC21E | 0x138C        | 00525 | 	mov	r2, 0xc
0xC21F | 0x33EC 0xC059 | 00526 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC221 | 0x13E8 0x008C | 00527 | 	mov	r2, 0x8c
0xC223 | 0x33EC 0xC065 | 00528 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC225 | 0x138D        | 00529 | 	mov	r2, 0xd
0xC226 | 0x33EC 0xC059 | 00530 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC228 | 0x13E8 0x0057 | 00531 | 	mov	r2, 0x57
0xC22A | 0x33EC 0xC065 | 00532 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC22C | 0x13E8 0x0080 | 00533 | 	mov	r2, 0x80
0xC22E | 0x33EC 0xC059 | 00534 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC230 | 0x1380        | 00535 | 	mov	r2, 0x0
0xC231 | 0x33EC 0xC065 | 00536 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC233 | 0x1393        | 00537 | 	mov	r2, 0x13
0xC234 | 0x33EC 0xC059 | 00538 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC236 | 0x13E8 0x00A0 | 00539 | 	mov	r2, 0xa0
0xC238 | 0x33EC 0xC065 | 00540 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC23A | 0x1397        | 00541 | 	mov	r2, 0x17
0xC23B | 0x33EC 0xC059 | 00542 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC23D | 0x1380        | 00543 | 	mov	r2, 0x0
0xC23E | 0x33EC 0xC065 | 00544 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC240 | 0x1398        | 00545 | 	mov	r2, 0x18
0xC241 | 0x33EC 0xC059 | 00546 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC243 | 0x13E8 0x009F | 00547 | 	mov	r2, 0x9f
0xC245 | 0x33EC 0xC065 | 00548 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC247 | 0x1399        | 00549 | 	mov	r2, 0x19
0xC248 | 0x33EC 0xC059 | 00550 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC24A | 0x1380        | 00551 | 	mov	r2, 0x0
0xC24B | 0x33EC 0xC065 | 00552 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC24D | 0x139A        | 00553 | 	mov	r2, 0x1a
0xC24E | 0x33EC 0xC059 | 00554 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC250 | 0x13E8 0x007F | 00555 | 	mov	r2, 0x7f
0xC252 | 0x33EC 0xC065 | 00556 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC254 | 0x1386        | 00557 | 	mov	r2, 0x6
0xC255 | 0x33EC 0xC059 | 00558 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC257 | 0x1381        | 00559 | 	mov	r2, 0x1
0xC258 | 0x33EC 0xC065 | 00560 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC25A | 0xB7FF        | 00561 | 	ld	r6, sp, 0xffff          // 1-byte Folded Reload
0xC25B | 0x7FFF        | 00562 | 	sub	sp, sp, 0x1
0xC25C | 0x33E6        | 00563 | 	jsr	r6, r6
       |               | 00564 | 
       |               | 00565 | //align
       |               | 00566 | @ = (@ + 1-1)  & -1
0xC25D |               | 00567 | sxc__Z10OLEDThreadPv:                   // @_Z10OLEDThreadPv
       |               | 00568 | // BB#0:
0xC25D | 0x7F07        | 00569 | 	add	sp, sp, 0x7
0xC25E | 0xF7F9        | 00570 | 	st	r6, sp, 0xfff9          // 1-byte Folded Spill
0xC25F |               | 00571 | BB11_1:                                 // %.loopexit
       |               | 00572 |                                         // =>This Loop Header: Depth=1
       |               | 00573 |                                         //     Child Loop BB11_2 Depth 2
       |               | 00574 |                                         //     Child Loop BB11_4 Depth 2
       |               | 00575 |                                         //       Child Loop BB11_9 Depth 3
       |               | 00576 |                                         //       Child Loop BB11_8 Depth 3
       |               | 00577 |                                         //       Child Loop BB11_6 Depth 3
       |               | 00578 |                                         //     Child Loop BB11_16 Depth 2
       |               | 00579 |                                         //       Child Loop BB11_17 Depth 3
       |               | 00580 |                                         //         Child Loop BB11_18 Depth 4
       |               | 00581 |                                         //           Child Loop BB11_19 Depth 5
0xC25F | 0x33EC 0xC19D | 00582 | 	jsr	r6, sxc__Z19OLED_Init_160128RGBv
0xC261 | 0x33EC 0xC19D | 00583 | 	jsr	r6, sxc__Z19OLED_Init_160128RGBv
0xC263 | 0x1380        | 00584 | 	mov	r2, 0x0
0xC264 | 0x1B80        | 00585 | 	mov	r3, 0x0
0xC265 | 0x33EC 0xC08C | 00586 | 	jsr	r6, sxc__Z26OLED_SetPosition_160128RGBhh
0xC267 | 0x33EC 0xC071 | 00587 | 	jsr	r6, sxc__Z31OLED_WriteMemoryStart_160128RGBv
0xC269 | 0x03E8 0x5000 | 00588 | 	mov	r0, 0x5000
0xC26B |               | 00589 | BB11_2:                                 //   Parent Loop BB11_1 Depth=1
       |               | 00590 |                                         // =>  This Inner Loop Header: Depth=2
0xC26B | 0xC7FA        | 00591 | 	st	r0, sp, 0xfffa          // 1-byte Folded Spill
0xC26C | 0x1380        | 00592 | 	mov	r2, 0x0
0xC26D | 0x1B80        | 00593 | 	mov	r3, 0x0
0xC26E | 0x33EC 0xC07A | 00594 | 	jsr	r6, sxc__Z20OLED_Pixel_160128RGBm
0xC270 | 0x87FA        | 00595 | 	ld	r0, sp, 0xfffa          // 1-byte Folded Reload
0xC271 | 0x40FF        | 00596 | 	add	r0, r0, 0xffff
       |               | 00597 | 	//cmp	r0, 0x0
0xC272 | 0x28F8        | 00598 | 	bc	ZC, BB11_2
       |               | 00599 | // BB#3:                                // %_Z25OLED_FillScreen_160128RGBm.exit.i
       |               | 00600 |                                         //   in Loop: Header=BB11_1 Depth=1
0xC273 | 0x1394        | 00601 | 	mov	r2, 0x14
0xC274 | 0x1BE8 0x0032 | 00602 | 	mov	r3, 0x32
0xC276 | 0x23E8 0x0030 | 00603 | 	mov	r4, 0x30
0xC278 | 0x33EC 0xC0A1 | 00604 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC27A | 0x139B        | 00605 | 	mov	r2, 0x1b
0xC27B | 0x1BE8 0x0032 | 00606 | 	mov	r3, 0x32
0xC27D | 0x23E8 0x0052 | 00607 | 	mov	r4, 0x52
0xC27F | 0x33EC 0xC0A1 | 00608 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC281 | 0x13E8 0x0022 | 00609 | 	mov	r2, 0x22
0xC283 | 0x1BE8 0x0032 | 00610 | 	mov	r3, 0x32
0xC285 | 0x23E8 0x004F | 00611 | 	mov	r4, 0x4f
0xC287 | 0x33EC 0xC0A1 | 00612 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC289 | 0x13E8 0x0029 | 00613 | 	mov	r2, 0x29
0xC28B | 0x1BE8 0x0032 | 00614 | 	mov	r3, 0x32
0xC28D | 0x23E8 0x0047 | 00615 | 	mov	r4, 0x47
0xC28F | 0x33EC 0xC0A1 | 00616 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC291 | 0x13E8 0x0030 | 00617 | 	mov	r2, 0x30
0xC293 | 0x1BE8 0x0032 | 00618 | 	mov	r3, 0x32
0xC295 | 0x23E8 0x0052 | 00619 | 	mov	r4, 0x52
0xC297 | 0x33EC 0xC0A1 | 00620 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC299 | 0x13E8 0x0037 | 00621 | 	mov	r2, 0x37
0xC29B | 0x1BE8 0x0032 | 00622 | 	mov	r3, 0x32
0xC29D | 0x23E8 0x0045 | 00623 | 	mov	r4, 0x45
0xC29F | 0x33EC 0xC0A1 | 00624 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC2A1 | 0x13E8 0x003E | 00625 | 	mov	r2, 0x3e
0xC2A3 | 0x1BE8 0x0032 | 00626 | 	mov	r3, 0x32
0xC2A5 | 0x23E8 0x0053 | 00627 | 	mov	r4, 0x53
0xC2A7 | 0x33EC 0xC0A1 | 00628 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC2A9 | 0x13E8 0x0045 | 00629 | 	mov	r2, 0x45
0xC2AB | 0x1BE8 0x0032 | 00630 | 	mov	r3, 0x32
0xC2AD | 0x23E8 0x0053 | 00631 | 	mov	r4, 0x53
0xC2AF | 0x33EC 0xC0A1 | 00632 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC2B1 | 0x13E8 0x004C | 00633 | 	mov	r2, 0x4c
0xC2B3 | 0x1BE8 0x0032 | 00634 | 	mov	r3, 0x32
0xC2B5 | 0x239A        | 00635 | 	mov	r4, 0x1a
0xC2B6 | 0x33EC 0xC0A1 | 00636 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC2B8 | 0x1394        | 00637 | 	mov	r2, 0x14
0xC2B9 | 0x1B9E        | 00638 | 	mov	r3, 0x1e
0xC2BA | 0x23E8 0x0034 | 00639 | 	mov	r4, 0x34
0xC2BC | 0x33EC 0xC0A1 | 00640 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC2BE | 0x139B        | 00641 | 	mov	r2, 0x1b
0xC2BF | 0x1B9E        | 00642 | 	mov	r3, 0x1e
0xC2C0 | 0x23E8 0x0045 | 00643 | 	mov	r4, 0x45
0xC2C2 | 0x33EC 0xC0A1 | 00644 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC2C4 | 0x13E8 0x0022 | 00645 | 	mov	r2, 0x22
0xC2C6 | 0x1B9E        | 00646 | 	mov	r3, 0x1e
0xC2C7 | 0x23E8 0x004D | 00647 | 	mov	r4, 0x4d
0xC2C9 | 0x33EC 0xC0A1 | 00648 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC2CB | 0x13E8 0x0029 | 00649 | 	mov	r2, 0x29
0xC2CD | 0x1B9E        | 00650 | 	mov	r3, 0x1e
0xC2CE | 0x23E8 0x0050 | 00651 | 	mov	r4, 0x50
0xC2D0 | 0x33EC 0xC0A1 | 00652 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC2D2 | 0x13E8 0x0030 | 00653 | 	mov	r2, 0x30
0xC2D4 | 0x1B9E        | 00654 | 	mov	r3, 0x1e
0xC2D5 | 0x23E8 0x0045 | 00655 | 	mov	r4, 0x45
0xC2D7 | 0x33EC 0xC0A1 | 00656 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC2D9 | 0x13E8 0x0037 | 00657 | 	mov	r2, 0x37
0xC2DB | 0x1B9E        | 00658 | 	mov	r3, 0x1e
0xC2DC | 0x23E8 0x0052 | 00659 | 	mov	r4, 0x52
0xC2DE | 0x33EC 0xC0A1 | 00660 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC2E0 | 0x13E8 0x003E | 00661 | 	mov	r2, 0x3e
0xC2E2 | 0x1B9E        | 00662 | 	mov	r3, 0x1e
0xC2E3 | 0x23E8 0x0041 | 00663 | 	mov	r4, 0x41
0xC2E5 | 0x33EC 0xC0A1 | 00664 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC2E7 | 0x13E8 0x0045 | 00665 | 	mov	r2, 0x45
0xC2E9 | 0x1B9E        | 00666 | 	mov	r3, 0x1e
0xC2EA | 0x23E8 0x0054 | 00667 | 	mov	r4, 0x54
0xC2EC | 0x33EC 0xC0A1 | 00668 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC2EE | 0x13E8 0x004C | 00669 | 	mov	r2, 0x4c
0xC2F0 | 0x1B9E        | 00670 | 	mov	r3, 0x1e
0xC2F1 | 0x23E8 0x0055 | 00671 | 	mov	r4, 0x55
0xC2F3 | 0x33EC 0xC0A1 | 00672 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC2F5 | 0x13E8 0x0053 | 00673 | 	mov	r2, 0x53
0xC2F7 | 0x1B9E        | 00674 | 	mov	r3, 0x1e
0xC2F8 | 0x23E8 0x0052 | 00675 | 	mov	r4, 0x52
0xC2FA | 0x33EC 0xC0A1 | 00676 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC2FC | 0x13E8 0x005A | 00677 | 	mov	r2, 0x5a
0xC2FE | 0x1B9E        | 00678 | 	mov	r3, 0x1e
0xC2FF | 0x23E8 0x0045 | 00679 | 	mov	r4, 0x45
0xC301 | 0x33EC 0xC0A1 | 00680 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC303 | 0x13E8 0x0061 | 00681 | 	mov	r2, 0x61
0xC305 | 0x1B9E        | 00682 | 	mov	r3, 0x1e
0xC306 | 0x239A        | 00683 | 	mov	r4, 0x1a
0xC307 | 0x33EC 0xC0A1 | 00684 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC309 | 0x1394        | 00685 | 	mov	r2, 0x14
0xC30A | 0x1B8A        | 00686 | 	mov	r3, 0xa
0xC30B | 0x23E8 0x0028 | 00687 | 	mov	r4, 0x28
0xC30D | 0x33EC 0xC0A1 | 00688 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC30F | 0x139B        | 00689 | 	mov	r2, 0x1b
0xC310 | 0x1B8A        | 00690 | 	mov	r3, 0xa
0xC311 | 0x23E8 0x0055 | 00691 | 	mov	r4, 0x55
0xC313 | 0x33EC 0xC0A1 | 00692 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC315 | 0x13E8 0x0022 | 00693 | 	mov	r2, 0x22
0xC317 | 0x1B8A        | 00694 | 	mov	r3, 0xa
0xC318 | 0x23E8 0x004D | 00695 | 	mov	r4, 0x4d
0xC31A | 0x33EC 0xC0A1 | 00696 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC31C | 0x13E8 0x0029 | 00697 | 	mov	r2, 0x29
0xC31E | 0x1B8A        | 00698 | 	mov	r3, 0xa
0xC31F | 0x23E8 0x0049 | 00699 | 	mov	r4, 0x49
0xC321 | 0x33EC 0xC0A1 | 00700 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC323 | 0x13E8 0x0030 | 00701 | 	mov	r2, 0x30
0xC325 | 0x1B8A        | 00702 | 	mov	r3, 0xa
0xC326 | 0x23E8 0x0044 | 00703 | 	mov	r4, 0x44
0xC328 | 0x33EC 0xC0A1 | 00704 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC32A | 0x13E8 0x0037 | 00705 | 	mov	r2, 0x37
0xC32C | 0x1B8A        | 00706 | 	mov	r3, 0xa
0xC32D | 0x23E8 0x0049 | 00707 | 	mov	r4, 0x49
0xC32F | 0x33EC 0xC0A1 | 00708 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC331 | 0x13E8 0x003E | 00709 | 	mov	r2, 0x3e
0xC333 | 0x1B8A        | 00710 | 	mov	r3, 0xa
0xC334 | 0x23E8 0x0054 | 00711 | 	mov	r4, 0x54
0xC336 | 0x33EC 0xC0A1 | 00712 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC338 | 0x13E8 0x0045 | 00713 | 	mov	r2, 0x45
0xC33A | 0x1B8A        | 00714 | 	mov	r3, 0xa
0xC33B | 0x23E8 0x0059 | 00715 | 	mov	r4, 0x59
0xC33D | 0x33EC 0xC0A1 | 00716 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC33F | 0x13E8 0x004C | 00717 | 	mov	r2, 0x4c
0xC341 | 0x1B8A        | 00718 | 	mov	r3, 0xa
0xC342 | 0x239A        | 00719 | 	mov	r4, 0x1a
0xC343 | 0x33EC 0xC0A1 | 00720 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC345 | 0x03E8 0x0046 | 00721 | 	mov	r0, 0x46
0xC347 | 0x1380        | 00722 | 	mov	r2, 0x0
0xC348 |               | 00723 | BB11_4:                                 //   Parent Loop BB11_1 Depth=1
       |               | 00724 |                                         // =>  This Loop Header: Depth=2
       |               | 00725 |                                         //       Child Loop BB11_9 Depth 3
       |               | 00726 |                                         //       Child Loop BB11_8 Depth 3
       |               | 00727 |                                         //       Child Loop BB11_6 Depth 3
0xC348 | 0xD7FB        | 00728 | 	st	r2, sp, 0xfffb          // 1-byte Folded Spill
0xC349 | 0xC7FC        | 00729 | 	st	r0, sp, 0xfffc          // 1-byte Folded Spill
0xC34A | 0x1394        | 00730 | 	mov	r2, 0x14
0xC34B | 0x5800        | 00731 | 	add	r3, r0, 0x0
0xC34C | 0x33EC 0xC08C | 00732 | 	jsr	r6, sxc__Z26OLED_SetPosition_160128RGBhh
0xC34E | 0x33EC 0xC071 | 00733 | 	jsr	r6, sxc__Z31OLED_WriteMemoryStart_160128RGBv
0xC350 | 0x87FB        | 00734 | 	ld	r0, sp, 0xfffb          // 1-byte Folded Reload
0xC351 | 0x48E1        | 00735 | 	sub	r1, r0, 0x1f
0xC352 | 0x280C        | 00736 | 	bc	NE, BB11_7
       |               | 00737 | // BB#5:                                //   in Loop: Header=BB11_4 Depth=2
0xC353 | 0x03E8 0x0080 | 00738 | 	mov	r0, 0x80
0xC355 |               | 00739 | BB11_6:                                 // %.lr.ph.split.split.us.i.i
       |               | 00740 |                                         //   Parent Loop BB11_1 Depth=1
       |               | 00741 |                                         //     Parent Loop BB11_4 Depth=2
       |               | 00742 |                                         // =>    This Inner Loop Header: Depth=3
0xC355 | 0xC7FA        | 00743 | 	st	r0, sp, 0xfffa          // 1-byte Folded Spill
0xC356 | 0x13E8 0xF800 | 00744 | 	mov	r2, 0xf800
0xC358 | 0x1B80        | 00745 | 	mov	r3, 0x0
0xC359 | 0x33EC 0xC07A | 00746 | 	jsr	r6, sxc__Z20OLED_Pixel_160128RGBm
0xC35B | 0x87FA        | 00747 | 	ld	r0, sp, 0xfffa          // 1-byte Folded Reload
0xC35C | 0x40FF        | 00748 | 	add	r0, r0, 0xffff
       |               | 00749 | 	//cmp	r0, 0x0
0xC35D | 0x28F7        | 00750 | 	bc	ZC, BB11_6
0xC35E | 0x0120        | 00751 | 	bra	BB11_14
0xC35F |               | 00752 | BB11_7:                                 //   in Loop: Header=BB11_4 Depth=2
0xC35F | 0x1380        | 00753 | 	mov	r2, 0x0
0xC360 | 0x1BE8 0x0080 | 00754 | 	mov	r3, 0x80
0xC362 | 0x4800        | 00755 | 	sub	r1, r0, 0x0
0xC363 | 0x280A        | 00756 | 	bc	NE, BB11_9
0xC364 |               | 00757 | BB11_8:                                 // %.lr.ph.split.us..lr.ph.split.us.split_crit_edge.i.i
       |               | 00758 |                                         //   Parent Loop BB11_1 Depth=1
       |               | 00759 |                                         //     Parent Loop BB11_4 Depth=2
       |               | 00760 |                                         // =>    This Inner Loop Header: Depth=3
0xC364 | 0xDFFA        | 00761 | 	st	r3, sp, 0xfffa          // 1-byte Folded Spill
0xC365 | 0x13E8 0xF800 | 00762 | 	mov	r2, 0xf800
0xC367 | 0x1B80        | 00763 | 	mov	r3, 0x0
0xC368 | 0x33EC 0xC07A | 00764 | 	jsr	r6, sxc__Z20OLED_Pixel_160128RGBm
0xC36A | 0x9FFA        | 00765 | 	ld	r3, sp, 0xfffa          // 1-byte Folded Reload
0xC36B | 0x5BFF        | 00766 | 	add	r3, r3, 0xffff
       |               | 00767 | 	//cmp	r3, 0x0
0xC36C | 0x28F7        | 00768 | 	bc	ZC, BB11_8
0xC36D | 0x0111        | 00769 | 	bra	BB11_14
0xC36E |               | 00770 | BB11_9:                                 // %.lr.ph.split..lr.ph.split.split_crit_edge.i.i
       |               | 00771 |                                         //   Parent Loop BB11_1 Depth=1
       |               | 00772 |                                         //     Parent Loop BB11_4 Depth=2
       |               | 00773 |                                         // =>    This Inner Loop Header: Depth=3
0xC36E | 0x4A00        | 00774 | 	sub	r1, r2, 0x0
0xC36F | 0x0802        | 00775 | 	bc	EQ, BB11_11
       |               | 00776 | // BB#10:                               // %.lr.ph.split..lr.ph.split.split_crit_edge.i.i
       |               | 00777 |                                         //   in Loop: Header=BB11_9 Depth=3
0xC370 | 0x4A81        | 00778 | 	sub	r1, r2, 0x7f
0xC371 | 0x2804        | 00779 | 	bc	NE, BB11_12
0xC372 |               | 00780 | BB11_11:                                //   in Loop: Header=BB11_9 Depth=3
0xC372 | 0xD7FA        | 00781 | 	st	r2, sp, 0xfffa          // 1-byte Folded Spill
0xC373 | 0x13E8 0xF800 | 00782 | 	mov	r2, 0xf800
0xC375 | 0x0102        | 00783 | 	bra	BB11_13
0xC376 |               | 00784 | BB11_12:                                //   in Loop: Header=BB11_9 Depth=3
0xC376 | 0xD7FA        | 00785 | 	st	r2, sp, 0xfffa          // 1-byte Folded Spill
0xC377 | 0x1380        | 00786 | 	mov	r2, 0x0
0xC378 |               | 00787 | BB11_13:                                //   in Loop: Header=BB11_9 Depth=3
0xC378 | 0x1B80        | 00788 | 	mov	r3, 0x0
0xC379 | 0x33EC 0xC07A | 00789 | 	jsr	r6, sxc__Z20OLED_Pixel_160128RGBm
0xC37B | 0x97FA        | 00790 | 	ld	r2, sp, 0xfffa          // 1-byte Folded Reload
0xC37C | 0x5201        | 00791 | 	add	r2, r2, 0x1
0xC37D | 0x4A80        | 00792 | 	sub	r1, r2, 0x80
0xC37E | 0x28EF        | 00793 | 	bc	NE, BB11_9
0xC37F |               | 00794 | BB11_14:                                // %._crit_edge.i.i
       |               | 00795 |                                         //   in Loop: Header=BB11_4 Depth=2
0xC37F | 0x87FC        | 00796 | 	ld	r0, sp, 0xfffc          // 1-byte Folded Reload
0xC380 | 0x4001        | 00797 | 	add	r0, r0, 0x1
0xC381 | 0x97FB        | 00798 | 	ld	r2, sp, 0xfffb          // 1-byte Folded Reload
0xC382 | 0x5201        | 00799 | 	add	r2, r2, 0x1
0xC383 | 0x4AE0        | 00800 | 	sub	r1, r2, 0x20
0xC384 | 0x28C3        | 00801 | 	bc	NE, BB11_4
       |               | 00802 | // BB#15:                               // %_Z15OLED_Start_Pagev.exit
       |               | 00803 |                                         //   in Loop: Header=BB11_1 Depth=1
0xC385 | 0x0380        | 00804 | 	mov	r0, 0x0
0xC386 | 0xC7FF        | 00805 | 	st	r0, sp, 0xffff          // 1-byte Folded Spill
0xC387 | 0x1380        | 00806 | 	mov	r2, 0x0
0xC388 | 0x33EC 0xC155 | 00807 | 	jsr	r6, sxc__Z8Draw_Barhhmmjjj
0xC38A | 0x13E8 0x0053 | 00808 | 	mov	r2, 0x53
0xC38C | 0x1BE8 0x0032 | 00809 | 	mov	r3, 0x32
0xC38E | 0x2380        | 00810 | 	mov	r4, 0x0
0xC38F | 0x2B81        | 00811 | 	mov	r5, 0x1
0xC390 | 0x33EC 0xC0D5 | 00812 | 	jsr	r6, sxc__Z21OLED_Print_Sensor_Valhhjj
0xC392 | 0x13E8 0x0068 | 00813 | 	mov	r2, 0x68
0xC394 | 0x1B9E        | 00814 | 	mov	r3, 0x1e
0xC395 | 0x23E8 0x00DF | 00815 | 	mov	r4, 0xdf
0xC397 | 0x2B80        | 00816 | 	mov	r5, 0x0
0xC398 | 0x33EC 0xC0D5 | 00817 | 	jsr	r6, sxc__Z21OLED_Print_Sensor_Valhhjj
0xC39A | 0x13E8 0x0053 | 00818 | 	mov	r2, 0x53
0xC39C | 0x1B8A        | 00819 | 	mov	r3, 0xa
0xC39D | 0x23E8 0x0030 | 00820 | 	mov	r4, 0x30
0xC39F | 0x2B81        | 00821 | 	mov	r5, 0x1
0xC3A0 | 0x33EC 0xC0D5 | 00822 | 	jsr	r6, sxc__Z21OLED_Print_Sensor_Valhhjj
0xC3A2 |               | 00823 | BB11_16:                                //   Parent Loop BB11_1 Depth=1
       |               | 00824 |                                         // =>  This Loop Header: Depth=2
       |               | 00825 |                                         //       Child Loop BB11_17 Depth 3
       |               | 00826 |                                         //         Child Loop BB11_18 Depth 4
       |               | 00827 |                                         //           Child Loop BB11_19 Depth 5
0xC3A2 | 0x03E8 0x0053 | 00828 | 	mov	r0, 0x53
0xC3A4 | 0xC7FD        | 00829 | 	st	r0, sp, 0xfffd          // 1-byte Folded Spill
0xC3A5 | 0x13E8 0x0053 | 00830 | 	mov	r2, 0x53
0xC3A7 | 0x1BE8 0x0032 | 00831 | 	mov	r3, 0x32
0xC3A9 | 0x33EC 0xC08C | 00832 | 	jsr	r6, sxc__Z26OLED_SetPosition_160128RGBhh
0xC3AB | 0x33EC 0xC071 | 00833 | 	jsr	r6, sxc__Z31OLED_WriteMemoryStart_160128RGBv
0xC3AD | 0x0380        | 00834 | 	mov	r0, 0x0
0xC3AE |               | 00835 | BB11_17:                                // %.preheader.i
       |               | 00836 |                                         //   Parent Loop BB11_1 Depth=1
       |               | 00837 |                                         //     Parent Loop BB11_16 Depth=2
       |               | 00838 |                                         // =>    This Loop Header: Depth=3
       |               | 00839 |                                         //         Child Loop BB11_18 Depth 4
       |               | 00840 |                                         //           Child Loop BB11_19 Depth 5
0xC3AE | 0xC7FE        | 00841 | 	st	r0, sp, 0xfffe          // 1-byte Folded Spill
0xC3AF | 0x03E8 0x0032 | 00842 | 	mov	r0, 0x32
0xC3B1 | 0x1380        | 00843 | 	mov	r2, 0x0
0xC3B2 |               | 00844 | BB11_18:                                //   Parent Loop BB11_1 Depth=1
       |               | 00845 |                                         //     Parent Loop BB11_16 Depth=2
       |               | 00846 |                                         //       Parent Loop BB11_17 Depth=3
       |               | 00847 |                                         // =>      This Loop Header: Depth=4
       |               | 00848 |                                         //           Child Loop BB11_19 Depth 5
0xC3B2 | 0xD7FC        | 00849 | 	st	r2, sp, 0xfffc          // 1-byte Folded Spill
0xC3B3 | 0xC7FB        | 00850 | 	st	r0, sp, 0xfffb          // 1-byte Folded Spill
0xC3B4 | 0x97FD        | 00851 | 	ld	r2, sp, 0xfffd          // 1-byte Folded Reload
0xC3B5 | 0x5800        | 00852 | 	add	r3, r0, 0x0
0xC3B6 | 0x33EC 0xC08C | 00853 | 	jsr	r6, sxc__Z26OLED_SetPosition_160128RGBhh
0xC3B8 | 0x33EC 0xC071 | 00854 | 	jsr	r6, sxc__Z31OLED_WriteMemoryStart_160128RGBv
0xC3BA | 0x0385        | 00855 | 	mov	r0, 0x5
0xC3BB |               | 00856 | BB11_19:                                //   Parent Loop BB11_1 Depth=1
       |               | 00857 |                                         //     Parent Loop BB11_16 Depth=2
       |               | 00858 |                                         //       Parent Loop BB11_17 Depth=3
       |               | 00859 |                                         //         Parent Loop BB11_18 Depth=4
       |               | 00860 |                                         // =>        This Inner Loop Header: Depth=5
0xC3BB | 0xC7FA        | 00861 | 	st	r0, sp, 0xfffa          // 1-byte Folded Spill
0xC3BC | 0x1380        | 00862 | 	mov	r2, 0x0
0xC3BD | 0x1B80        | 00863 | 	mov	r3, 0x0
0xC3BE | 0x33EC 0xC07A | 00864 | 	jsr	r6, sxc__Z20OLED_Pixel_160128RGBm
0xC3C0 | 0x87FA        | 00865 | 	ld	r0, sp, 0xfffa          // 1-byte Folded Reload
0xC3C1 | 0x40FF        | 00866 | 	add	r0, r0, 0xffff
       |               | 00867 | 	//cmp	r0, 0x0
0xC3C2 | 0x28F8        | 00868 | 	bc	ZC, BB11_19
       |               | 00869 | // BB#20:                               //   in Loop: Header=BB11_18 Depth=4
0xC3C3 | 0x87FB        | 00870 | 	ld	r0, sp, 0xfffb          // 1-byte Folded Reload
0xC3C4 | 0x4001        | 00871 | 	add	r0, r0, 0x1
0xC3C5 | 0x97FC        | 00872 | 	ld	r2, sp, 0xfffc          // 1-byte Folded Reload
0xC3C6 | 0x5201        | 00873 | 	add	r2, r2, 0x1
0xC3C7 | 0x4AF8        | 00874 | 	sub	r1, r2, 0x8
0xC3C8 | 0x28E9        | 00875 | 	bc	NE, BB11_18
       |               | 00876 | // BB#21:                               //   in Loop: Header=BB11_17 Depth=3
0xC3C9 | 0x87FD        | 00877 | 	ld	r0, sp, 0xfffd          // 1-byte Folded Reload
0xC3CA | 0x4007        | 00878 | 	add	r0, r0, 0x7
0xC3CB | 0xC7FD        | 00879 | 	st	r0, sp, 0xfffd          // 1-byte Folded Spill
0xC3CC | 0x87FE        | 00880 | 	ld	r0, sp, 0xfffe          // 1-byte Folded Reload
0xC3CD | 0x4001        | 00881 | 	add	r0, r0, 0x1
0xC3CE | 0x48F9        | 00882 | 	sub	r1, r0, 0x7
0xC3CF | 0x28DE        | 00883 | 	bc	NE, BB11_17
       |               | 00884 | // BB#22:                               // %_Z16Clear_Data_Charshhm.exit
       |               | 00885 |                                         //   in Loop: Header=BB11_16 Depth=2
0xC3D0 | 0x13E8 0x0053 | 00886 | 	mov	r2, 0x53
0xC3D2 | 0x1BE8 0x0032 | 00887 | 	mov	r3, 0x32
0xC3D4 | 0xA7FF        | 00888 | 	ld	r4, sp, 0xffff          // 1-byte Folded Reload
0xC3D5 | 0x2B81        | 00889 | 	mov	r5, 0x1
0xC3D6 | 0x33EC 0xC0D5 | 00890 | 	jsr	r6, sxc__Z21OLED_Print_Sensor_Valhhjj
0xC3D8 | 0x97FF        | 00891 | 	ld	r2, sp, 0xffff          // 1-byte Folded Reload
0xC3D9 | 0x33EC 0xC155 | 00892 | 	jsr	r6, sxc__Z8Draw_Barhhmmjjj
0xC3DB | 0x13E8 0x01F4 | 00893 | 	mov	r2, 0x1f4
0xC3DD | 0x33EC 0xC01F | 00894 | 	jsr	r6, sxc__Z7wait_msj
0xC3DF | 0x87FF        | 00895 | 	ld	r0, sp, 0xffff          // 1-byte Folded Reload
0xC3E0 | 0x4001        | 00896 | 	add	r0, r0, 0x1
0xC3E1 | 0xC7FF        | 00897 | 	st	r0, sp, 0xffff          // 1-byte Folded Spill
0xC3E2 | 0x489B        | 00898 | 	sub	r1, r0, 0x65
0xC3E3 | 0x0800 0xFE7A | 00899 | 	bc	EQ, BB11_1
0xC3E5 | 0x01BC        | 00900 | 	bra	BB11_16
       |               | 00901 | 
       |               | 00902 | //align
       |               | 00903 | @ = (@ + 1-1)  & -1
0xC3E6 |               | 00904 | sxc__Z10TempThreadPv:                   // @_Z10TempThreadPv
       |               | 00905 | // BB#0:
0xC3E6 | 0x7F01        | 00906 | 	add	sp, sp, 0x1
0xC3E7 | 0xF7FF        | 00907 | 	st	r6, sp, 0xffff          // 1-byte Folded Spill
0xC3E8 | 0x0BE8 0xCBFD | 00908 | 	mov	r1, sxc_.str5
       |               | 00909 | 	//APP
0xC3EA | 0x33EC 0x18BB | 00910 | 		jsr	r6, XPD_EchoString
       |               | 00911 | 	//NO_APP
0xC3EC | 0x0B80        | 00912 | 	mov	r1, 0x0
       |               | 00913 | 	//APP
0xC3ED | 0x33EC 0x1929 | 00914 | 		jsr	r6, XPD_EchoSignedDec
       |               | 00915 | 	//NO_APP
0xC3EF | 0x0BE8 0xCC0D | 00916 | 	mov	r1, sxc_.str6
       |               | 00917 | 	//APP
0xC3F1 | 0x33EC 0x18BB | 00918 | 		jsr	r6, XPD_EchoString
       |               | 00919 | 	//NO_APP
0xC3F3 | 0x13E8 0x03E8 | 00920 | 	mov	r2, 0x3e8
0xC3F5 | 0x33EC 0xC01F | 00921 | 	jsr	r6, sxc__Z7wait_msj
       |               | 00922 | 
       |               | 00923 | //align
       |               | 00924 | @ = (@ + 1-1)  & -1
0xC3F7 |               | 00925 | sxc__Z9PIDThreadPv:                     // @_Z9PIDThreadPv
       |               | 00926 | // BB#0:
0xC3F7 | 0x03E8 0x005B | 00927 | 	mov	r0, 0x5b
0xC3F9 | 0x02BE        | 00928 | 	outp	r0, 0x3e
0xC3FA | 0x0382        | 00929 | 	mov	r0, 0x2
0xC3FB | 0x02C3        | 00930 | 	outp	r0, 0x43
0xC3FC | 0x02C5        | 00931 | 	outp	r0, 0x45
0xC3FD | 0x03E8 0xBB80 | 00932 | 	mov	r0, 0xbb80
0xC3FF | 0x02C0        | 00933 | 	outp	r0, 0x40
0xC400 | 0x0BE8 0x5DC0 | 00934 | 	mov	r1, 0x5dc0
0xC402 | 0x0AC2        | 00935 | 	outp	r1, 0x42
0xC403 | 0x02C4        | 00936 | 	outp	r0, 0x44
0xC404 | 0x0380        | 00937 | 	mov	r0, 0x0
0xC405 | 0x5000        | 00938 | 	add	r2, r0, 0x0
0xC406 | 0x0103        | 00939 | 	bra	BB13_1
0xC407 |               | 00940 | BB13_7:                                 //   in Loop: Header=BB13_1 Depth=1
0xC407 | 0x0EBB        | 00941 | 	and	r1, r3, 0xff7f
0xC408 | 0x0AA6        | 00942 | 	outp	r1, 0x26
0xC409 | 0x1381        | 00943 | 	mov	r2, 0x1
0xC40A |               | 00944 | BB13_1:                                 // %_Z12led_control2j.exit
       |               | 00945 |                                         // =>This Inner Loop Header: Depth=1
0xC40A | 0x0A3E        | 00946 | 	inp	r1, 0x3e
0xC40B | 0x1A43        | 00947 | 	inp	r3, 0x43
0xC40C | 0x0D8B        | 00948 | 	ior	r1, r3, r1
0xC40D | 0x4900        | 00949 | 	sub	r1, r1, 0x0
0xC40E | 0x380A        | 00950 | 	bc	GT, BB13_5
       |               | 00951 | // BB#2:                                //   in Loop: Header=BB13_1 Depth=1
0xC40F | 0x1A32        | 00952 | 	inp	r3, 0x32
0xC410 | 0x4800        | 00953 | 	sub	r1, r0, 0x0
0xC411 | 0x2804        | 00954 | 	bc	NE, BB13_4
       |               | 00955 | // BB#3:                                //   in Loop: Header=BB13_1 Depth=1
0xC412 | 0x068B        | 00956 | 	and	r0, r3, 0xfffd
0xC413 | 0x02B2        | 00957 | 	outp	r0, 0x32
0xC414 | 0x0381        | 00958 | 	mov	r0, 0x1
0xC415 | 0x0103        | 00959 | 	bra	BB13_5
0xC416 |               | 00960 | BB13_4:                                 //   in Loop: Header=BB13_1 Depth=1
0xC416 | 0x070B        | 00961 | 	ior	r0, r3, 0x2
0xC417 | 0x02B2        | 00962 | 	outp	r0, 0x32
0xC418 | 0x0380        | 00963 | 	mov	r0, 0x0
0xC419 |               | 00964 | BB13_5:                                 // %_Z12led_control1j.exit
       |               | 00965 |                                         //   in Loop: Header=BB13_1 Depth=1
0xC419 | 0x0A45        | 00966 | 	inp	r1, 0x45
       |               | 00967 | 	//cmp	r1, 0x0
0xC41A | 0x2CEF        | 00968 | 	bc	NC, BB13_1
       |               | 00969 | // BB#6:                                //   in Loop: Header=BB13_1 Depth=1
0xC41B | 0x1A26        | 00970 | 	inp	r3, 0x26
0xC41C | 0x4A00        | 00971 | 	sub	r1, r2, 0x0
0xC41D | 0x08E9        | 00972 | 	bc	EQ, BB13_7
       |               | 00973 | // BB#8:                                //   in Loop: Header=BB13_1 Depth=1
0xC41E | 0x0F3B        | 00974 | 	ior	r1, r3, 0x80
0xC41F | 0x0AA6        | 00975 | 	outp	r1, 0x26
0xC420 | 0x1380        | 00976 | 	mov	r2, 0x0
0xC421 | 0x01E8        | 00977 | 	bra	BB13_1
       |               | 00978 | 
       |               | 00979 | //sxc_main
       |               | 00980 | //align
       |               | 00981 | @ = (@ + 1-1)  & -1
0xC422 |               | 00982 | sxc_main:                               // @main
       |               | 00983 | // BB#0:
0xC422 | 0x0396        | 00984 | 	mov	r0, 0x16
0xC423 | 0x02F0        | 00985 | 	outp	r0, 0x70
0xC424 | 0x03E8 0x0073 | 00986 | 	mov	r0, 0x73
0xC426 | 0x02F1        | 00987 | 	outp	r0, 0x71
0xC427 | 0x0272        | 00988 | 	inp	r0, 0x72
0xC428 | 0x06D0        | 00989 | 	and	r0, r0, 0xfbff
0xC429 | 0x02F2        | 00990 | 	outp	r0, 0x72
0xC42A |               | 00991 | BB14_1:                                 // =>This Inner Loop Header: Depth=1
0xC42A | 0x0272        | 00992 | 	inp	r0, 0x72
       |               | 00993 | 	//cmp	r0, 0x0
0xC42B | 0x0CFE        | 00994 | 	bc	LT0, BB14_1
       |               | 00995 | // BB#2:
0xC42C | 0x0381        | 00996 | 	mov	r0, 0x1
0xC42D | 0x02F5        | 00997 | 	outp	r0, 0x75
0xC42E | 0x03E8 0x0805 | 00998 | 	mov	r0, 0x805
0xC430 | 0x02F4        | 00999 | 	outp	r0, 0x74
0xC431 | 0x0272        | 01000 | 	inp	r0, 0x72
0xC432 | 0x06D0        | 01001 | 	and	r0, r0, 0xfbff
0xC433 | 0x02F2        | 01002 | 	outp	r0, 0x72
0xC434 |               | 01003 | BB14_3:                                 // =>This Inner Loop Header: Depth=1
0xC434 | 0x0272        | 01004 | 	inp	r0, 0x72
       |               | 01005 | 	//cmp	r0, 0x0
0xC435 | 0x0CFE        | 01006 | 	bc	LT0, BB14_3
       |               | 01007 | // BB#4:
0xC436 | 0x0272        | 01008 | 	inp	r0, 0x72
0xC437 | 0x03D0 0x0C00 | 01009 | 	ior	r0, r0, 0xc00
0xC439 | 0x02F2        | 01010 | 	outp	r0, 0x72
0xC43A |               | 01011 | BB14_5:                                 // =>This Inner Loop Header: Depth=1
0xC43A | 0x0272        | 01012 | 	inp	r0, 0x72
       |               | 01013 | 	//cmp	r0, 0x0
0xC43B | 0x2CFE        | 01014 | 	bc	NC, BB14_5
       |               | 01015 | // BB#6:                                // %_Z8InitGPIOv.exit
0xC43C | 0x03E8 0x8183 | 01016 | 	mov	r0, 0x8183
0xC43E | 0x02F3        | 01017 | 	outp	r0, 0x73
0xC43F | 0x038F        | 01018 | 	mov	r0, 0xf
0xC440 | 0x02B7        | 01019 | 	outp	r0, 0x37
0xC441 | 0x03E8 0x1000 | 01020 | 	mov	r0, 0x1000
0xC443 | 0x02A7        | 01021 | 	outp	r0, 0x27
0xC444 | 0x03E8 0x0700 | 01022 | 	mov	r0, 0x700
0xC446 | 0x02A1        | 01023 | 	outp	r0, 0x21
0xC447 | 0x0220        | 01024 | 	inp	r0, 0x20
0xC448 | 0x0710        | 01025 | 	ior	r0, r0, 0x4
0xC449 | 0x02A0        | 01026 | 	outp	r0, 0x20
0xC44A | 0x0226        | 01027 | 	inp	r0, 0x26
0xC44B | 0x0720        | 01028 | 	ior	r0, r0, 0x10
0xC44C | 0x02A6        | 01029 | 	outp	r0, 0x26
0xC44D | 0x0BE8 0x0100 | 01030 | 	mov	r1, 0x100
0xC44F | 0x0AB3        | 01031 | 	outp	r1, 0x33
0xC450 | 0x0232        | 01032 | 	inp	r0, 0x32
0xC451 | 0x0700        | 01033 | 	ior	r0, r0, 0x1
0xC452 | 0x02B2        | 01034 | 	outp	r0, 0x32
0xC453 | 0x03E8 0x8000 | 01035 | 	mov	r0, 0x8000
0xC455 | 0x02A7        | 01036 | 	outp	r0, 0x27
0xC456 | 0x13E8 0x0200 | 01037 | 	mov	r2, 0x200
0xC458 | 0x12B3        | 01038 | 	outp	r2, 0x33
0xC459 | 0x0AB3        | 01039 | 	outp	r1, 0x33
0xC45A | 0x0A32        | 01040 | 	inp	r1, 0x32
0xC45B | 0x0F01        | 01041 | 	ior	r1, r1, 0x1
0xC45C | 0x0AB2        | 01042 | 	outp	r1, 0x32
0xC45D | 0x0287        | 01043 | 	outp	r0, 0x7
0xC45E | 0x0B8A        | 01044 | 	mov	r1, 0xa
0xC45F | 0x0A83        | 01045 | 	outp	r1, 0x3
0xC460 | 0x0B80        | 01046 | 	mov	r1, 0x0
0xC461 | 0x0A80        | 01047 | 	outp	r1, 0x0
0xC462 | 0x13E8 0xC25D | 01048 | 	mov	r2, sxc__Z10OLEDThreadPv
0xC464 | 0x1281        | 01049 | 	outp	r2, 0x1
0xC465 | 0x0286        | 01050 | 	outp	r0, 0x6
0xC466 | 0x0287        | 01051 | 	outp	r0, 0x7
0xC467 | 0x13EA 0xCA08 | 01052 | 	ld	r2, thrds_vector
0xC469 | 0x168A        | 01053 | 	and	r2, r2, 0xfffd
0xC46A | 0x13EB 0xCA08 | 01054 | 	st	r2, thrds_vector
0xC46C | 0x1284        | 01055 | 	outp	r2, 0x4
0xC46D | 0x0286        | 01056 | 	outp	r0, 0x6
0xC46E | 0x0287        | 01057 | 	outp	r0, 0x7
0xC46F | 0x1392        | 01058 | 	mov	r2, 0x12
0xC470 | 0x1283        | 01059 | 	outp	r2, 0x3
0xC471 | 0x0A80        | 01060 | 	outp	r1, 0x0
0xC472 | 0x13E8 0xC3E6 | 01061 | 	mov	r2, sxc__Z10TempThreadPv
0xC474 | 0x1281        | 01062 | 	outp	r2, 0x1
0xC475 | 0x0286        | 01063 | 	outp	r0, 0x6
0xC476 | 0x0287        | 01064 | 	outp	r0, 0x7
0xC477 | 0x13EA 0xCA08 | 01065 | 	ld	r2, thrds_vector
0xC479 | 0x1692        | 01066 | 	and	r2, r2, 0xfffb
0xC47A | 0x13EB 0xCA08 | 01067 | 	st	r2, thrds_vector
0xC47C | 0x1284        | 01068 | 	outp	r2, 0x4
0xC47D | 0x0286        | 01069 | 	outp	r0, 0x6
0xC47E | 0x0287        | 01070 | 	outp	r0, 0x7
0xC47F | 0x139A        | 01071 | 	mov	r2, 0x1a
0xC480 | 0x1283        | 01072 | 	outp	r2, 0x3
0xC481 | 0x0A80        | 01073 | 	outp	r1, 0x0
0xC482 | 0x0BE8 0xC3F7 | 01074 | 	mov	r1, sxc__Z9PIDThreadPv
0xC484 | 0x0A81        | 01075 | 	outp	r1, 0x1
0xC485 | 0x0286        | 01076 | 	outp	r0, 0x6
0xC486 | 0x0287        | 01077 | 	outp	r0, 0x7
0xC487 | 0x0BEA 0xCA08 | 01078 | 	ld	r1, thrds_vector
0xC489 | 0x0E99        | 01079 | 	and	r1, r1, 0xfff7
0xC48A | 0x0BEB 0xCA08 | 01080 | 	st	r1, thrds_vector
0xC48C | 0x0A84        | 01081 | 	outp	r1, 0x4
0xC48D | 0x0286        | 01082 | 	outp	r0, 0x6
0xC48E | 0x0380        | 01083 | 	mov	r0, 0x0
0xC48F | 0x33E6        | 01084 | 	jsr	r6, r6
       |               | 01085 | 
       |               | 01086 | //align
       |               | 01087 | @ = (@ + 1-1)  & -1
0xC490 |               | 01088 | sxc___xinc_udiv:                        // @__xinc_udiv
       |               | 01089 | // BB#0:
0xC490 | 0x7F01        | 01090 | 	add	sp, sp, 0x1
0xC491 | 0xF7FF        | 01091 | 	st	r6, sp, 0xffff          // 1-byte Folded Spill
0xC492 | 0x4A00        | 01092 | 	add	r1, r2, 0x0
0xC493 | 0x5300        | 01093 | 	add	r2, r3, 0x0
       |               | 01094 | 	//APP
0xC494 | 0x33EC 0x1816 | 01095 | 	jsr	r6, UnsignedDivide
       |               | 01096 | 	//NO_APP
0xC496 | 0x4100        | 01097 | 	add	r0, r1, 0x0
0xC497 | 0xB7FF        | 01098 | 	ld	r6, sp, 0xffff          // 1-byte Folded Reload
0xC498 | 0x7FFF        | 01099 | 	sub	sp, sp, 0x1
0xC499 | 0x33E6        | 01100 | 	jsr	r6, r6
       |               | 01101 | 
       |               | 01102 | //align
       |               | 01103 | @ = (@ + 1-1)  & -1
0xC49A |               | 01104 | sxc___xinc_umod:                        // @__xinc_umod
       |               | 01105 | // BB#0:
0xC49A | 0x7F01        | 01106 | 	add	sp, sp, 0x1
0xC49B | 0xF7FF        | 01107 | 	st	r6, sp, 0xffff          // 1-byte Folded Spill
0xC49C | 0x4A00        | 01108 | 	add	r1, r2, 0x0
0xC49D | 0x5300        | 01109 | 	add	r2, r3, 0x0
       |               | 01110 | 	//APP
0xC49E | 0x33EC 0x1816 | 01111 | 	jsr	r6, UnsignedDivide
       |               | 01112 | 	//NO_APP
0xC4A0 | 0x4200        | 01113 | 	add	r0, r2, 0x0
0xC4A1 | 0xB7FF        | 01114 | 	ld	r6, sp, 0xffff          // 1-byte Folded Reload
0xC4A2 | 0x7FFF        | 01115 | 	sub	sp, sp, 0x1
0xC4A3 | 0x33E6        | 01116 | 	jsr	r6, r6
       |               | 01117 | 
       |               | 01118 | //align
       |               | 01119 | @ = (@ + 1-1)  & -1
0xC4A4 |               | 01120 | sxc_memset:                             // @memset
       |               | 01121 | // BB#0:
0xC4A4 | 0x4C00        | 01122 | 	sub	r1, r4, 0x0
0xC4A5 | 0x0805        | 01123 | 	bc	EQ, BB17_3
       |               | 01124 | // BB#1:
0xC4A6 | 0x4200        | 01125 | 	add	r0, r2, 0x0
0xC4A7 |               | 01126 | BB17_2:                                 // %.lr.ph
       |               | 01127 |                                         // =>This Inner Loop Header: Depth=1
0xC4A7 | 0xD800        | 01128 | 	st	r3, r0, 0x0
0xC4A8 | 0x4001        | 01129 | 	add	r0, r0, 0x1
0xC4A9 | 0x64FF        | 01130 | 	add	r4, r4, 0xffff
       |               | 01131 | 	//cmp	r4, 0x0
0xC4AA | 0x28FC        | 01132 | 	bc	ZC, BB17_2
0xC4AB |               | 01133 | BB17_3:                                 // %._crit_edge
0xC4AB | 0x4200        | 01134 | 	add	r0, r2, 0x0
0xC4AC | 0x33E6        | 01135 | 	jsr	r6, r6
       |               | 01136 | 
       |               | 01137 | //align
       |               | 01138 | @ = (@ + 1-1)  & -1
0xC4AD |               | 01139 | sxc_memcpy:                             // @memcpy
       |               | 01140 | // BB#0:
0xC4AD | 0x0B5A        | 01141 | 	sub	r1, r2, r3
0xC4AE | 0x0809        | 01142 | 	bc	EQ, BB18_4
       |               | 01143 | // BB#1:
0xC4AF | 0x4C00        | 01144 | 	sub	r1, r4, 0x0
0xC4B0 | 0x0807        | 01145 | 	bc	EQ, BB18_4
       |               | 01146 | // BB#2:
0xC4B1 | 0x4200        | 01147 | 	add	r0, r2, 0x0
0xC4B2 |               | 01148 | BB18_3:                                 // %.lr.ph.i
       |               | 01149 |                                         // =>This Inner Loop Header: Depth=1
0xC4B2 | 0x8B00        | 01150 | 	ld	r1, r3, 0x0
0xC4B3 | 0xC800        | 01151 | 	st	r1, r0, 0x0
0xC4B4 | 0x5B01        | 01152 | 	add	r3, r3, 0x1
0xC4B5 | 0x4001        | 01153 | 	add	r0, r0, 0x1
0xC4B6 | 0x64FF        | 01154 | 	add	r4, r4, 0xffff
       |               | 01155 | 	//cmp	r4, 0x0
0xC4B7 | 0x28FA        | 01156 | 	bc	ZC, BB18_3
0xC4B8 |               | 01157 | BB18_4:                                 // %memcpy_base.exit
0xC4B8 | 0x4200        | 01158 | 	add	r0, r2, 0x0
0xC4B9 | 0x33E6        | 01159 | 	jsr	r6, r6
       |               | 01160 | 
       |               | 01161 | //align
       |               | 01162 | @ = (@ + 1-1)  & -1
0xC4BA |               | 01163 | sxc_memmove:                            // @memmove
       |               | 01164 | // BB#0:
0xC4BA | 0x0381        | 01165 | 	mov	r0, 0x1
0xC4BB | 0x2B81        | 01166 | 	mov	r5, 0x1
0xC4BC | 0x4C00        | 01167 | 	sub	r1, r4, 0x0
0xC4BD | 0x0801        | 01168 | 	bc	EQ, @ + 1 + 0x1
0xC4BE | 0x2B80        | 01169 | 	mov	r5, 0x0 //Select--False
0xC4BF | 0x0B5A        | 01170 | 	sub	r1, r2, r3
0xC4C0 | 0x0801        | 01171 | 	bc	EQ, @ + 1 + 0x1
0xC4C1 | 0x0380        | 01172 | 	mov	r0, 0x0 //Select--False
0xC4C2 | 0x05A8        | 01173 | 	ior	r0, r0, r5
0xC4C3 | 0x0B53        | 01174 | 	sub	r1, r3, r2
0xC4C4 | 0x200D        | 01175 | 	bc	UGE, BB19_1
       |               | 01176 | // BB#4:
0xC4C5 | 0x03C8 0x0001 | 01177 | 	and	r0, r0, 0x1
       |               | 01178 | 	//cmp	r0, 0x0
0xC4C7 | 0x2814        | 01179 | 	bc	ZC, BB19_7
       |               | 01180 | // BB#5:                                // %.lr.ph23.i.preheader
0xC4C8 | 0x0381        | 01181 | 	mov	r0, 0x1
0xC4C9 | 0x0360        | 01182 | 	sub	r0, r0, r4
0xC4CA |               | 01183 | BB19_6:                                 // %.lr.ph23.i
       |               | 01184 |                                         // =>This Inner Loop Header: Depth=1
0xC4CA | 0x0B42        | 01185 | 	sub	r1, r2, r0
0xC4CB | 0x2343        | 01186 | 	sub	r4, r3, r0
0xC4CC | 0xA400        | 01187 | 	ld	r4, r4, 0x0
0xC4CD | 0xE100        | 01188 | 	st	r4, r1, 0x0
0xC4CE | 0x4001        | 01189 | 	add	r0, r0, 0x1
0xC4CF | 0x48FF        | 01190 | 	sub	r1, r0, 0x1
0xC4D0 | 0x28F9        | 01191 | 	bc	NE, BB19_6
0xC4D1 | 0x010A        | 01192 | 	bra	BB19_7
0xC4D2 |               | 01193 | BB19_1:
0xC4D2 | 0x03C8 0x0001 | 01194 | 	and	r0, r0, 0x1
       |               | 01195 | 	//cmp	r0, 0x0
0xC4D4 | 0x2807        | 01196 | 	bc	ZC, BB19_7
       |               | 01197 | // BB#2:
0xC4D5 | 0x4200        | 01198 | 	add	r0, r2, 0x0
0xC4D6 |               | 01199 | BB19_3:                                 // %.lr.ph.i
       |               | 01200 |                                         // =>This Inner Loop Header: Depth=1
0xC4D6 | 0x8B00        | 01201 | 	ld	r1, r3, 0x0
0xC4D7 | 0xC800        | 01202 | 	st	r1, r0, 0x0
0xC4D8 | 0x5B01        | 01203 | 	add	r3, r3, 0x1
0xC4D9 | 0x4001        | 01204 | 	add	r0, r0, 0x1
0xC4DA | 0x64FF        | 01205 | 	add	r4, r4, 0xffff
       |               | 01206 | 	//cmp	r4, 0x0
0xC4DB | 0x28FA        | 01207 | 	bc	ZC, BB19_3
0xC4DC |               | 01208 | BB19_7:                                 // %memcpy_base.exit
0xC4DC | 0x4200        | 01209 | 	add	r0, r2, 0x0
0xC4DD | 0x33E6        | 01210 | 	jsr	r6, r6
       |               | 01211 | 

                                 //
                                 // "ReflowOvenController.main" -> "code.asm"
//============================== //==============================================================
                                 // "ReflowOvenController.main"
                                 //

       |               | 00010 | @ = (@ + 0x0800-1) & -0x0800
       |               | 00011 | #include "C:/Program Files/SXC/include/sxc-art0\XInC2_Thread_Definitions.asm"

                                 //
                                 // "ReflowOvenController.main"
//============================== //==============================================================
                                 // "ReflowOvenController.main" -> "XInC2_Thread_Definitions.asm"
                                 //

       |               | 00001 | #ifndef DEFAULT_STACK_SIZE
       |      = 0x0040 | 00002 | #define DEFAULT_STACK_SIZE 64
       |               | 00003 | #endif
       |               | 00004 | 
       |               | 00005 | #ifndef THREAD0_STACK_SIZE
       |      = 0x0040 | 00006 | #define THREAD0_STACK_SIZE DEFAULT_STACK_SIZE
       |               | 00007 | #endif
       |               | 00008 | 
       |               | 00009 | #ifndef THREAD1_STACK_SIZE
       |      = 0x0040 | 00010 | #define THREAD1_STACK_SIZE DEFAULT_STACK_SIZE
       |               | 00011 | #endif
       |               | 00012 | 
       |               | 00013 | #ifndef THREAD2_STACK_SIZE
       |      = 0x0040 | 00014 | #define THREAD2_STACK_SIZE DEFAULT_STACK_SIZE
       |               | 00015 | #endif
       |               | 00016 | 
       |               | 00017 | #ifndef THREAD3_STACK_SIZE
       |      = 0x0040 | 00018 | #define THREAD3_STACK_SIZE DEFAULT_STACK_SIZE
       |               | 00019 | #endif
       |               | 00020 | 
       |               | 00021 | #ifndef THREAD4_STACK_SIZE
       |      = 0x0040 | 00022 | #define THREAD4_STACK_SIZE DEFAULT_STACK_SIZE
       |               | 00023 | #endif
       |               | 00024 | 
       |               | 00025 | #ifndef THREAD5_STACK_SIZE
       |      = 0x0040 | 00026 | #define THREAD5_STACK_SIZE DEFAULT_STACK_SIZE
       |               | 00027 | #endif
       |               | 00028 | 
       |               | 00029 | #ifndef THREAD6_STACK_SIZE
       |      = 0x0040 | 00030 | #define THREAD6_STACK_SIZE DEFAULT_STACK_SIZE
       |               | 00031 | #endif
       |               | 00032 | 
       |               | 00033 | #ifndef THREAD7_STACK_SIZE
       |      = 0x0040 | 00034 | #define THREAD7_STACK_SIZE DEFAULT_STACK_SIZE
       |               | 00035 | #endif
       |               | 00036 | 
0xC800 |               | 00037 | THREAD0_STACK: @ = @ + THREAD0_STACK_SIZE
0xC840 |               | 00038 | THREAD1_STACK: @ = @ + THREAD1_STACK_SIZE
0xC880 |               | 00039 | THREAD2_STACK: @ = @ + THREAD2_STACK_SIZE
0xC8C0 |               | 00040 | THREAD3_STACK: @ = @ + THREAD3_STACK_SIZE
0xC900 |               | 00041 | THREAD4_STACK: @ = @ + THREAD4_STACK_SIZE
0xC940 |               | 00042 | THREAD5_STACK: @ = @ + THREAD5_STACK_SIZE
0xC980 |               | 00043 | THREAD6_STACK: @ = @ + THREAD6_STACK_SIZE
0xC9C0 |               | 00044 | THREAD7_STACK: @ = @ + THREAD7_STACK_SIZE
       |               | 00045 | 
0xCA00 |               | 00046 | THREAD_STACK_LOOKUP:
0xCA00 | 0xC800        | 00047 |   THREAD0_STACK
0xCA01 | 0xC840        | 00048 |   THREAD1_STACK
0xCA02 | 0xC880        | 00049 |   THREAD2_STACK
0xCA03 | 0xC8C0        | 00050 |   THREAD3_STACK
0xCA04 | 0xC900        | 00051 |   THREAD4_STACK
0xCA05 | 0xC940        | 00052 |   THREAD5_STACK
0xCA06 | 0xC980        | 00053 |   THREAD6_STACK
0xCA07 | 0xC9C0        | 00054 |   THREAD7_STACK
       |               | 00055 | 
0xCA08 | 0x00FE        | 00056 | thrds_vector: 0xFE //on program init, only thread0 is running

                                 //
                                 // "ReflowOvenController.main" -> "XInC2_Thread_Definitions.asm"
//============================== //==============================================================
                                 // "ReflowOvenController.main"
                                 //

       |               | 00012 | #include "C:/Users/cchin/CapstoneFirmware/Xinc2/ReflowOvenController/build\data.asm"

                                 //
                                 // "ReflowOvenController.main"
//============================== //==============================================================
                                 // "ReflowOvenController.main" -> "data.asm"
                                 //

       |               | 00001 | //	.section	.rdata,"r"
0xCA09 |               | 00002 | JTI1_0:
0xCA09 | 0xC045        | 00003 | 		BB1_2
0xCA0A | 0xC047        | 00004 | 		BB1_3
0xCA0B | 0xC049        | 00005 | 		BB1_4
0xCA0C | 0xC04B        | 00006 | 		BB1_5
0xCA0D | 0xC04D        | 00007 | 		BB1_6
0xCA0E | 0xC04F        | 00008 | 		BB1_7
0xCA0F | 0xC051        | 00009 | 		BB1_8
0xCA10 | 0xC053        | 00010 | 		BB1_9
0xCA11 | 0xC055        | 00011 | 		BB1_10
0xCA12 | 0xC057        | 00012 | 		BB1_11
       |               | 00013 | 
       |               | 00014 | //	.section	//.data,"w"
0xCA13 |               | 00015 | sxc_Ascii_1:                            // @Ascii_1
       |               | 00016 | 	@ = @ + 5
0xCA18 | 0x0000        | 00017 | 		0                       // 0x0
0xCA19 | 0x0000        | 00018 | 		0                       // 0x0
0xCA1A | 0x004F        | 00019 | 		79                      // 0x4f
0xCA1B | 0x0000        | 00020 | 		0                       // 0x0
0xCA1C | 0x0000        | 00021 | 		0                       // 0x0
0xCA1D | 0x0000        | 00022 | 		0                       // 0x0
0xCA1E | 0x0007        | 00023 | 		7                       // 0x7
0xCA1F | 0x0000        | 00024 | 		0                       // 0x0
0xCA20 | 0x0007        | 00025 | 		7                       // 0x7
0xCA21 | 0x0000        | 00026 | 		0                       // 0x0
0xCA22 | 0x0014        | 00027 | 		20                      // 0x14
0xCA23 | 0x007F        | 00028 | 		127                     // 0x7f
0xCA24 | 0x0014        | 00029 | 		20                      // 0x14
0xCA25 | 0x007F        | 00030 | 		127                     // 0x7f
0xCA26 | 0x0014        | 00031 | 		20                      // 0x14
0xCA27 | 0x0024        | 00032 | 		36                      // 0x24
0xCA28 | 0x002A        | 00033 | 		42                      // 0x2a
0xCA29 | 0x007F        | 00034 | 		127                     // 0x7f
0xCA2A | 0x002A        | 00035 | 		42                      // 0x2a
0xCA2B | 0x0012        | 00036 | 		18                      // 0x12
0xCA2C | 0x0023        | 00037 | 		35                      // 0x23
0xCA2D | 0x0013        | 00038 | 		19                      // 0x13
0xCA2E | 0x0008        | 00039 | 		8                       // 0x8
0xCA2F | 0x0064        | 00040 | 		100                     // 0x64
0xCA30 | 0x0062        | 00041 | 		98                      // 0x62
0xCA31 | 0x0036        | 00042 | 		54                      // 0x36
0xCA32 | 0x0049        | 00043 | 		73                      // 0x49
0xCA33 | 0x0055        | 00044 | 		85                      // 0x55
0xCA34 | 0x0022        | 00045 | 		34                      // 0x22
0xCA35 | 0x0050        | 00046 | 		80                      // 0x50
0xCA36 | 0x0000        | 00047 | 		0                       // 0x0
0xCA37 | 0x0005        | 00048 | 		5                       // 0x5
0xCA38 | 0x0003        | 00049 | 		3                       // 0x3
0xCA39 | 0x0000        | 00050 | 		0                       // 0x0
0xCA3A | 0x0000        | 00051 | 		0                       // 0x0
0xCA3B | 0x0000        | 00052 | 		0                       // 0x0
0xCA3C | 0x001C        | 00053 | 		28                      // 0x1c
0xCA3D | 0x0022        | 00054 | 		34                      // 0x22
0xCA3E | 0x0041        | 00055 | 		65                      // 0x41
0xCA3F | 0x0000        | 00056 | 		0                       // 0x0
0xCA40 | 0x0000        | 00057 | 		0                       // 0x0
0xCA41 | 0x0041        | 00058 | 		65                      // 0x41
0xCA42 | 0x0022        | 00059 | 		34                      // 0x22
0xCA43 | 0x001C        | 00060 | 		28                      // 0x1c
0xCA44 | 0x0000        | 00061 | 		0                       // 0x0
0xCA45 | 0x0014        | 00062 | 		20                      // 0x14
0xCA46 | 0x0008        | 00063 | 		8                       // 0x8
0xCA47 | 0x003E        | 00064 | 		62                      // 0x3e
0xCA48 | 0x0008        | 00065 | 		8                       // 0x8
0xCA49 | 0x0014        | 00066 | 		20                      // 0x14
0xCA4A | 0x0008        | 00067 | 		8                       // 0x8
0xCA4B | 0x0008        | 00068 | 		8                       // 0x8
0xCA4C | 0x003E        | 00069 | 		62                      // 0x3e
0xCA4D | 0x0008        | 00070 | 		8                       // 0x8
0xCA4E | 0x0008        | 00071 | 		8                       // 0x8
0xCA4F | 0x0000        | 00072 | 		0                       // 0x0
0xCA50 | 0x0050        | 00073 | 		80                      // 0x50
0xCA51 | 0x0030        | 00074 | 		48                      // 0x30
0xCA52 | 0x0000        | 00075 | 		0                       // 0x0
0xCA53 | 0x0000        | 00076 | 		0                       // 0x0
0xCA54 | 0x0008        | 00077 | 		8                       // 0x8
0xCA55 | 0x0008        | 00078 | 		8                       // 0x8
0xCA56 | 0x0008        | 00079 | 		8                       // 0x8
0xCA57 | 0x0008        | 00080 | 		8                       // 0x8
0xCA58 | 0x0008        | 00081 | 		8                       // 0x8
0xCA59 | 0x0000        | 00082 | 		0                       // 0x0
0xCA5A | 0x0060        | 00083 | 		96                      // 0x60
0xCA5B | 0x0060        | 00084 | 		96                      // 0x60
0xCA5C | 0x0000        | 00085 | 		0                       // 0x0
0xCA5D | 0x0000        | 00086 | 		0                       // 0x0
0xCA5E | 0x0020        | 00087 | 		32                      // 0x20
0xCA5F | 0x0010        | 00088 | 		16                      // 0x10
0xCA60 | 0x0008        | 00089 | 		8                       // 0x8
0xCA61 | 0x0004        | 00090 | 		4                       // 0x4
0xCA62 | 0x0002        | 00091 | 		2                       // 0x2
0xCA63 | 0x003E        | 00092 | 		62                      // 0x3e
0xCA64 | 0x0051        | 00093 | 		81                      // 0x51
0xCA65 | 0x0049        | 00094 | 		73                      // 0x49
0xCA66 | 0x0045        | 00095 | 		69                      // 0x45
0xCA67 | 0x003E        | 00096 | 		62                      // 0x3e
0xCA68 | 0x0000        | 00097 | 		0                       // 0x0
0xCA69 | 0x0042        | 00098 | 		66                      // 0x42
0xCA6A | 0x007F        | 00099 | 		127                     // 0x7f
0xCA6B | 0x0040        | 00100 | 		64                      // 0x40
0xCA6C | 0x0000        | 00101 | 		0                       // 0x0
0xCA6D | 0x0042        | 00102 | 		66                      // 0x42
0xCA6E | 0x0061        | 00103 | 		97                      // 0x61
0xCA6F | 0x0051        | 00104 | 		81                      // 0x51
0xCA70 | 0x0049        | 00105 | 		73                      // 0x49
0xCA71 | 0x0046        | 00106 | 		70                      // 0x46
0xCA72 | 0x0021        | 00107 | 		33                      // 0x21
0xCA73 | 0x0041        | 00108 | 		65                      // 0x41
0xCA74 | 0x0045        | 00109 | 		69                      // 0x45
0xCA75 | 0x004B        | 00110 | 		75                      // 0x4b
0xCA76 | 0x0031        | 00111 | 		49                      // 0x31
0xCA77 | 0x0018        | 00112 | 		24                      // 0x18
0xCA78 | 0x0014        | 00113 | 		20                      // 0x14
0xCA79 | 0x0012        | 00114 | 		18                      // 0x12
0xCA7A | 0x007F        | 00115 | 		127                     // 0x7f
0xCA7B | 0x0010        | 00116 | 		16                      // 0x10
0xCA7C | 0x0027        | 00117 | 		39                      // 0x27
0xCA7D | 0x0045        | 00118 | 		69                      // 0x45
0xCA7E | 0x0045        | 00119 | 		69                      // 0x45
0xCA7F | 0x0045        | 00120 | 		69                      // 0x45
0xCA80 | 0x0039        | 00121 | 		57                      // 0x39
0xCA81 | 0x003C        | 00122 | 		60                      // 0x3c
0xCA82 | 0x004A        | 00123 | 		74                      // 0x4a
0xCA83 | 0x0049        | 00124 | 		73                      // 0x49
0xCA84 | 0x0049        | 00125 | 		73                      // 0x49
0xCA85 | 0x0030        | 00126 | 		48                      // 0x30
0xCA86 | 0x0001        | 00127 | 		1                       // 0x1
0xCA87 | 0x0071        | 00128 | 		113                     // 0x71
0xCA88 | 0x0009        | 00129 | 		9                       // 0x9
0xCA89 | 0x0005        | 00130 | 		5                       // 0x5
0xCA8A | 0x0003        | 00131 | 		3                       // 0x3
0xCA8B | 0x0036        | 00132 | 		54                      // 0x36
0xCA8C | 0x0049        | 00133 | 		73                      // 0x49
0xCA8D | 0x0049        | 00134 | 		73                      // 0x49
0xCA8E | 0x0049        | 00135 | 		73                      // 0x49
0xCA8F | 0x0036        | 00136 | 		54                      // 0x36
0xCA90 | 0x0006        | 00137 | 		6                       // 0x6
0xCA91 | 0x0049        | 00138 | 		73                      // 0x49
0xCA92 | 0x0049        | 00139 | 		73                      // 0x49
0xCA93 | 0x0029        | 00140 | 		41                      // 0x29
0xCA94 | 0x001E        | 00141 | 		30                      // 0x1e
0xCA95 | 0x0000        | 00142 | 		0                       // 0x0
0xCA96 | 0x0036        | 00143 | 		54                      // 0x36
0xCA97 | 0x0036        | 00144 | 		54                      // 0x36
0xCA98 | 0x0000        | 00145 | 		0                       // 0x0
0xCA99 | 0x0000        | 00146 | 		0                       // 0x0
0xCA9A | 0x0000        | 00147 | 		0                       // 0x0
0xCA9B | 0x0056        | 00148 | 		86                      // 0x56
0xCA9C | 0x0036        | 00149 | 		54                      // 0x36
0xCA9D | 0x0000        | 00150 | 		0                       // 0x0
0xCA9E | 0x0000        | 00151 | 		0                       // 0x0
0xCA9F | 0x0008        | 00152 | 		8                       // 0x8
0xCAA0 | 0x0014        | 00153 | 		20                      // 0x14
0xCAA1 | 0x0022        | 00154 | 		34                      // 0x22
0xCAA2 | 0x0041        | 00155 | 		65                      // 0x41
0xCAA3 | 0x0000        | 00156 | 		0                       // 0x0
0xCAA4 | 0x0014        | 00157 | 		20                      // 0x14
0xCAA5 | 0x0014        | 00158 | 		20                      // 0x14
0xCAA6 | 0x0014        | 00159 | 		20                      // 0x14
0xCAA7 | 0x0014        | 00160 | 		20                      // 0x14
0xCAA8 | 0x0014        | 00161 | 		20                      // 0x14
0xCAA9 | 0x0000        | 00162 | 		0                       // 0x0
0xCAAA | 0x0041        | 00163 | 		65                      // 0x41
0xCAAB | 0x0022        | 00164 | 		34                      // 0x22
0xCAAC | 0x0014        | 00165 | 		20                      // 0x14
0xCAAD | 0x0008        | 00166 | 		8                       // 0x8
0xCAAE | 0x0002        | 00167 | 		2                       // 0x2
0xCAAF | 0x0001        | 00168 | 		1                       // 0x1
0xCAB0 | 0x0051        | 00169 | 		81                      // 0x51
0xCAB1 | 0x0009        | 00170 | 		9                       // 0x9
0xCAB2 | 0x0006        | 00171 | 		6                       // 0x6
0xCAB3 | 0x0032        | 00172 | 		50                      // 0x32
0xCAB4 | 0x0049        | 00173 | 		73                      // 0x49
0xCAB5 | 0x0079        | 00174 | 		121                     // 0x79
0xCAB6 | 0x0041        | 00175 | 		65                      // 0x41
0xCAB7 | 0x003E        | 00176 | 		62                      // 0x3e
0xCAB8 | 0x007E        | 00177 | 		126                     // 0x7e
0xCAB9 | 0x0011        | 00178 | 		17                      // 0x11
0xCABA | 0x0011        | 00179 | 		17                      // 0x11
0xCABB | 0x0011        | 00180 | 		17                      // 0x11
0xCABC | 0x007E        | 00181 | 		126                     // 0x7e
0xCABD | 0x007F        | 00182 | 		127                     // 0x7f
0xCABE | 0x0049        | 00183 | 		73                      // 0x49
0xCABF | 0x0049        | 00184 | 		73                      // 0x49
0xCAC0 | 0x0049        | 00185 | 		73                      // 0x49
0xCAC1 | 0x0036        | 00186 | 		54                      // 0x36
0xCAC2 | 0x003E        | 00187 | 		62                      // 0x3e
0xCAC3 | 0x0041        | 00188 | 		65                      // 0x41
0xCAC4 | 0x0041        | 00189 | 		65                      // 0x41
0xCAC5 | 0x0041        | 00190 | 		65                      // 0x41
0xCAC6 | 0x0022        | 00191 | 		34                      // 0x22
0xCAC7 | 0x007F        | 00192 | 		127                     // 0x7f
0xCAC8 | 0x0041        | 00193 | 		65                      // 0x41
0xCAC9 | 0x0041        | 00194 | 		65                      // 0x41
0xCACA | 0x0022        | 00195 | 		34                      // 0x22
0xCACB | 0x001C        | 00196 | 		28                      // 0x1c
0xCACC | 0x007F        | 00197 | 		127                     // 0x7f
0xCACD | 0x0049        | 00198 | 		73                      // 0x49
0xCACE | 0x0049        | 00199 | 		73                      // 0x49
0xCACF | 0x0049        | 00200 | 		73                      // 0x49
0xCAD0 | 0x0041        | 00201 | 		65                      // 0x41
0xCAD1 | 0x007F        | 00202 | 		127                     // 0x7f
0xCAD2 | 0x0009        | 00203 | 		9                       // 0x9
0xCAD3 | 0x0009        | 00204 | 		9                       // 0x9
0xCAD4 | 0x0009        | 00205 | 		9                       // 0x9
0xCAD5 | 0x0001        | 00206 | 		1                       // 0x1
0xCAD6 | 0x003E        | 00207 | 		62                      // 0x3e
0xCAD7 | 0x0041        | 00208 | 		65                      // 0x41
0xCAD8 | 0x0049        | 00209 | 		73                      // 0x49
0xCAD9 | 0x0049        | 00210 | 		73                      // 0x49
0xCADA | 0x007A        | 00211 | 		122                     // 0x7a
0xCADB | 0x007F        | 00212 | 		127                     // 0x7f
0xCADC | 0x0008        | 00213 | 		8                       // 0x8
0xCADD | 0x0008        | 00214 | 		8                       // 0x8
0xCADE | 0x0008        | 00215 | 		8                       // 0x8
0xCADF | 0x007F        | 00216 | 		127                     // 0x7f
0xCAE0 | 0x0000        | 00217 | 		0                       // 0x0
0xCAE1 | 0x0041        | 00218 | 		65                      // 0x41
0xCAE2 | 0x007F        | 00219 | 		127                     // 0x7f
0xCAE3 | 0x0041        | 00220 | 		65                      // 0x41
0xCAE4 | 0x0000        | 00221 | 		0                       // 0x0
0xCAE5 | 0x0020        | 00222 | 		32                      // 0x20
0xCAE6 | 0x0040        | 00223 | 		64                      // 0x40
0xCAE7 | 0x0041        | 00224 | 		65                      // 0x41
0xCAE8 | 0x003F        | 00225 | 		63                      // 0x3f
0xCAE9 | 0x0001        | 00226 | 		1                       // 0x1
0xCAEA | 0x007F        | 00227 | 		127                     // 0x7f
0xCAEB | 0x0008        | 00228 | 		8                       // 0x8
0xCAEC | 0x0014        | 00229 | 		20                      // 0x14
0xCAED | 0x0022        | 00230 | 		34                      // 0x22
0xCAEE | 0x0041        | 00231 | 		65                      // 0x41
0xCAEF | 0x007F        | 00232 | 		127                     // 0x7f
0xCAF0 | 0x0040        | 00233 | 		64                      // 0x40
0xCAF1 | 0x0040        | 00234 | 		64                      // 0x40
0xCAF2 | 0x0040        | 00235 | 		64                      // 0x40
0xCAF3 | 0x0040        | 00236 | 		64                      // 0x40
0xCAF4 | 0x007F        | 00237 | 		127                     // 0x7f
0xCAF5 | 0x0002        | 00238 | 		2                       // 0x2
0xCAF6 | 0x000C        | 00239 | 		12                      // 0xc
0xCAF7 | 0x0002        | 00240 | 		2                       // 0x2
0xCAF8 | 0x007F        | 00241 | 		127                     // 0x7f
0xCAF9 | 0x007F        | 00242 | 		127                     // 0x7f
0xCAFA | 0x0004        | 00243 | 		4                       // 0x4
0xCAFB | 0x0008        | 00244 | 		8                       // 0x8
0xCAFC | 0x0010        | 00245 | 		16                      // 0x10
0xCAFD | 0x007F        | 00246 | 		127                     // 0x7f
0xCAFE | 0x003E        | 00247 | 		62                      // 0x3e
0xCAFF | 0x0041        | 00248 | 		65                      // 0x41
0xCB00 | 0x0041        | 00249 | 		65                      // 0x41
0xCB01 | 0x0041        | 00250 | 		65                      // 0x41
0xCB02 | 0x003E        | 00251 | 		62                      // 0x3e
0xCB03 | 0x007F        | 00252 | 		127                     // 0x7f
0xCB04 | 0x0009        | 00253 | 		9                       // 0x9
0xCB05 | 0x0009        | 00254 | 		9                       // 0x9
0xCB06 | 0x0009        | 00255 | 		9                       // 0x9
0xCB07 | 0x0006        | 00256 | 		6                       // 0x6
0xCB08 | 0x003E        | 00257 | 		62                      // 0x3e
0xCB09 | 0x0041        | 00258 | 		65                      // 0x41
0xCB0A | 0x0051        | 00259 | 		81                      // 0x51
0xCB0B | 0x0021        | 00260 | 		33                      // 0x21
0xCB0C | 0x005E        | 00261 | 		94                      // 0x5e
0xCB0D | 0x007F        | 00262 | 		127                     // 0x7f
0xCB0E | 0x0009        | 00263 | 		9                       // 0x9
0xCB0F | 0x0019        | 00264 | 		25                      // 0x19
0xCB10 | 0x0029        | 00265 | 		41                      // 0x29
0xCB11 | 0x0046        | 00266 | 		70                      // 0x46
0xCB12 | 0x0046        | 00267 | 		70                      // 0x46
0xCB13 | 0x0049        | 00268 | 		73                      // 0x49
0xCB14 | 0x0049        | 00269 | 		73                      // 0x49
0xCB15 | 0x0049        | 00270 | 		73                      // 0x49
0xCB16 | 0x0031        | 00271 | 		49                      // 0x31
0xCB17 | 0x0001        | 00272 | 		1                       // 0x1
0xCB18 | 0x0001        | 00273 | 		1                       // 0x1
0xCB19 | 0x007F        | 00274 | 		127                     // 0x7f
0xCB1A | 0x0001        | 00275 | 		1                       // 0x1
0xCB1B | 0x0001        | 00276 | 		1                       // 0x1
0xCB1C | 0x003F        | 00277 | 		63                      // 0x3f
0xCB1D | 0x0040        | 00278 | 		64                      // 0x40
0xCB1E | 0x0040        | 00279 | 		64                      // 0x40
0xCB1F | 0x0040        | 00280 | 		64                      // 0x40
0xCB20 | 0x003F        | 00281 | 		63                      // 0x3f
0xCB21 | 0x001F        | 00282 | 		31                      // 0x1f
0xCB22 | 0x0020        | 00283 | 		32                      // 0x20
0xCB23 | 0x0040        | 00284 | 		64                      // 0x40
0xCB24 | 0x0020        | 00285 | 		32                      // 0x20
0xCB25 | 0x001F        | 00286 | 		31                      // 0x1f
0xCB26 | 0x003F        | 00287 | 		63                      // 0x3f
0xCB27 | 0x0040        | 00288 | 		64                      // 0x40
0xCB28 | 0x0038        | 00289 | 		56                      // 0x38
0xCB29 | 0x0040        | 00290 | 		64                      // 0x40
0xCB2A | 0x003F        | 00291 | 		63                      // 0x3f
0xCB2B | 0x0063        | 00292 | 		99                      // 0x63
0xCB2C | 0x0014        | 00293 | 		20                      // 0x14
0xCB2D | 0x0008        | 00294 | 		8                       // 0x8
0xCB2E | 0x0014        | 00295 | 		20                      // 0x14
0xCB2F | 0x0063        | 00296 | 		99                      // 0x63
0xCB30 | 0x0007        | 00297 | 		7                       // 0x7
0xCB31 | 0x0008        | 00298 | 		8                       // 0x8
0xCB32 | 0x0070        | 00299 | 		112                     // 0x70
0xCB33 | 0x0008        | 00300 | 		8                       // 0x8
0xCB34 | 0x0007        | 00301 | 		7                       // 0x7
0xCB35 | 0x0061        | 00302 | 		97                      // 0x61
0xCB36 | 0x0051        | 00303 | 		81                      // 0x51
0xCB37 | 0x0049        | 00304 | 		73                      // 0x49
0xCB38 | 0x0045        | 00305 | 		69                      // 0x45
0xCB39 | 0x0043        | 00306 | 		67                      // 0x43
0xCB3A | 0x0000        | 00307 | 		0                       // 0x0
0xCB3B | 0x007F        | 00308 | 		127                     // 0x7f
0xCB3C | 0x0041        | 00309 | 		65                      // 0x41
0xCB3D | 0x0041        | 00310 | 		65                      // 0x41
0xCB3E | 0x0000        | 00311 | 		0                       // 0x0
0xCB3F | 0x0002        | 00312 | 		2                       // 0x2
0xCB40 | 0x0004        | 00313 | 		4                       // 0x4
0xCB41 | 0x0008        | 00314 | 		8                       // 0x8
0xCB42 | 0x0010        | 00315 | 		16                      // 0x10
0xCB43 | 0x0020        | 00316 | 		32                      // 0x20
0xCB44 | 0x0000        | 00317 | 		0                       // 0x0
0xCB45 | 0x0041        | 00318 | 		65                      // 0x41
0xCB46 | 0x0041        | 00319 | 		65                      // 0x41
0xCB47 | 0x007F        | 00320 | 		127                     // 0x7f
0xCB48 | 0x0000        | 00321 | 		0                       // 0x0
0xCB49 | 0x0004        | 00322 | 		4                       // 0x4
0xCB4A | 0x0002        | 00323 | 		2                       // 0x2
0xCB4B | 0x0001        | 00324 | 		1                       // 0x1
0xCB4C | 0x0002        | 00325 | 		2                       // 0x2
0xCB4D | 0x0004        | 00326 | 		4                       // 0x4
0xCB4E | 0x0040        | 00327 | 		64                      // 0x40
0xCB4F | 0x0040        | 00328 | 		64                      // 0x40
0xCB50 | 0x0040        | 00329 | 		64                      // 0x40
0xCB51 | 0x0040        | 00330 | 		64                      // 0x40
0xCB52 | 0x0040        | 00331 | 		64                      // 0x40
0xCB53 | 0x0001        | 00332 | 		1                       // 0x1
0xCB54 | 0x0002        | 00333 | 		2                       // 0x2
0xCB55 | 0x0004        | 00334 | 		4                       // 0x4
0xCB56 | 0x0000        | 00335 | 		0                       // 0x0
0xCB57 | 0x0000        | 00336 | 		0                       // 0x0
0xCB58 | 0x0020        | 00337 | 		32                      // 0x20
0xCB59 | 0x0054        | 00338 | 		84                      // 0x54
0xCB5A | 0x0054        | 00339 | 		84                      // 0x54
0xCB5B | 0x0054        | 00340 | 		84                      // 0x54
0xCB5C | 0x0078        | 00341 | 		120                     // 0x78
0xCB5D | 0x007F        | 00342 | 		127                     // 0x7f
0xCB5E | 0x0048        | 00343 | 		72                      // 0x48
0xCB5F | 0x0044        | 00344 | 		68                      // 0x44
0xCB60 | 0x0044        | 00345 | 		68                      // 0x44
0xCB61 | 0x0038        | 00346 | 		56                      // 0x38
0xCB62 | 0x0038        | 00347 | 		56                      // 0x38
0xCB63 | 0x0044        | 00348 | 		68                      // 0x44
0xCB64 | 0x0044        | 00349 | 		68                      // 0x44
0xCB65 | 0x0044        | 00350 | 		68                      // 0x44
0xCB66 | 0x0020        | 00351 | 		32                      // 0x20
0xCB67 | 0x0038        | 00352 | 		56                      // 0x38
0xCB68 | 0x0044        | 00353 | 		68                      // 0x44
0xCB69 | 0x0044        | 00354 | 		68                      // 0x44
0xCB6A | 0x0048        | 00355 | 		72                      // 0x48
0xCB6B | 0x007F        | 00356 | 		127                     // 0x7f
0xCB6C | 0x0038        | 00357 | 		56                      // 0x38
0xCB6D | 0x0054        | 00358 | 		84                      // 0x54
0xCB6E | 0x0054        | 00359 | 		84                      // 0x54
0xCB6F | 0x0054        | 00360 | 		84                      // 0x54
0xCB70 | 0x0018        | 00361 | 		24                      // 0x18
0xCB71 | 0x0008        | 00362 | 		8                       // 0x8
0xCB72 | 0x007E        | 00363 | 		126                     // 0x7e
0xCB73 | 0x0009        | 00364 | 		9                       // 0x9
0xCB74 | 0x0001        | 00365 | 		1                       // 0x1
0xCB75 | 0x0002        | 00366 | 		2                       // 0x2
0xCB76 | 0x0006        | 00367 | 		6                       // 0x6
0xCB77 | 0x0049        | 00368 | 		73                      // 0x49
0xCB78 | 0x0049        | 00369 | 		73                      // 0x49
0xCB79 | 0x0049        | 00370 | 		73                      // 0x49
0xCB7A | 0x003F        | 00371 | 		63                      // 0x3f
0xCB7B | 0x007F        | 00372 | 		127                     // 0x7f
0xCB7C | 0x0008        | 00373 | 		8                       // 0x8
0xCB7D | 0x0004        | 00374 | 		4                       // 0x4
0xCB7E | 0x0004        | 00375 | 		4                       // 0x4
0xCB7F | 0x0078        | 00376 | 		120                     // 0x78
0xCB80 | 0x0000        | 00377 | 		0                       // 0x0
0xCB81 | 0x0044        | 00378 | 		68                      // 0x44
0xCB82 | 0x007D        | 00379 | 		125                     // 0x7d
0xCB83 | 0x0040        | 00380 | 		64                      // 0x40
0xCB84 | 0x0000        | 00381 | 		0                       // 0x0
0xCB85 | 0x0020        | 00382 | 		32                      // 0x20
0xCB86 | 0x0040        | 00383 | 		64                      // 0x40
0xCB87 | 0x0044        | 00384 | 		68                      // 0x44
0xCB88 | 0x003D        | 00385 | 		61                      // 0x3d
0xCB89 | 0x0000        | 00386 | 		0                       // 0x0
0xCB8A | 0x007F        | 00387 | 		127                     // 0x7f
0xCB8B | 0x0010        | 00388 | 		16                      // 0x10
0xCB8C | 0x0028        | 00389 | 		40                      // 0x28
0xCB8D | 0x0044        | 00390 | 		68                      // 0x44
0xCB8E | 0x0000        | 00391 | 		0                       // 0x0
0xCB8F | 0x0000        | 00392 | 		0                       // 0x0
0xCB90 | 0x0041        | 00393 | 		65                      // 0x41
0xCB91 | 0x007F        | 00394 | 		127                     // 0x7f
0xCB92 | 0x0040        | 00395 | 		64                      // 0x40
0xCB93 | 0x0000        | 00396 | 		0                       // 0x0
0xCB94 | 0x007C        | 00397 | 		124                     // 0x7c
0xCB95 | 0x0004        | 00398 | 		4                       // 0x4
0xCB96 | 0x0018        | 00399 | 		24                      // 0x18
0xCB97 | 0x0004        | 00400 | 		4                       // 0x4
0xCB98 | 0x007C        | 00401 | 		124                     // 0x7c
0xCB99 | 0x007C        | 00402 | 		124                     // 0x7c
0xCB9A | 0x0008        | 00403 | 		8                       // 0x8
0xCB9B | 0x0004        | 00404 | 		4                       // 0x4
0xCB9C | 0x0004        | 00405 | 		4                       // 0x4
0xCB9D | 0x0078        | 00406 | 		120                     // 0x78
0xCB9E | 0x0038        | 00407 | 		56                      // 0x38
0xCB9F | 0x0044        | 00408 | 		68                      // 0x44
0xCBA0 | 0x0044        | 00409 | 		68                      // 0x44
0xCBA1 | 0x0044        | 00410 | 		68                      // 0x44
0xCBA2 | 0x0038        | 00411 | 		56                      // 0x38
0xCBA3 | 0x007C        | 00412 | 		124                     // 0x7c
0xCBA4 | 0x0014        | 00413 | 		20                      // 0x14
0xCBA5 | 0x0014        | 00414 | 		20                      // 0x14
0xCBA6 | 0x0014        | 00415 | 		20                      // 0x14
0xCBA7 | 0x0008        | 00416 | 		8                       // 0x8
0xCBA8 | 0x0008        | 00417 | 		8                       // 0x8
0xCBA9 | 0x0014        | 00418 | 		20                      // 0x14
0xCBAA | 0x0014        | 00419 | 		20                      // 0x14
0xCBAB | 0x0018        | 00420 | 		24                      // 0x18
0xCBAC | 0x007C        | 00421 | 		124                     // 0x7c
0xCBAD | 0x007C        | 00422 | 		124                     // 0x7c
0xCBAE | 0x0008        | 00423 | 		8                       // 0x8
0xCBAF | 0x0004        | 00424 | 		4                       // 0x4
0xCBB0 | 0x0004        | 00425 | 		4                       // 0x4
0xCBB1 | 0x0008        | 00426 | 		8                       // 0x8
0xCBB2 | 0x0048        | 00427 | 		72                      // 0x48
0xCBB3 | 0x0054        | 00428 | 		84                      // 0x54
0xCBB4 | 0x0054        | 00429 | 		84                      // 0x54
0xCBB5 | 0x0054        | 00430 | 		84                      // 0x54
0xCBB6 | 0x0020        | 00431 | 		32                      // 0x20
0xCBB7 | 0x0004        | 00432 | 		4                       // 0x4
0xCBB8 | 0x003F        | 00433 | 		63                      // 0x3f
0xCBB9 | 0x0044        | 00434 | 		68                      // 0x44
0xCBBA | 0x0040        | 00435 | 		64                      // 0x40
0xCBBB | 0x0020        | 00436 | 		32                      // 0x20
0xCBBC | 0x003C        | 00437 | 		60                      // 0x3c
0xCBBD | 0x0040        | 00438 | 		64                      // 0x40
0xCBBE | 0x0040        | 00439 | 		64                      // 0x40
0xCBBF | 0x0020        | 00440 | 		32                      // 0x20
0xCBC0 | 0x007C        | 00441 | 		124                     // 0x7c
0xCBC1 | 0x001C        | 00442 | 		28                      // 0x1c
0xCBC2 | 0x0020        | 00443 | 		32                      // 0x20
0xCBC3 | 0x0040        | 00444 | 		64                      // 0x40
0xCBC4 | 0x0020        | 00445 | 		32                      // 0x20
0xCBC5 | 0x001C        | 00446 | 		28                      // 0x1c
0xCBC6 | 0x003C        | 00447 | 		60                      // 0x3c
0xCBC7 | 0x0040        | 00448 | 		64                      // 0x40
0xCBC8 | 0x0030        | 00449 | 		48                      // 0x30
0xCBC9 | 0x0040        | 00450 | 		64                      // 0x40
0xCBCA | 0x003C        | 00451 | 		60                      // 0x3c
0xCBCB | 0x0044        | 00452 | 		68                      // 0x44
0xCBCC | 0x0028        | 00453 | 		40                      // 0x28
0xCBCD | 0x0010        | 00454 | 		16                      // 0x10
0xCBCE | 0x0028        | 00455 | 		40                      // 0x28
0xCBCF | 0x0044        | 00456 | 		68                      // 0x44
0xCBD0 | 0x000C        | 00457 | 		12                      // 0xc
0xCBD1 | 0x0050        | 00458 | 		80                      // 0x50
0xCBD2 | 0x0050        | 00459 | 		80                      // 0x50
0xCBD3 | 0x0050        | 00460 | 		80                      // 0x50
0xCBD4 | 0x003C        | 00461 | 		60                      // 0x3c
0xCBD5 | 0x0044        | 00462 | 		68                      // 0x44
0xCBD6 | 0x0064        | 00463 | 		100                     // 0x64
0xCBD7 | 0x0054        | 00464 | 		84                      // 0x54
0xCBD8 | 0x004C        | 00465 | 		76                      // 0x4c
0xCBD9 | 0x0044        | 00466 | 		68                      // 0x44
0xCBDA | 0x0000        | 00467 | 		0                       // 0x0
0xCBDB | 0x0008        | 00468 | 		8                       // 0x8
0xCBDC | 0x0036        | 00469 | 		54                      // 0x36
0xCBDD | 0x0041        | 00470 | 		65                      // 0x41
0xCBDE | 0x0000        | 00471 | 		0                       // 0x0
0xCBDF | 0x0000        | 00472 | 		0                       // 0x0
0xCBE0 | 0x0000        | 00473 | 		0                       // 0x0
0xCBE1 | 0x007F        | 00474 | 		127                     // 0x7f
0xCBE2 | 0x0000        | 00475 | 		0                       // 0x0
0xCBE3 | 0x0000        | 00476 | 		0                       // 0x0
0xCBE4 | 0x0000        | 00477 | 		0                       // 0x0
0xCBE5 | 0x0041        | 00478 | 		65                      // 0x41
0xCBE6 | 0x0036        | 00479 | 		54                      // 0x36
0xCBE7 | 0x0008        | 00480 | 		8                       // 0x8
0xCBE8 | 0x0000        | 00481 | 		0                       // 0x0
0xCBE9 | 0x0002        | 00482 | 		2                       // 0x2
0xCBEA | 0x0001        | 00483 | 		1                       // 0x1
0xCBEB | 0x0002        | 00484 | 		2                       // 0x2
0xCBEC | 0x0004        | 00485 | 		4                       // 0x4
0xCBED | 0x0002        | 00486 | 		2                       // 0x2
0xCBEE | 0x0008        | 00487 | 		8                       // 0x8
0xCBEF | 0x000C        | 00488 | 		12                      // 0xc
0xCBF0 | 0x000E        | 00489 | 		14                      // 0xe
0xCBF1 | 0x000C        | 00490 | 		12                      // 0xc
0xCBF2 | 0x0008        | 00491 | 		8                       // 0x8
0xCBF3 | 0x0008        | 00492 | 		8                       // 0x8
0xCBF4 | 0x0018        | 00493 | 		24                      // 0x18
0xCBF5 | 0x0038        | 00494 | 		56                      // 0x38
0xCBF6 | 0x0018        | 00495 | 		24                      // 0x18
0xCBF7 | 0x0008        | 00496 | 		8                       // 0x8
0xCBF8 | 0x0000        | 00497 | 		0                       // 0x0
0xCBF9 | 0x000F        | 00498 | 		15                      // 0xf
0xCBFA | 0x0009        | 00499 | 		9                       // 0x9
0xCBFB | 0x0009        | 00500 | 		9                       // 0x9
0xCBFC | 0x000F        | 00501 | 		15                      // 0xf
       |               | 00502 | 
0xCBFD |               | 00503 | sxc_.str5:                              // @.str5
0xCBFD | 0x0044        | 00504 | 		68                      // 0x44
0xCBFE | 0x0065        | 00505 | 		101                     // 0x65
0xCBFF | 0x0074        | 00506 | 		116                     // 0x74
0xCC00 | 0x0065        | 00507 | 		101                     // 0x65
0xCC01 | 0x0063        | 00508 | 		99                      // 0x63
0xCC02 | 0x0074        | 00509 | 		116                     // 0x74
0xCC03 | 0x0065        | 00510 | 		101                     // 0x65
0xCC04 | 0x0064        | 00511 | 		100                     // 0x64
0xCC05 | 0x0020        | 00512 | 		32                      // 0x20
0xCC06 | 0x0054        | 00513 | 		84                      // 0x54
0xCC07 | 0x0065        | 00514 | 		101                     // 0x65
0xCC08 | 0x006D        | 00515 | 		109                     // 0x6d
0xCC09 | 0x0070        | 00516 | 		112                     // 0x70
0xCC0A | 0x003A        | 00517 | 		58                      // 0x3a
0xCC0B | 0x0020        | 00518 | 		32                      // 0x20
0xCC0C | 0x0000        | 00519 | 		0                       // 0x0
       |               | 00520 | 
0xCC0D |               | 00521 | sxc_.str6:                              // @.str6
0xCC0D | 0x0020        | 00522 | 		32                      // 0x20
0xCC0E | 0x000A        | 00523 | 		10                      // 0xa
0xCC0F | 0x0000        | 00524 | 		0                       // 0x0
       |               | 00525 | 
       |               | 00526 | 
0xCC10 |               | 00527 | SXCA_PARSED_CONSTRUCTOR_LIST_START:
0xCC10 |               | 00528 | SXCA_PARSED_CONSTRUCTOR_LIST_END:
         >>>--------->0 Error(s), 0 Warning(s).
