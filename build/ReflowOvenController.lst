ADDR   | VALUES        | LINE  | SOURCE CODE
=================================================================================================
       |               | 00001 | //The following defines were inserted from the command line:
       |      = 0x0001 | 00002 | #define __XINA_CMD__
       |               | 00003 | //end of command line defines
       |               | 00004 | #include "C:/Program Files/SXC/include/sxc-art0\XInC2.asm"

                                 //
                                 // "ReflowOvenController.main"
//============================== //==============================================================
                                 // "ReflowOvenController.main" -> "XInC2.asm"
                                 //

       |               | 00001 | //*************************************************************************************************
       |               | 00002 | //************************ (C) 2001 - 2006, Eleven Engineering Incorporated ***********************
       |               | 00003 | //*************************************************************************************************
       |               | 00004 | //**
       |               | 00005 | //**		Tabs:	This file looks best with tab stops set every 6 spaces.
       |               | 00006 | //**
       |               | 00007 | //*************************************************************************************************
       |               | 00008 | //*************************************************************************************************
       |               | 00009 | //**
       |               | 00010 | //**          File:  XInC2.h
       |               | 00011 | //**       Project:  XInC2 Library
       |               | 00012 | //**       Created:  05 Sep 2006 by Dan Beutel
       |               | 00013 | //**       Revised:  08 Sep 2006 by Dan Beutel
       |               | 00014 | //**
       |               | 00015 | //**   Description:  Constants used for XInC2 Assembly programming.
       |               | 00016 | //**
       |               | 00017 | //** Compatibility:  Requires XInA v4.4 or higher.
       |               | 00018 | //**
       |               | 00019 | //**    Disclaimer:  You may incorporate this sample source code into your program(s) without
       |               | 00020 | //**                 restriction.  This sample source code has been provided "AS IS" and the
       |               | 00021 | //**                 responsibility for its operation is yours.  You are not permitted to
       |               | 00022 | //**                 redistribute this sample source code as "Eleven sample source code" after
       |               | 00023 | //**                 having made changes.  If you are going to re-distribute the source, we require
       |               | 00024 | //**                 that you make it clear in the source that the code was descended from Eleven
       |               | 00025 | //**                 sample source code, but that you have made changes.
       |               | 00026 | //**
       |               | 00027 | //*************************************************************************************************
       |               | 00028 | //************************************************************************************************* 
       |               | 00029 | //=================================================================================================
       |               | 00030 | // Register Set
       |               | 00031 | //=================================================================================================
       |               | 00032 | 
       |      = %0     | 00033 | 		#define	r0				%0
       |      = %1     | 00034 | 		#define	r1				%1
       |      = %2     | 00035 | 		#define	r2				%2
       |      = %3     | 00036 | 		#define	r3				%3
       |      = %4     | 00037 | 		#define	r4				%4
       |      = %5     | 00038 | 		#define	r5				%5
       |      = %6     | 00039 | 		#define	r6				%6
       |      = %7     | 00040 | 		#define	r7				%7
       |      = %7     | 00041 | 		#define	sp				%7
       |               | 00042 | 
       |               | 00043 | //=================================================================================================
       |               | 00044 | // Conditional Branch Tests
       |               | 00045 | //=================================================================================================
       |               | 00046 | 
       |               | 00047 | // 	Test NZVC Bits (Clear or Set)
       |               | 00048 | //		#define	NC				0xB
       |               | 00049 | //		#define	NS				0x3
       |               | 00050 | //		#define	ZC				0xA
       |               | 00051 | //		#define	ZS				0x2
       |               | 00052 | //		#define	VC				0x9
       |               | 00053 | //		#define	VS				0x1
       |               | 00054 | //		#define	CC				0x8
       |               | 00055 | //		#define	CS				0x0
       |               | 00056 | //
       |               | 00057 | //	Comparison
       |               | 00058 | //		#define	EQ				0x2
       |               | 00059 | //		#define	NE				0xA
       |               | 00060 | //
       |               | 00061 | //		#define	LT0				0x3
       |               | 00062 | //		#define	LE0				0x7
       |               | 00063 | //		#define	GE0				0xB
       |               | 00064 | //		#define	GT0				0xF
       |               | 00065 | //
       |               | 00066 | //	Signed Comparison
       |               | 00067 | //		#define	LT				0x5
       |               | 00068 | //		#define	LE				0x6
       |               | 00069 | //		#define	GE				0xD
       |               | 00070 | //		#define	GT				0xE
       |               | 00071 | //
       |               | 00072 | //	Unsigned Comparison
       |               | 00073 | //		#define	ULT				0x0
       |               | 00074 | //		#define	ULE				0x4
       |               | 00075 | //		#define	UGE				0x8
       |               | 00076 | //		#define	UGT				0xC
       |               | 00077 | 
       |               | 00078 | //=================================================================================================
       |               | 00079 | // I/O Peripheral Addresses common to both iopage = 0 and iopage = 1
       |               | 00080 | //=================================================================================================
       |               | 00081 | 
       |               | 00082 | 	// SCU (Supervisory Control Unit)
       |      = 0x0000 | 00083 | 		#define	SCUreg			0x00
       |      = 0x0001 | 00084 | 		#define	SCUpc				0x01
       |      = 0x0002 | 00085 | 		#define	SCUcc				0x02
       |      = 0x0003 | 00086 | 		#define	SCUtime			0x03
       |      = 0x0003 | 00087 | 		#define	SCUpntr			0x03
       |      = 0x0004 | 00088 | 		#define	SCUbkpt			0x04
       |      = 0x0004 | 00089 | 		#define	SCUstop			0x04
       |      = 0x0005 | 00090 | 		#define	SCUwait			0x05
       |      = 0x0005 | 00091 | 		#define	SCUiopageWR			0x05
       |      = 0x0006 | 00092 | 		#define	SCUrsrc			0x06
       |      = 0x0006 | 00093 | 		#define	SCUup				0x06
       |      = 0x0007 | 00094 | 		#define	SCUiopageRD			0x07
       |      = 0x0007 | 00095 | 		#define	SCUdown			0x07
       |               | 00096 | 
       |               | 00097 | 
       |               | 00098 | 	//LFSR0 (Linear Feedback Shift Register)
       |      = 0x0008 | 00099 | 		#define	LFSR0cfg			0x08
       |      = 0x0009 | 00100 | 		#define	LFSR0tapcfg			0x09
       |      = 0x000A | 00101 | 		#define	LFSR0reg			0x0A
       |      = 0x000B | 00102 | 		#define	LFSR0data			0x0B
       |               | 00103 | 
       |               | 00104 | 	//LFSR1 (Linear Feedback Shift Register)
       |      = 0x000C | 00105 | 		#define	LFSR1cfg			0x0C
       |      = 0x000D | 00106 | 		#define	LFSR1tapcfg			0x0D
       |      = 0x000E | 00107 | 		#define	LFSR1reg			0x0E
       |      = 0x000F | 00108 | 		#define	LFSR1data			0x0F
       |               | 00109 | 
       |               | 00110 | 	//VPU (Vector Processing Unit)
       |               | 00111 | 
       |      = 0x0010 | 00112 | 		#define	VPUcfg0			0x10
       |      = 0x0011 | 00113 | 		#define	VPUcfg1			0x11
       |      = 0x0012 | 00114 | 		#define	VPUopAba			0x12
       |      = 0x0013 | 00115 | 		#define	VPUopBba			0x13
       |      = 0x0014 | 00116 | 		#define	VPUopadrmsk			0x14
       |      = 0x0015 | 00117 | 		#define	VPUopA			0x15
       |      = 0x0016 | 00118 | 		#define	VPUopB			0x16
       |      = 0x0017 | 00119 | 		#define	VPUrsba			0x17
       |      = 0x0018 | 00120 | 		#define	VPUrsadrsmk			0x18
       |      = 0x0019 | 00121 | 		#define	VPUrslsw			0x19
       |      = 0x001A | 00122 | 		#define	VPUrsmsw			0x1A
       |      = 0x001B | 00123 | 		#define	VPUrsext			0x1B
       |      = 0x001C | 00124 | 		#define	VPUfilterLength		0x1C
       |               | 00125 | 
       |               | 00126 | 	// SPI0 (Serial Peripheral Interface)
       |      = 0x0034 | 00127 | 		#define	SPI0rx			0x34
       |      = 0x0034 | 00128 | 		#define	SPI0tx			0x34
       |      = 0x0035 | 00129 | 		#define	SPI0cfg			0x35
       |               | 00130 | 
       |               | 00131 | 	// SPI1 (Serial Peripheral Interface)
       |      = 0x0036 | 00132 | 		#define	SPI1rx			0x36
       |      = 0x0036 | 00133 | 		#define	SPI1tx			0x36
       |      = 0x0037 | 00134 | 		#define	SPI1cfg			0x37
       |               | 00135 | 
       |               | 00136 | 	// SFU (Shared Functional Units)
       |      = 0x0038 | 00137 | 		#define	SFUrev			0x38
       |      = 0x0039 | 00138 | 		#define	SFUpack			0x39
       |      = 0x003A | 00139 | 		#define	SFUpop			0x3A
       |      = 0x003B | 00140 | 		#define	SFUls1			0x3B
       |               | 00141 | 
       |               | 00142 | 	// TMRA (TimerA)
       |      = 0x003E | 00143 | 		#define	TMRAcfg			0x3E
       |      = 0x003F | 00144 | 		#define	TMRAcount			0x3F
       |      = 0x0040 | 00145 | 		#define	TMRACCR0			0x40
       |      = 0x0041 | 00146 | 		#define	TMRACCM0cfg			0x41
       |      = 0x0042 | 00147 | 		#define	TMRACCR1			0x42
       |      = 0x0043 | 00148 | 		#define	TMRACCM1cfg			0x43
       |      = 0x0044 | 00149 | 		#define	TMRACCR2			0x44
       |      = 0x0045 | 00150 | 		#define	TMRACCM2cfg			0x45
       |      = 0x0046 | 00151 | 		#define	TMRACCR3			0x46
       |      = 0x0047 | 00152 | 		#define	TMRACCM3cfg			0x47
       |               | 00153 | 
       |               | 00154 | 
       |               | 00155 | 	// GPIO (General Purpose I/O)
       |      = 0x0020 | 00156 |    		#define	GPAin				0x20
       |      = 0x0020 | 00157 | 		#define	GPAout			0x20
       |      = 0x0021 | 00158 | 		#define	GPAcfg			0x21
       |               | 00159 | 
       |      = 0x0022 | 00160 | 		#define	GPBin				0x22
       |      = 0x0022 | 00161 | 		#define	GPBout			0x22
       |      = 0x0023 | 00162 | 		#define	GPBcfg			0x23
       |               | 00163 | 
       |      = 0x0024 | 00164 | 		#define	GPCin				0x24
       |      = 0x0024 | 00165 | 		#define	GPCout			0x24
       |      = 0x0025 | 00166 | 		#define	GPCcfg			0x25
       |               | 00167 | 
       |      = 0x0026 | 00168 | 		#define	GPDin				0x26
       |      = 0x0026 | 00169 | 		#define	GPDout			0x26
       |      = 0x0027 | 00170 | 		#define	GPDcfg			0x27
       |               | 00171 | 
       |      = 0x0028 | 00172 | 		#define	GPEin				0x28
       |      = 0x0028 | 00173 | 		#define	GPEout			0x28
       |      = 0x0029 | 00174 | 		#define	GPEcfg			0x29
       |               | 00175 | 
       |      = 0x002A | 00176 | 		#define	GPFin				0x2A
       |      = 0x002A | 00177 | 		#define	GPFout			0x2A
       |      = 0x002B | 00178 | 		#define	GPFcfg			0x2B
       |               | 00179 | 
       |      = 0x002C | 00180 | 		#define	GPGin				0x2C
       |      = 0x002C | 00181 | 		#define	GPGout			0x2C
       |      = 0x002D | 00182 | 		#define	GPGcfg			0x2D
       |               | 00183 | 
       |      = 0x002E | 00184 | 		#define	GPHin				0x2E
       |      = 0x002E | 00185 | 		#define	GPHout			0x2E
       |      = 0x002F | 00186 | 		#define	GPHcfg			0x2F
       |               | 00187 | 
       |      = 0x0030 | 00188 | 		#define	GPIin				0x30
       |      = 0x0030 | 00189 | 		#define	GPIout			0x30
       |      = 0x0031 | 00190 | 		#define	GPIcfg			0x31
       |               | 00191 | 
       |      = 0x0032 | 00192 | 		#define	GPJin				0x32
       |      = 0x0032 | 00193 | 		#define	GPJout			0x32
       |      = 0x0033 | 00194 | 		#define	GPJcfg			0x33
       |               | 00195 | 
       |               | 00196 | 
       |               | 00197 | //=================================================================================================
       |               | 00198 | // I/O Peripheral Addresses for iopage = 0
       |               | 00199 | //=================================================================================================
       |               | 00200 | 
       |               | 00201 | 	// TMRB (TimerB)
       |      = 0x0048 | 00202 | 		#define	TMRBcfg			0x48
       |      = 0x0049 | 00203 | 		#define	TMRBcount			0x49
       |      = 0x004A | 00204 | 		#define	TMRBCCR0			0x4A
       |      = 0x004B | 00205 | 		#define	TMRBCCM0cfg			0x4B
       |      = 0x004C | 00206 | 		#define	TMRBCCR1			0x4C
       |      = 0x004D | 00207 | 		#define	TMRBCCM1cfg			0x4D
       |               | 00208 | 
       |               | 00209 | 
       |               | 00210 | 
       |               | 00211 | 	// XInC1 BBU names for ease of use with XInC1 code
       |      = 0x0058 | 00212 | 		#define	BBUcfg			0x58
       |      = 0x0058 | 00213 | 		#define	BBUstatus			0x58
       |      = 0x005A | 00214 | 		#define	BBUtx				0x5A
       |      = 0x005A | 00215 | 		#define	BBUrx				0x5A
       |      = 0x005B | 00216 | 		#define	BBUbrg			0x5B
       |      = 0x005C | 00217 | 		#define	BBUtime			0x5C
       |      = 0x005D | 00218 | 		#define	BBUrx4			0x5D
       |      = 0x005E | 00219 | 		#define	BBUrx6			0x5E
       |      = 0x005F | 00220 | 		#define	BBUstart			0x5F
       |               | 00221 | 
       |               | 00222 | 
       |               | 00223 | 	// BBU0
       |      = 0x0058 | 00224 | 		#define	BBU0cfg0			0x58
       |      = 0x0059 | 00225 | 		#define	BBU0cfg1 			0x59
       |      = 0x005A | 00226 | 		#define	BBU0tx			0x5A
       |      = 0x005A | 00227 | 		#define	BBU0rx			0x5A
       |      = 0x005B | 00228 | 		#define	BBU0brg			0x5B
       |      = 0x005C | 00229 | 		#define	BBU0time			0x5C
       |      = 0x005D | 00230 | 		#define	BBU0rx4			0x5D
       |      = 0x005E | 00231 | 		#define	BBU0rx6			0x5E
       |      = 0x005F | 00232 | 		#define	BBU0start			0x5F
       |               | 00233 | 
       |               | 00234 | 	// BBU1
       |      = 0x0060 | 00235 | 		#define	BBU1cfg0			0x60
       |      = 0x0061 | 00236 | 		#define	BBU1cfg1 			0x61
       |      = 0x0062 | 00237 | 		#define	BBU1tx			0x62
       |      = 0x0062 | 00238 | 		#define	BBU1rx			0x62
       |      = 0x0063 | 00239 | 		#define	BBU1brg			0x63
       |      = 0x0064 | 00240 | 		#define	BBU1time			0x64
       |      = 0x0065 | 00241 | 		#define	BBU1flow			0x65
       |      = 0x0065 | 00242 | 		#define	BBU1rx4			0x65
       |      = 0x0067 | 00243 | 		#define	BBU1start			0x67
       |               | 00244 | 
       |               | 00245 | 	// DASI (Digital Audio Serial Interface)
       |      = 0x0068 | 00246 | 		#define	DASIconfig0			0x68
       |      = 0x0069 | 00247 | 		#define	DASIconfig1			0x69
       |      = 0x006A | 00248 | 		#define	DASIconfig2			0x6A
       |      = 0x006B | 00249 | 		#define	DASIstatus0			0x6B
       |      = 0x006C | 00250 | 		#define	DASIstatus1			0x6C
       |      = 0x006D | 00251 | 		#define	DASIstatus2			0x6D
       |               | 00252 | 
       |      = 0x006B | 00253 | 	       #define    DASIrx0         	   	0x6B
       |      = 0x006C | 00254 | 	       #define    DASIrx1         	   	0x6C
       |      = 0x006D | 00255 | 	       #define    DASIrx2         	   	0x6D
       |      = 0x006B | 00256 | 	       #define    DASItx0            	0x6B
       |      = 0x006C | 00257 | 	       #define    DASItx1            	0x6C
       |      = 0x006D | 00258 | 	       #define    DASItx2            	0x6D
       |      = 0x006E | 00259 | 	       #define	DASIcount0			0x6E
       |      = 0x006F | 00260 | 	       #define	DASIcount1			0x6F
       |               | 00261 | 
       |               | 00262 | 
       |               | 00263 | 
       |               | 00264 | 	// SCX (Supervisory Control Extensions)
       |      = 0x0070 | 00265 | 		#define	SCXioCfgP			0x70
       |      = 0x0071 | 00266 | 		#define	SCXioCfgD			0x71
       |               | 00267 | 
       |      = 0x0072 | 00268 | 		#define	SCXclkCfg			0x72
       |      = 0x0073 | 00269 | 		#define	SCXaltCfg			0x73
       |      = 0x0074 | 00270 | 		#define	SCXPLLCfg0			0x74
       |      = 0x0075 | 00271 | 		#define	SCXPLLCfg1			0x75
       |      = 0x0076 | 00272 | 		#define	SCXmemcol			0x76
       |      = 0x0077 | 00273 | 		#define	SCXcount			0x77
       |               | 00274 | 
       |               | 00275 | 	// SMU (Sleep Mode Unit)
       |      = 0x0078 | 00276 | 		#define	SMUcfg0			0x78
       |      = 0x0079 | 00277 | 		#define	SMUcfg1			0x79
       |               | 00278 | 
       |               | 00279 | 	//ADC
       |      = 0x007D | 00280 | 	     #define      ADCcfg0			0x7D
       |      = 0x007E | 00281 | 	     #define      ADCcfg1			0x7E
       |      = 0x007F | 00282 | 	     #define      ADCdata			0x7F
       |               | 00283 | 
       |               | 00284 | //=================================================================================================
       |               | 00285 | // I/O Peripheral Addresses for iopage = 1
       |               | 00286 | //=================================================================================================
       |               | 00287 | 
       |               | 00288 | 	// Quant0 (ADPCM Difference Quantizer)
       |      = 0x0048 | 00289 | 		#define	Quant0cfg			0x48
       |      = 0x0049 | 00290 | 		#define	Quant0pred			0x49
       |      = 0x0049 | 00291 | 		#define	Quant0dec			0x49
       |      = 0x004A | 00292 | 		#define	Quant0step			0x4A
       |      = 0x004A | 00293 | 		#define	Quant0delta			0x4A
       |      = 0x004B | 00294 | 		#define	Quant0samp			0x4B
       |               | 00295 | 
       |               | 00296 | 	// Quant1 (ADPCM Difference Quantizer)
       |      = 0x004C | 00297 | 		#define	Quant1cfg			0x4C
       |      = 0x004D | 00298 | 		#define	Quant1pred			0x4D
       |      = 0x004D | 00299 | 		#define	Quant1dec			0x4D
       |      = 0x004E | 00300 | 		#define	Quant1step			0x4E
       |      = 0x004E | 00301 | 		#define	Quant1delta			0x4E
       |      = 0x004F | 00302 | 		#define	Quant1samp			0x4F
       |               | 00303 | 
       |               | 00304 | 	// Quant2 (ADPCM Difference Quantizer)
       |      = 0x0050 | 00305 | 		#define	Quant2cfg			0x50
       |      = 0x0051 | 00306 | 		#define	Quant2pred			0x51
       |      = 0x0051 | 00307 | 		#define	Quant2dec			0x51
       |      = 0x0052 | 00308 | 		#define	Quant2step			0x52
       |      = 0x0052 | 00309 | 		#define	Quant2delta			0x52
       |      = 0x0053 | 00310 | 		#define	Quant2samp			0x53
       |               | 00311 | 
       |               | 00312 | 	// Quant3 (ADPCM Difference Quantizer)
       |      = 0x0054 | 00313 | 		#define	Quant3cfg			0x54
       |      = 0x0055 | 00314 | 		#define	Quant3pred			0x55
       |      = 0x0055 | 00315 | 		#define	Quant3dec			0x55
       |      = 0x0056 | 00316 | 		#define	Quant3step			0x56
       |      = 0x0056 | 00317 | 		#define	Quant3delta			0x56
       |      = 0x0057 | 00318 | 		#define	Quant3samp			0x57
       |               | 00319 | 
       |               | 00320 | 	// InvQuant0 (ADPCM Inverse Difference Quantizer)
       |      = 0x0058 | 00321 | 		#define	InvQuant0cfg		0x58
       |      = 0x0059 | 00322 | 		#define	InvQuant0delta		0x59
       |      = 0x0059 | 00323 | 		#define	InvQuant0vpdiff		0x59
       |      = 0x005A | 00324 | 		#define	InvQuant0step		0x5A
       |               | 00325 | 
       |               | 00326 | 	// InvQuant1 (ADPCM Inverse Difference Quantizer)
       |      = 0x005C | 00327 | 		#define	InvQuant1cfg		0x5C
       |      = 0x005D | 00328 | 		#define	InvQuant1delta		0x5D
       |      = 0x005D | 00329 | 		#define	InvQuant1vpdiff		0x5D
       |      = 0x005E | 00330 | 		#define	InvQuant1step		0x5E
       |               | 00331 | 
       |               | 00332 | 	// InvQuant2 (ADPCM Inverse Difference Quantizer)
       |      = 0x0060 | 00333 | 		#define	InvQuant2cfg		0x60
       |      = 0x0061 | 00334 | 		#define	InvQuant2delta		0x61
       |      = 0x0061 | 00335 | 		#define	InvQuant2vpdiff		0x61
       |      = 0x0062 | 00336 | 		#define	InvQuant2step		0x62
       |               | 00337 | 
       |               | 00338 | 	// InvQuant3 (ADPCM Inverse Difference Quantizer)
       |      = 0x0064 | 00339 | 		#define	InvQuant3cfg		0x64
       |      = 0x0065 | 00340 | 		#define	InvQuant3delta		0x65
       |      = 0x0065 | 00341 | 		#define	InvQuant3vpdiff		0x65
       |      = 0x0066 | 00342 | 		#define	InvQuant3step		0x66
       |               | 00343 | 
       |               | 00344 | 	// Accum0 (Accumulator)
       |      = 0x0068 | 00345 | 		#define	Accum0cfg			0x68
       |      = 0x0069 | 00346 | 		#define	Accum0high			0x69
       |      = 0x006A | 00347 | 		#define	Accum0low			0x6A
       |      = 0x006B | 00348 | 		#define	Accum0addsubhigh		0x6B
       |      = 0x006C | 00349 | 		#define	Accum0addlow		0x6C
       |      = 0x006D | 00350 | 		#define	Accum0sublow		0x6D
       |               | 00351 | 
       |               | 00352 | 	// Accum1 (Accumulator)
       |      = 0x006E | 00353 | 		#define	Accum1cfg			0x6E
       |      = 0x006F | 00354 | 		#define	Accum1high			0x6F
       |      = 0x0070 | 00355 | 		#define	Accum1low			0x70
       |      = 0x0071 | 00356 | 		#define	Accum1addsubhigh		0x71
       |      = 0x0072 | 00357 | 		#define	Accum1addlow		0x72
       |      = 0x0073 | 00358 | 		#define	Accum1sublow		0x73
       |               | 00359 | 
       |               | 00360 | 
       |               | 00361 | 
       |               | 00362 | //ADC Configuration
       |      = 0x000F | 00363 | 		#define 	ADC_ENABLE			15
       |      = 0x000C | 00364 | 		#define 	ADC_CLK_DIV			12
       |      = 0x0009 | 00365 | 		#define 	ADC_START			9
       |      = 0x0000 | 00366 | 		#define	MUX_ENABLE			0
       |               | 00367 | 
       |               | 00368 | //configuration0
       |      = 0x000F | 00369 | 		#define	clrA		15	//clear accumuluator(WRITE ONLY)
       |      = 0x000E | 00370 | 		#define	clraaOPB	14	//USE FOR VECTOR MAC clear OPBa
       |      = 0x000D | 00371 | 		#define	addnsubCfg	13	//add/subtract mode
       |      = 0x000C | 00372 | 		#define	RSh		12	//result shift config
       |      = 0x000B | 00373 | 		#define	Rinc		11	//increment Result base address
       |      = 0x000A | 00374 | 		#define	Binc		10	//increment OPB base address
       |      = 0x0009 | 00375 | 		#define	ADec		9	//decimation mode
       |      = 0x0008 | 00376 | 		#define	Ainc		8	//increment OPA base address
       |      = 0x0007 | 00377 | 		#define	ACcfg		7	//accumulaor source config
       |      = 0x0006 | 00378 | 		#define	aB		6	//adder operandB config
       |      = 0x0005 | 00379 | 		#define	aA		5	//adder operandA config
       |      = 0x0003 | 00380 | 		#define	DFW		3	//data field to write
       |      = 0x0002 | 00381 | 		#define	Rdest		2	//result memory destination
       |      = 0x0000 | 00382 | 		#define	OPsrc		0	//operand source configuration
       |               | 00383 | 
       |               | 00384 | //configuration1
       |      = 0x0007 | 00385 | 		#define	Pipe		7	//piple line enable
       |      = 0x0005 | 00386 | 		#define	RS		5	//Result saturation
       |      = 0x0004 | 00387 | 		#define	RR		4	//result rounding
       |      = 0x0003 | 00388 | 		#define	AddAlign	3	//configure alignemnt of operands for add operation
       |      = 0x0002 | 00389 | 		#define	MS		2	//multiplier shift
       |      = 0x0001 | 00390 | 		#define	Btyp		1	//operand B type
       |      = 0x0000 | 00391 | 		#define	Atyp		0	//operand A type
       |               | 00392 | //Timer configuration
       |               | 00393 | 
       |      = 0x18BB | 00394 | #define 	XPD_EchoString_ROM         	0x18BB
       |               | 00395 |  //=================================================================================================
       |               | 00396 |  // Boolean Logic
       |               | 00397 |  //=================================================================================================
       |               | 00398 | 
       |      = 0x0001 | 00399 | 		#define	true				1
       |      = 0x0000 | 00400 |  		#define	false				0
       |               | 00401 | 
       |               | 00402 |  //=================================================================================================
       |               | 00403 |  // Hardware Semaphores
       |               | 00404 |  //=================================================================================================
       |               | 00405 | 
       |      = 0x0001 | 00406 |   		#define	kHardwareSemaphore0	1 << 0
       |      = 0x0002 | 00407 |  		#define	kHardwareSemaphore1	1 << 1
       |      = 0x0004 | 00408 | 		#define	kHardwareSemaphore2	1 << 2
       |      = 0x0008 | 00409 |  		#define	kHardwareSemaphore3	1 << 3
       |      = 0x0010 | 00410 |  		#define	kHardwareSemaphore4	1 << 4
       |      = 0x0020 | 00411 |  		#define	kHardwareSemaphore5	1 << 5
       |      = 0x0040 | 00412 | 		#define	kHardwareSemaphore6	1 << 6
       |      = 0x0080 | 00413 |  		#define	kHardwareSemaphore7	1 << 7
       |      = 0x0100 | 00414 |  		#define	kHardwareSemaphore8	1 << 8
       |      = 0x0200 | 00415 |  		#define	kHardwareSemaphore9	1 << 9
       |      = 0x0400 | 00416 |  		#define	kHardwareSemaphore10	1 << 10
       |      = 0x0800 | 00417 |  		#define	kHardwareSemaphore11	1 << 11
       |      = 0x1000 | 00418 |  		#define	kHardwareSemaphore12	1 << 12
       |      = 0x2000 | 00419 |  		#define	kHardwareSemaphore13	1 << 13
       |      = 0x4000 | 00420 |  		#define	kHardwareSemaphore14	1 << 14
       |      = 0x8000 | 00421 | 		#define	kHardwareSemaphore15	1 << 15
       |               | 00422 | 
       |               | 00423 | //*****************************************************************************
       |               | 00424 | //*****************************************************************************
       |               | 00425 | //**  XInC2 Mask ROM Data
       |               | 00426 | //*****************************************************************************
       |               | 00427 | //*****************************************************************************
       |               | 00428 | 
       |      = 0x00D6 | 00429 | 		#define	table_bintohex				0x00D6
       |               | 00430 | 			//"0123456789ABCDEF"
       |               | 00431 | 		
       |               | 00432 | 		
       |      = 0x2000 | 00433 | 		#define	BitShiftLeftByXTableROM			0x2000
       |               | 00434 | 			//0b1111111111111111
       |               | 00435 | 			//0b1111111111111110
       |               | 00436 | 			//0b1111111111111100
       |               | 00437 | 			//0b1111111111111000
       |               | 00438 | 			//0b1111111111110000
       |               | 00439 | 			//0b1111111111100000
       |               | 00440 | 			//0b1111111111000000
       |               | 00441 | 			//0b1111111110000000
       |               | 00442 | 			//0b1111111100000000
       |               | 00443 | 			//0b1111111000000000
       |               | 00444 | 			//0b1111110000000000
       |               | 00445 | 			//0b1111100000000000
       |               | 00446 | 			//0b1111000000000000
       |               | 00447 | 			//0b1110000000000000
       |               | 00448 | 			//0b1100000000000000
       |               | 00449 | 			//0b1000000000000000
       |               | 00450 | 		
       |               | 00451 | 		
       |      = 0x2010 | 00452 | 		#define	BitShiftLeftBy16MinusXTableROM	0x2010
       |               | 00453 | 			//0b0000000000000000
       |               | 00454 | 			//0b1000000000000000
       |               | 00455 | 			//0b1100000000000000
       |               | 00456 | 			//0b1110000000000000
       |               | 00457 | 			//0b1111000000000000
       |               | 00458 | 			//0b1111100000000000
       |               | 00459 | 			//0b1111110000000000
       |               | 00460 | 			//0b1111111000000000
       |               | 00461 | 			//0b1111111100000000
       |               | 00462 | 			//0b1111111110000000
       |               | 00463 | 			//0b1111111111000000
       |               | 00464 | 			//0b1111111111100000
       |               | 00465 | 			//0b1111111111110000
       |               | 00466 | 			//0b1111111111111000
       |               | 00467 | 			//0b1111111111111100
       |               | 00468 | 			//0b1111111111111110
       |               | 00469 | 		
       |               | 00470 | 		
       |      = 0x2020 | 00471 | 		#define	BitShiftRightByXTableROM		0x2020
       |               | 00472 | 			//0b1111111111111111
       |               | 00473 | 			//0b0111111111111111
       |               | 00474 | 			//0b0011111111111111
       |               | 00475 | 			//0b0001111111111111
       |               | 00476 | 			//0b0000111111111111
       |               | 00477 | 			//0b0000011111111111
       |               | 00478 | 			//0b0000001111111111
       |               | 00479 | 			//0b0000000111111111
       |               | 00480 | 			//0b0000000011111111
       |               | 00481 | 			//0b0000000001111111
       |               | 00482 | 			//0b0000000000111111
       |               | 00483 | 			//0b0000000000011111
       |               | 00484 | 			//0b0000000000001111
       |               | 00485 | 			//0b0000000000000111
       |               | 00486 | 			//0b0000000000000011
       |               | 00487 | 			//0b0000000000000001
       |               | 00488 | 		
       |               | 00489 | 		
       |      = 0x2030 | 00490 | 		#define	BitShiftRightBy16MinusXTableROM	0x2030
       |               | 00491 | 			//0b0000000000000000
       |               | 00492 | 			//0b0000000000000001
       |               | 00493 | 			//0b0000000000000011
       |               | 00494 | 			//0b0000000000000111
       |               | 00495 | 			//0b0000000000001111
       |               | 00496 | 			//0b0000000000011111
       |               | 00497 | 			//0b0000000000111111
       |               | 00498 | 			//0b0000000001111111
       |               | 00499 | 			//0b0000000011111111
       |               | 00500 | 			//0b0000000111111111
       |               | 00501 | 			//0b0000001111111111
       |               | 00502 | 			//0b0000011111111111
       |               | 00503 | 			//0b0000111111111111
       |               | 00504 | 			//0b0001111111111111
       |               | 00505 | 			//0b0011111111111111
       |               | 00506 | 			//0b0111111111111111
       |               | 00507 | 		
       |               | 00508 | 		
       |               | 00509 | 	// Useful Messages for use with XPD_EchoString in Mask ROM
       |               | 00510 | 	
       |      = 0x00E6 | 00511 | 		#define	MSG_HEX_PREFIX		0x00E6
       |               | 00512 | 			//"0x", EOS
       |               | 00513 | 			
       |      = 0x00E9 | 00514 | 		#define	MSG_COMMA			0x00E9
       |               | 00515 | 			//", ", EOS
       |               | 00516 | 			
       |      = 0x00EC | 00517 | 		#define	MSG_NEWLINE			0x00EC
       |               | 00518 | 			//CR, LF, EOS
       |               | 00519 | 			
       |      = 0x00EF | 00520 | 		#define	MSG_SPACE			0x00EF
       |               | 00521 | 			//" ", EOS
       |               | 00522 | 
       |               | 00523 | //*****************************************************************************
       |               | 00524 | //*****************************************************************************
       |               | 00525 | //**  XInC2 Mask ROM Routines
       |               | 00526 | //*****************************************************************************
       |               | 00527 | //*****************************************************************************
       |               | 00528 | 
       |               | 00529 | 		//=============================================================================
       |               | 00530 | 		// Input Params:	None
       |               | 00531 | 		// Output Params:	None
       |               | 00532 | 		//-----------------------------------------------------------------------------
       |               | 00533 | 		// Description:	Switches to SIMD mode and enters HardReset.  Can be called
       |               | 00534 | 		//			safely from any thread.
       |               | 00535 | 		//
       |               | 00536 | 		//			Does not return.
       |               | 00537 | 		//=============================================================================
       |      = 0x0002 | 00538 | 		#define	SoftReset			0x0002
       |               | 00539 | 		
       |               | 00540 | 		
       |               | 00541 | 		//=============================================================================
       |               | 00542 | 		// Input Params:	r0 = 16-bit Termination Code
       |               | 00543 | 		// Output Params:	None
       |               | 00544 | 		//-----------------------------------------------------------------------------
       |               | 00545 | 		// Description:	Stops all threads, echos the termination code to the XPD
       |               | 00546 | 		//			module once formatted in hexadecimal, and then goes into an
       |               | 00547 | 		//			infinite loop echoing the termination code to the SPI0 bus.
       |               | 00548 | 		//
       |               | 00549 | 		//			This may be called by the boot loader upon a failed boot and
       |               | 00550 | 		//			can be safely called by user code from any thread to signify
       |               | 00551 | 		//			a fatal error condition. 
       |               | 00552 | 		//
       |               | 00553 | 		//			Does not return.
       |               | 00554 | 		//=============================================================================
       |      = 0x0006 | 00555 | 		#define	ShowTerminationCode	0x0006
       |               | 00556 | 		
       |               | 00557 | 		//=============================================================================
       |               | 00558 | 		// Input Params:	Inline configuration word
       |               | 00559 | 		// Output Params:	None
       |               | 00560 | 		//-----------------------------------------------------------------------------
       |               | 00561 | 		// Description:	Writes the current RAM image to the EEPROM.
       |               | 00562 | 		//
       |               | 00563 | 		//			Does not return.
       |               | 00564 | 		//=============================================================================
       |      = 0x0014 | 00565 | 		#define	ProgramSPIEEPROM		0x0014
       |               | 00566 | 
       |               | 00567 | 		//=============================================================================
       |               | 00568 | 		// Input Params:	r1 = ASCII Character to echo
       |               | 00569 | 		//			r6 = Return Address
       |               | 00570 | 		// Output Params:	r0 = Garbage
       |               | 00571 | 		//			r4 = Garbage
       |               | 00572 | 		//			r5 = Garbage
       |               | 00573 | 		//			r6 = Garbage
       |               | 00574 | 		//-----------------------------------------------------------------------------
       |               | 00575 | 		// Description:	Echos an ASCII character to the terminal.
       |               | 00576 | 		//=============================================================================
       |      = 0x1800 | 00577 | 		#define 	XPD_MiniEcho           	0x1800
       |      = 0x1808 | 00578 | 		#define 	XPD_MiniEcho_RW        		0x1808
       |               | 00579 | 
       |               | 00580 | 		//=============================================================================
       |               | 00581 | 		// Input Params:	r1 = Numerator (Unsigned 16-bit Integer)
       |               | 00582 | 		//			r2 = Divisor (Unsigned 16-bit Integer)
       |               | 00583 | 		//			r6 = Return Address
       |               | 00584 | 		// Output Params:	r1 = Result
       |               | 00585 | 		//			r2 = Remainder
       |               | 00586 | 		//			r6 = GARBAGE
       |               | 00587 | 		//-----------------------------------------------------------------------------
       |               | 00588 | 		// Description:	Performs the unsigned integer division of one 16-Bit unsigned
       |               | 00589 | 		//			integer by another 16-bit unsinged integer.
       |               | 00590 | 		//
       |               | 00591 | 		//			Note:  x/0 is treated as x/1 to prevent an infinite loop.
       |               | 00592 | 		//
       |               | 00593 | 		// 			There is some optimization in the register usage to be done
       |               | 00594 | 		//			but this routine is compatible with the old UnsignedDivide
       |               | 00595 | 		//			routine.  This version has some speed optimizations over the
       |               | 00596 | 		//			previous version.
       |               | 00597 | 		//=============================================================================
       |      = 0x1816 | 00598 | 		#define 	UnsignedDivide         	0x1816
       |               | 00599 | 
       |               | 00600 | 
       |               | 00601 | 		//=============================================================================
       |               | 00602 | 		// Input Params:  r6 = Return Address
       |               | 00603 | 		// Output Params: r1 = Configuration Word
       |               | 00604 | 		//			r6 = GARBAGE
       |               | 00605 | 		//-----------------------------------------------------------------------------
       |               | 00606 | 		// Description:	Reads config and status data from the MAX3100 SPI-UART
       |               | 00607 | 		//			Converter chip on the XPD Module.  Can be used to determine
       |               | 00608 | 		//			the status of the transmit and receive buffers by checking
       |               | 00609 | 		//			the transmit and receive bits.
       |               | 00610 | 		//=============================================================================
       |      = 0x185E | 00611 | 		#define	XPD_ReadConfigWord	0x185E
       |               | 00612 | 		
       |               | 00613 | 		
       |               | 00614 | 		//=============================================================================
       |               | 00615 | 		// Input Params:	r1 = The byte to write
       |               | 00616 | 		//			r6 = Return Address
       |               | 00617 | 		// Output Params:	r6 = GARBAGE
       |               | 00618 | 		//-----------------------------------------------------------------------------
       |               | 00619 | 		// Description:	Used to shift a data byte out to the SPI-UART.  The data byte
       |               | 00620 | 		//			shifted in is discarded.  The data is always in the LSB of
       |               | 00621 | 		//			the word.
       |               | 00622 | 		//=============================================================================
       |      = 0x1867 | 00623 | 		#define 	XPD_WriteByte          	0x1867
       |               | 00624 | 		
       |               | 00625 | 		
       |               | 00626 | 		//=============================================================================
       |               | 00627 | 		// Input Params:	r6 = Return Address
       |               | 00628 | 		// Output Params:	r1 = The byte read from the SPI-UART
       |               | 00629 | 		//			r6 = GARBAGE
       |               | 00630 | 		//-----------------------------------------------------------------------------
       |               | 00631 | 		// Description:	Used to shift a data byte in from the SPI-UART.  A zero byte
       |               | 00632 | 		//			is shifted out.  This subroutine does not return until a byte
       |               | 00633 | 		//			has been received.  The data is always in the LSB of the
       |               | 00634 | 		//			word.
       |               | 00635 | 		//=============================================================================
       |      = 0x1878 | 00636 | 		#define 	XPD_ReadByte           	0x1878
       |               | 00637 | 		
       |               | 00638 | 		
       |               | 00639 | 		//=============================================================================
       |               | 00640 | 		// Input Params:	r1 = The maximum number of read attempts
       |               | 00641 | 		//			r6 = Return Address
       |               | 00642 | 		// Output Params:	r1 = The byte read from the SPI-UART
       |               | 00643 | 		//			r6 = GARBAGE
       |               | 00644 | 		//-----------------------------------------------------------------------------
       |               | 00645 | 		// Description:	Used to read a data byte from the SPI-UART.  A zero byte is
       |               | 00646 | 		//			shifted out.  This subroutine does not return until a byte
       |               | 00647 | 		//			has been received or the maximum number of attempts has been
       |               | 00648 | 		//			reached.  The data is always in the LSB of the word.
       |               | 00649 | 		//=============================================================================
       |      = 0x1884 | 00650 | 		#define 	XPD_ReadByteWithTimeout	0x1884
       |               | 00651 | 		
       |               | 00652 | 		
       |               | 00653 | 		//=============================================================================
       |               | 00654 | 		// Input Params:	r1 = The byte to write
       |               | 00655 | 		//			r6 = Return Address
       |               | 00656 | 		// Output Params:	r1 = The byte read back
       |               | 00657 | 		//			r6 = GARBAGE
       |               | 00658 | 		//-----------------------------------------------------------------------------
       |               | 00659 | 		// Description:	Used to shift out a data byte to the SPI-UART and to shift
       |               | 00660 | 		//			back in another byte from the SPI-UART.  The data is always
       |               | 00661 | 		//			in the LSB of the word.
       |               | 00662 | 		//=============================================================================
       |      = 0x1898 | 00663 | 		#define 	XPD_ReadWriteByte      	0x1898
       |               | 00664 | 		
       |               | 00665 | 		
       |               | 00666 | 		//=============================================================================
       |               | 00667 | 		// Input Params:	r1 = 16-bit word to write to the SPI-UART
       |               | 00668 | 		//			r6 = Return Address
       |               | 00669 | 		// Output Params:	r1 = 16-bit word read back from the SPI-UART
       |               | 00670 | 		//			r6 = GARBAGE
       |               | 00671 | 		//-----------------------------------------------------------------------------
       |               | 00672 | 		// Description:	Used to shift out the word in r1 to the SPI-UART and to
       |               | 00673 | 		//			read back a word into r1.  The MSB of the word is a control
       |               | 00674 | 		//			byte and the LSB is a data byte.
       |               | 00675 | 		//=============================================================================
       |      = 0x18A9 | 00676 | 		#define 	XPD_ShiftInOut         	0x18A9
       |               | 00677 | 		
       |               | 00678 | 		
       |               | 00679 | 		//=============================================================================
       |               | 00680 | 		// Input Params:	r1 = Pointer to a Null Terminated String
       |               | 00681 | 		//			r6 = Return Address
       |               | 00682 | 		// Output Params:	r6 = GARBAGE
       |               | 00683 | 		//-----------------------------------------------------------------------------
       |               | 00684 | 		// Description:	Used to echo ASCII Strings to a computer terminal for
       |               | 00685 | 		//			debugging.  Newlines and other control characters can be
       |               | 00686 | 		//			embedded in the string.  All strings must be
       |               | 00687 | 		//			Null-terminated with the End-Of-String character (EOS).
       |               | 00688 | 		//=============================================================================
       |      = 0x18BB | 00689 | 		#define 	XPD_EchoString         	0x18BB
       |               | 00690 | 		
       |               | 00691 | 		
       |               | 00692 | 		//=============================================================================
       |               | 00693 | 		// Input Params:	r1 = 16-bit Unsigned Integer
       |               | 00694 | 		//			r6 = Return Address
       |               | 00695 | 		// Output Params:	r6 = GARBAGE
       |               | 00696 | 		//-----------------------------------------------------------------------------
       |               | 00697 | 		// Description:	Echos a 16-bit unsigned integer to the terminal.  Leading
       |               | 00698 | 		//			zeros are output if necessary to pad the output to 5 digits.
       |               | 00699 | 		//=============================================================================
       |      = 0x18CB | 00700 | 		#define 	XPD_EchoUnsignedDec    	0x18CB
       |               | 00701 | 		
       |               | 00702 | 		
       |               | 00703 | 		//=============================================================================
       |               | 00704 | 		// Input Params:	r1 = 16-bit Unsigned Integer
       |               | 00705 | 		//			r6 = Return Address
       |               | 00706 | 		// Output Params:	r6 = GARBAGE
       |               | 00707 | 		//-----------------------------------------------------------------------------
       |               | 00708 | 		// Description:	Echos a 16-bit unsigned integer to the terminal without leading
       |               | 00709 | 		//			zeros (No Leading Zeros).
       |               | 00710 | 		//=============================================================================
       |      = 0x18F6 | 00711 | 		#define	XPD_EchoUnsignedDecNLZ	0x18F6
       |               | 00712 | 		
       |               | 00713 | 		
       |               | 00714 | 		//=============================================================================
       |               | 00715 | 		// Input Params:	r1 = 16-bit Signed Integer
       |               | 00716 | 		//			r6 = Return Address
       |               | 00717 | 		// Output Params:	r6 = GARBAGE
       |               | 00718 | 		//-----------------------------------------------------------------------------
       |               | 00719 | 		// Description:	Echos a 16-bit signed integer to the terminal.  Leading
       |               | 00720 | 		//			zeros are output if necessary to pad the output to 5 digits.
       |               | 00721 | 		//			In total, 6 characters are output: 1 sign and 5 digits.
       |               | 00722 | 		//=============================================================================
       |      = 0x1929 | 00723 | 		#define 	XPD_EchoSignedDec      	0x1929
       |               | 00724 | 		
       |               | 00725 | 		
       |               | 00726 | 		//=============================================================================
       |               | 00727 | 		// Input Params:	r1 = 16-bit Signed Integer
       |               | 00728 | 		//			r6 = Return Address
       |               | 00729 | 		// Output Params:	r6 = GARBAGE
       |               | 00730 | 		//-----------------------------------------------------------------------------
       |               | 00731 | 		// Description:	Echos a 16-bit signed integer to the terminal without leading
       |               | 00732 | 		//			zeros (No Leading Zeros).
       |               | 00733 | 		//=============================================================================
       |      = 0x196A | 00734 | 		#define	XPD_EchoSignedDecNLZ	0x196A
       |               | 00735 | 		
       |               | 00736 | 		
       |               | 00737 | 		//=============================================================================
       |               | 00738 | 		// Input Params:	r1 = 16-bit Number
       |               | 00739 | 		//			r6 = Return Address
       |               | 00740 | 		// Output Params:	r6 = GARBAGE
       |               | 00741 | 		//-----------------------------------------------------------------------------
       |               | 00742 | 		// Description:	Echos a 16-bit number to the terminal formatted as a
       |               | 00743 | 		//			hexadecimal integer with format 0xABCD where ABCD are hex
       |               | 00744 | 		//			digits.
       |               | 00745 | 		//=============================================================================
       |      = 0x19B3 | 00746 | 		#define 	XPD_EchoHex            	0x19B3
       |               | 00747 | 		
       |               | 00748 | 		
       |               | 00749 | 		//=============================================================================
       |               | 00750 | 		// Input Params:	r1 = 16-bit Number
       |               | 00751 | 		//			r6 = Return Address
       |               | 00752 | 		// Output Params:	r6 = GARBAGE
       |               | 00753 | 		//-----------------------------------------------------------------------------
       |               | 00754 | 		// Description:	Echos a 16-bit number to the terminal formatted as a
       |               | 00755 | 		//			hexadecimal integer without the '0x' prefix (No prefix).
       |               | 00756 | 		//=============================================================================
       |      = 0x19C1 | 00757 | 		#define 	XPD_EchoHexNP          	0x19C1
       |               | 00758 | 		
       |               | 00759 | 		
       |               | 00760 | 		//=============================================================================
       |               | 00761 | 		// Input Params:	r1 = 8-bit Number
       |               | 00762 | 		//			r6 = Return Address
       |               | 00763 | 		// Output Params:	r6 = GARBAGE
       |               | 00764 | 		//-----------------------------------------------------------------------------
       |               | 00765 | 		// Description:	Echos an 8-bit number to the terminal formatted as a
       |               | 00766 | 		//			hexadecimal integer with the '0x' prefix.
       |               | 00767 | 		//=============================================================================
       |      = 0x19E7 | 00768 | 		#define 	XPD_EchoHexByte        	0x19E7
       |               | 00769 | 		
       |               | 00770 | 		
       |               | 00771 | 		//=============================================================================
       |               | 00772 | 		// Input Params:	r1 = 8-bit Number
       |               | 00773 | 		//			r6 = Return Address
       |               | 00774 | 		// Output Params:	r6 = GARBAGE
       |               | 00775 | 		//-----------------------------------------------------------------------------
       |               | 00776 | 		// Description:	Echos an 8-bit number to the terminal formatted as a
       |               | 00777 | 		//			hexadecimal integer without the '0x' prefix (No Prefix).
       |               | 00778 | 		//=============================================================================
       |      = 0x19F5 | 00779 | 		#define 	XPD_EchoHexByteNP      	0x19F5
       |               | 00780 | 		
       |               | 00781 | 		
       |               | 00782 | 		//=============================================================================
       |               | 00783 | 		// Input Params:	r1 = 16-Bit Vector
       |               | 00784 | 		//			r6 = Return Address
       |               | 00785 | 		// Output Params:	r6 = GARBAGE
       |               | 00786 | 		//-----------------------------------------------------------------------------
       |               | 00787 | 		// Description:	Echos to the terminal a comma delimited list of the bits
       |               | 00788 | 		//			that are set in a 16-bit vector.
       |               | 00789 | 		//=============================================================================
       |      = 0x1A0D | 00790 | 		#define 	XPD_EchoSetBitList     	0x1A0D
       |               | 00791 | 		
       |               | 00792 | 		
       |               | 00793 | 		//=============================================================================
       |               | 00794 | 		// Input Params:	r4 = Number of words to display
       |               | 00795 | 		//			r5 = Start address of the block
       |               | 00796 | 		//			r6 = Return Address
       |               | 00797 | 		// Output Params:	r6 = GARBAGE
       |               | 00798 | 		//-----------------------------------------------------------------------------
       |               | 00799 | 		// Description:	Echos to the terminal a given number of words of data in
       |               | 00800 | 		//			hex format starting at a given memory address.  The output is
       |               | 00801 | 		//			formatted with 8 words per line and a space in between each
       |               | 00802 | 		//			word.
       |               | 00803 | 		//=============================================================================
       |      = 0x1A32 | 00804 | 		#define 	XPD_EchoBlock          	0x1A32
       |               | 00805 | 
       |      = 0x000F | 00806 | 		#define	SPI_UART_Rbit 		 	15
       |               | 00807 | 
       |               | 00808 | //*****************************************************************************
       |               | 00809 | //*****************************************************************************
       |               | 00810 | //**  Useful ASCII Characters
       |               | 00811 | //*****************************************************************************
       |               | 00812 | //*****************************************************************************
       |               | 00813 | 
       |      = 0x0000 | 00814 | 	#define	EOS				0	// End Of String  
       |      = 0x0008 | 00815 | 	#define	BS				8	// Back Space     
       |      = 0x000A | 00816 | 	#define	LF				10	// Line Feed      
       |      = 0x000D | 00817 | 	#define	CR				13	// Carriage Return		
       |               | 00818 | 

                                 //
                                 // "ReflowOvenController.main" -> "XInC2.asm"
//============================== //==============================================================
                                 // "ReflowOvenController.main"
                                 //

       |               | 00005 | @ = 0xC000
0xC000 | 0x0100 0x4012 | 00006 | bra ProgramSPIEEPROM
0xC002 | 0x9945        | 00007 | 39237
       |               | 00008 | #include "C:/Program Files/SXC/include/sxc-art0\XInC2_Entry.asm"

                                 //
                                 // "ReflowOvenController.main"
//============================== //==============================================================
                                 // "ReflowOvenController.main" -> "XInC2_Entry.asm"
                                 //

0xC003 |               | 00001 | sxc___main:
0xC003 | 0x0B81        | 00002 |     mov  r1, 1
0xC004 | 0x138F        | 00003 |     mov  r2, (1 << 3) | 7  // start at thread 1, register 7
       |               | 00004 | 
0xC005 |               | 00005 |   sxc___main_stack_setup_loop:
0xC005 | 0x1283        | 00006 |     outp r2, SCUpntr
0xC006 | 0x1BF1 0xD200 | 00007 |     ld   r3, r1, THREAD_STACK_LOOKUP
0xC008 | 0x1A80        | 00008 |     outp r3, SCUreg
0xC009 | 0x5208        | 00009 |     add  r2, r2, (1 << 3) // adding (1 << 3) points at next stack entry
0xC00A | 0x4901        | 00010 |     add  r1, r1, 1
0xC00B | 0x59F8        | 00011 |     sub  r3, r1, 8  // loop over all 8 threads
0xC00C | 0x28F8        | 00012 |     bc   NE, sxc___main_stack_setup_loop
       |               | 00013 | 
0xC00D | 0x3BE8 0xD000 | 00014 |     mov  sp, THREAD0_STACK
0xC00F | 0x7F01        | 00015 |     add  sp, sp, 1
0xC010 | 0x03E8 0xD57B | 00016 |     mov  r0, SXCA_PARSED_CONSTRUCTOR_LIST_START
0xC012 |               | 00017 |   sxc___main_constructor_loop:
0xC012 | 0x0BC0 0x2A85 | 00018 |     sub  r1, r0, SXCA_PARSED_CONSTRUCTOR_LIST_END
0xC014 | 0x0806        | 00019 |     bc   EQ, sxc___main_constructor_loop_exit
       |               | 00020 | 
0xC015 | 0xC7FF        | 00021 |     st   r0, sp, -1
0xC016 | 0x8800        | 00022 |     ld   r1, r0, 0
0xC017 | 0x33E1        | 00023 |     jsr  r6, r1
0xC018 | 0x87FF        | 00024 |     ld   r0, sp, -1
0xC019 | 0x4001        | 00025 |     add  r0, r0, 1
0xC01A | 0x01F7        | 00026 |     bra sxc___main_constructor_loop
0xC01B |               | 00027 |   sxc___main_constructor_loop_exit:
       |               | 00028 |     
0xC01B | 0x7FFF        | 00029 |     sub  sp, sp, 1
0xC01C | 0x33EC 0xC9B5 | 00030 |     jsr  r6, sxc_main
0xC01E | 0x01FF        | 00031 |     bra  @

                                 //
                                 // "ReflowOvenController.main" -> "XInC2_Entry.asm"
//============================== //==============================================================
                                 // "ReflowOvenController.main"
                                 //

       |               | 00009 | #include "C:/Users/cchin/CapstoneFirmware/Xinc2/ReflowOvenController/build\code.asm"

                                 //
                                 // "ReflowOvenController.main"
//============================== //==============================================================
                                 // "ReflowOvenController.main" -> "code.asm"
                                 //

       |               | 00001 | 	// .file	"C:/Users/cchin/CapstoneFirmware/Xinc2/ReflowOvenController/build/ReflowOvenController.opt"
       |               | 00002 | //	.section	//.text,"xr"
       |               | 00003 | //align
       |               | 00004 | @ = (@ + 1-1)  & -1
0xC01F |               | 00005 | sxc__Z7wait_msj:                        // @_Z7wait_msj
       |               | 00006 | // BB#0:
0xC01F | 0x7F01        | 00007 | 	add	sp, sp, 0x1
0xC020 | 0xF7FF        | 00008 | 	st	r6, sp, 0xffff          // 1-byte Folded Spill
0xC021 | 0x4A00        | 00009 | 	sub	r1, r2, 0x0
0xC022 | 0x0817        | 00010 | 	bc	EQ, BB0_9
       |               | 00011 | // BB#1:
0xC023 | 0x0380        | 00012 | 	mov	r0, 0x0
0xC024 | 0x1BE8 0x4350 | 00013 | 	mov	r3, 0x4350
0xC026 | 0x23E8 0x3CB0 | 00014 | 	mov	r4, 0x3cb0
0xC028 |               | 00015 | BB0_2:                                  // %.preheader
       |               | 00016 |                                         // =>This Loop Header: Depth=1
       |               | 00017 |                                         //     Child Loop BB0_3 Depth 2
       |               | 00018 |                                         //       Child Loop BB0_4 Depth 3
       |               | 00019 |                                         //       Child Loop BB0_6 Depth 3
0xC028 | 0x2B80        | 00020 | 	mov	r5, 0x0
0xC029 |               | 00021 | BB0_3:                                  //   Parent Loop BB0_2 Depth=1
       |               | 00022 |                                         // =>  This Loop Header: Depth=2
       |               | 00023 |                                         //       Child Loop BB0_4 Depth 3
       |               | 00024 |                                         //       Child Loop BB0_6 Depth 3
0xC029 | 0x0A03        | 00025 | 	inp	r1, 0x3
0xC02A | 0x334B        | 00026 | 	sub	r6, r3, r1
0xC02B |               | 00027 | BB0_4:                                  //   Parent Loop BB0_2 Depth=1
       |               | 00028 |                                         //     Parent Loop BB0_3 Depth=2
       |               | 00029 |                                         // =>    This Inner Loop Header: Depth=3
0xC02B | 0x0A03        | 00030 | 	inp	r1, 0x3
0xC02C | 0x0B0E        | 00031 | 	add	r1, r6, r1
       |               | 00032 | 	//cmp	r1, 0x0
0xC02D | 0x0CFD        | 00033 | 	bc	LT0, BB0_4
       |               | 00034 | // BB#5:                                // %_Z14sys_clock_waitj.exit
       |               | 00035 |                                         //   in Loop: Header=BB0_3 Depth=2
0xC02E | 0x0A03        | 00036 | 	inp	r1, 0x3
0xC02F | 0x334C        | 00037 | 	sub	r6, r4, r1
0xC030 |               | 00038 | BB0_6:                                  //   Parent Loop BB0_2 Depth=1
       |               | 00039 |                                         //     Parent Loop BB0_3 Depth=2
       |               | 00040 |                                         // =>    This Inner Loop Header: Depth=3
0xC030 | 0x0A03        | 00041 | 	inp	r1, 0x3
0xC031 | 0x0B0E        | 00042 | 	add	r1, r6, r1
       |               | 00043 | 	//cmp	r1, 0x0
0xC032 | 0x0CFD        | 00044 | 	bc	LT0, BB0_6
       |               | 00045 | // BB#7:                                // %_Z14sys_clock_waitj.exit5
       |               | 00046 |                                         //   in Loop: Header=BB0_3 Depth=2
0xC033 | 0x6D01        | 00047 | 	add	r5, r5, 0x1
0xC034 | 0x0BC5 0xFC18 | 00048 | 	sub	r1, r5, 0x3e8
0xC036 | 0x28F2        | 00049 | 	bc	NE, BB0_3
       |               | 00050 | // BB#8:                                //   in Loop: Header=BB0_2 Depth=1
0xC037 | 0x4001        | 00051 | 	add	r0, r0, 0x1
0xC038 | 0x0B50        | 00052 | 	sub	r1, r0, r2
0xC039 | 0x28EE        | 00053 | 	bc	NE, BB0_2
0xC03A |               | 00054 | BB0_9:                                  // %._crit_edge
0xC03A | 0xB7FF        | 00055 | 	ld	r6, sp, 0xffff          // 1-byte Folded Reload
0xC03B | 0x7FFF        | 00056 | 	sub	sp, sp, 0x1
0xC03C | 0x33E6        | 00057 | 	jsr	r6, r6
       |               | 00058 | 
       |               | 00059 | //align
       |               | 00060 | @ = (@ + 1-1)  & -1
0xC03D |               | 00061 | sxc__Z12Num_To_ASCIIj:                  // @_Z12Num_To_ASCIIj
       |               | 00062 | // BB#0:
0xC03D | 0x03E8 0x0064 | 00063 | 	mov	r0, 0x64
0xC03F | 0x0B89        | 00064 | 	mov	r1, 0x9
0xC040 | 0x0B4A        | 00065 | 	sub	r1, r2, r1
0xC041 | 0x3016        | 00066 | 	bc	UGT, BB1_12
       |               | 00067 | // BB#1:
0xC042 | 0x0BF2 0xD209 | 00068 | 	ld	r1, r2,JTI1_0
0xC044 | 0x0BE1        | 00069 | 	jsr	r1, r1
0xC045 |               | 00070 | BB1_2:
0xC045 | 0x0390        | 00071 | 	mov	r0, 0x10
0xC046 | 0x33E6        | 00072 | 	jsr	r6, r6
0xC047 |               | 00073 | BB1_3:
0xC047 | 0x0391        | 00074 | 	mov	r0, 0x11
0xC048 | 0x33E6        | 00075 | 	jsr	r6, r6
0xC049 |               | 00076 | BB1_4:
0xC049 | 0x0392        | 00077 | 	mov	r0, 0x12
0xC04A | 0x33E6        | 00078 | 	jsr	r6, r6
0xC04B |               | 00079 | BB1_5:
0xC04B | 0x0393        | 00080 | 	mov	r0, 0x13
0xC04C | 0x33E6        | 00081 | 	jsr	r6, r6
0xC04D |               | 00082 | BB1_6:
0xC04D | 0x0394        | 00083 | 	mov	r0, 0x14
0xC04E | 0x33E6        | 00084 | 	jsr	r6, r6
0xC04F |               | 00085 | BB1_7:
0xC04F | 0x0395        | 00086 | 	mov	r0, 0x15
0xC050 | 0x33E6        | 00087 | 	jsr	r6, r6
0xC051 |               | 00088 | BB1_8:
0xC051 | 0x0396        | 00089 | 	mov	r0, 0x16
0xC052 | 0x33E6        | 00090 | 	jsr	r6, r6
0xC053 |               | 00091 | BB1_9:
0xC053 | 0x0397        | 00092 | 	mov	r0, 0x17
0xC054 | 0x33E6        | 00093 | 	jsr	r6, r6
0xC055 |               | 00094 | BB1_10:
0xC055 | 0x0398        | 00095 | 	mov	r0, 0x18
0xC056 | 0x33E6        | 00096 | 	jsr	r6, r6
0xC057 |               | 00097 | BB1_11:
0xC057 | 0x0399        | 00098 | 	mov	r0, 0x19
0xC058 |               | 00099 | BB1_12:
0xC058 | 0x33E6        | 00100 | 	jsr	r6, r6
       |               | 00101 | //	.section	//.text,"xr"
       |               | 00102 | //align
       |               | 00103 | @ = (@ + 1-1)  & -1
0xC059 |               | 00104 | sxc__Z13char_to_ASCIIc:                 // @_Z13char_to_ASCIIc
       |               | 00105 | // BB#0:
0xC059 | 0x4A9F        | 00106 | 	add	r1, r2, 0xff9f
0xC05A | 0x0399        | 00107 | 	mov	r0, 0x19
0xC05B | 0x0B41        | 00108 | 	sub	r1, r1, r0
0xC05C | 0x3002        | 00109 | 	bc	UGT, BB2_2
       |               | 00110 | // BB#1:
0xC05D | 0x42E0        | 00111 | 	add	r0, r2, 0xffe0
0xC05E | 0x33E6        | 00112 | 	jsr	r6, r6
0xC05F |               | 00113 | BB2_2:
0xC05F | 0x4ABF        | 00114 | 	add	r1, r2, 0xffbf
0xC060 | 0x0B41        | 00115 | 	sub	r1, r1, r0
0xC061 | 0x3002        | 00116 | 	bc	UGT, BB2_4
       |               | 00117 | // BB#3:
0xC062 | 0x42E0        | 00118 | 	add	r0, r2, 0xffe0
0xC063 | 0x33E6        | 00119 | 	jsr	r6, r6
0xC064 |               | 00120 | BB2_4:
0xC064 | 0x42D0        | 00121 | 	add	r0, r2, 0xffd0
0xC065 | 0x0B89        | 00122 | 	mov	r1, 0x9
0xC066 | 0x0B48        | 00123 | 	sub	r1, r0, r1
0xC067 | 0x3002        | 00124 | 	bc	UGT, BB2_6
       |               | 00125 | // BB#5:
0xC068 | 0x42E0        | 00126 | 	add	r0, r2, 0xffe0
0xC069 | 0x33E6        | 00127 | 	jsr	r6, r6
0xC06A |               | 00128 | BB2_6:
0xC06A | 0x039A        | 00129 | 	mov	r0, 0x1a
0xC06B | 0x4AC7        | 00130 | 	sub	r1, r2, 0x39
0xC06C | 0x3807        | 00131 | 	bc	GT, BB2_8
       |               | 00132 | // BB#7:
0xC06D | 0x4AE0        | 00133 | 	add	r1, r2, 0xffe0
0xC06E | 0x1390        | 00134 | 	mov	r2, 0x10
0xC06F | 0x4100        | 00135 | 	add	r0, r1, 0x0
0xC070 | 0x0B51        | 00136 | 	sub	r1, r1, r2
0xC071 | 0x0002        | 00137 | 	bc	ULT, @ + 1 + 0x2
0xC072 | 0x03E8 0x0063 | 00138 | 	mov	r0, 0x63 //Select--False
0xC074 |               | 00139 | BB2_8:
0xC074 | 0x33E6        | 00140 | 	jsr	r6, r6
       |               | 00141 | 
       |               | 00142 | //align
       |               | 00143 | @ = (@ + 1-1)  & -1
0xC075 |               | 00144 | sxc__Z22OLED_Command_160128RGBh:        // @_Z22OLED_Command_160128RGBh
       |               | 00145 | // BB#0:
0xC075 | 0x0220        | 00146 | 	inp	r0, 0x20
0xC076 | 0x0690        | 00147 | 	and	r0, r0, 0xfffb
0xC077 | 0x02A0        | 00148 | 	outp	r0, 0x20
0xC078 | 0x0220        | 00149 | 	inp	r0, 0x20
0xC079 | 0x0688        | 00150 | 	and	r0, r0, 0xfffd
0xC07A | 0x02A0        | 00151 | 	outp	r0, 0x20
0xC07B | 0x12B6        | 00152 | 	outp	r2, 0x36
0xC07C | 0x0236        | 00153 | 	inp	r0, 0x36
0xC07D | 0x0220        | 00154 | 	inp	r0, 0x20
0xC07E | 0x0710        | 00155 | 	ior	r0, r0, 0x4
0xC07F | 0x02A0        | 00156 | 	outp	r0, 0x20
0xC080 | 0x33E6        | 00157 | 	jsr	r6, r6
       |               | 00158 | 
       |               | 00159 | //align
       |               | 00160 | @ = (@ + 1-1)  & -1
0xC081 |               | 00161 | sxc__Z19OLED_Data_160128RGBh:           // @_Z19OLED_Data_160128RGBh
       |               | 00162 | // BB#0:
0xC081 | 0x0220        | 00163 | 	inp	r0, 0x20
0xC082 | 0x0690        | 00164 | 	and	r0, r0, 0xfffb
0xC083 | 0x02A0        | 00165 | 	outp	r0, 0x20
0xC084 | 0x0220        | 00166 | 	inp	r0, 0x20
0xC085 | 0x0708        | 00167 | 	ior	r0, r0, 0x2
0xC086 | 0x02A0        | 00168 | 	outp	r0, 0x20
0xC087 | 0x12B6        | 00169 | 	outp	r2, 0x36
0xC088 | 0x0236        | 00170 | 	inp	r0, 0x36
0xC089 | 0x0220        | 00171 | 	inp	r0, 0x20
0xC08A | 0x0710        | 00172 | 	ior	r0, r0, 0x4
0xC08B | 0x02A0        | 00173 | 	outp	r0, 0x20
0xC08C | 0x33E6        | 00174 | 	jsr	r6, r6
       |               | 00175 | 
       |               | 00176 | //align
       |               | 00177 | @ = (@ + 1-1)  & -1
0xC08D |               | 00178 | sxc__Z31OLED_WriteMemoryStart_160128RGBv: // @_Z31OLED_WriteMemoryStart_160128RGBv
       |               | 00179 | // BB#0:
0xC08D | 0x7F01        | 00180 | 	add	sp, sp, 0x1
0xC08E | 0xF7FF        | 00181 | 	st	r6, sp, 0xffff          // 1-byte Folded Spill
0xC08F | 0x13E8 0x0022 | 00182 | 	mov	r2, 0x22
0xC091 | 0x33EC 0xC075 | 00183 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC093 | 0xB7FF        | 00184 | 	ld	r6, sp, 0xffff          // 1-byte Folded Reload
0xC094 | 0x7FFF        | 00185 | 	sub	sp, sp, 0x1
0xC095 | 0x33E6        | 00186 | 	jsr	r6, r6
       |               | 00187 | 
       |               | 00188 | //align
       |               | 00189 | @ = (@ + 1-1)  & -1
0xC096 |               | 00190 | sxc__Z20OLED_Pixel_160128RGBm:          // @_Z20OLED_Pixel_160128RGBm
       |               | 00191 | // BB#0:
0xC096 | 0x7F02        | 00192 | 	add	sp, sp, 0x2
0xC097 | 0xF7FE        | 00193 | 	st	r6, sp, 0xfffe          // 1-byte Folded Spill
0xC098 | 0xD7FF        | 00194 | 	st	r2, sp, 0xffff          // 1-byte Folded Spill
0xC099 | 0x03CB 0x00FF | 00195 | 	and	r0, r3, 0xff
0xC09B | 0x0640        | 00196 | 	rol	r0, r0, 0x8
0xC09C | 0x0BCA 0xFF00 | 00197 | 	and	r1, r2, 0xff00
0xC09E | 0x0E41        | 00198 | 	rol	r1, r1, 0x8
0xC09F | 0x1581        | 00199 | 	ior	r2, r1, r0
0xC0A0 | 0x33EC 0xC081 | 00200 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC0A2 | 0x97FF        | 00201 | 	ld	r2, sp, 0xffff          // 1-byte Folded Reload
0xC0A3 | 0x33EC 0xC081 | 00202 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC0A5 | 0xB7FE        | 00203 | 	ld	r6, sp, 0xfffe          // 1-byte Folded Reload
0xC0A6 | 0x7FFE        | 00204 | 	sub	sp, sp, 0x2
0xC0A7 | 0x33E6        | 00205 | 	jsr	r6, r6
       |               | 00206 | 
       |               | 00207 | //align
       |               | 00208 | @ = (@ + 1-1)  & -1
0xC0A8 |               | 00209 | sxc__Z26OLED_SetPosition_160128RGBhh:   // @_Z26OLED_SetPosition_160128RGBhh
       |               | 00210 | // BB#0:
0xC0A8 | 0x7F03        | 00211 | 	add	sp, sp, 0x3
0xC0A9 | 0xF7FD        | 00212 | 	st	r6, sp, 0xfffd          // 1-byte Folded Spill
0xC0AA | 0xDFFE        | 00213 | 	st	r3, sp, 0xfffe          // 1-byte Folded Spill
0xC0AB | 0xD7FF        | 00214 | 	st	r2, sp, 0xffff          // 1-byte Folded Spill
0xC0AC | 0x13E8 0x0020 | 00215 | 	mov	r2, 0x20
0xC0AE | 0x33EC 0xC075 | 00216 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC0B0 | 0x97FF        | 00217 | 	ld	r2, sp, 0xffff          // 1-byte Folded Reload
0xC0B1 | 0x33EC 0xC081 | 00218 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC0B3 | 0x13E8 0x0021 | 00219 | 	mov	r2, 0x21
0xC0B5 | 0x33EC 0xC075 | 00220 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC0B7 | 0x97FE        | 00221 | 	ld	r2, sp, 0xfffe          // 1-byte Folded Reload
0xC0B8 | 0x33EC 0xC081 | 00222 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC0BA | 0xB7FD        | 00223 | 	ld	r6, sp, 0xfffd          // 1-byte Folded Reload
0xC0BB | 0x7FFD        | 00224 | 	sub	sp, sp, 0x3
0xC0BC | 0x33E6        | 00225 | 	jsr	r6, r6
       |               | 00226 | 
       |               | 00227 | //align
       |               | 00228 | @ = (@ + 1-1)  & -1
0xC0BD |               | 00229 | sxc__Z25OLED_FillScreen_160128RGBm:     // @_Z25OLED_FillScreen_160128RGBm
       |               | 00230 | // BB#0:
0xC0BD | 0x7F02        | 00231 | 	add	sp, sp, 0x2
0xC0BE | 0xF7FE        | 00232 | 	st	r6, sp, 0xfffe          // 1-byte Folded Spill
0xC0BF | 0x1380        | 00233 | 	mov	r2, 0x0
0xC0C0 | 0x1B80        | 00234 | 	mov	r3, 0x0
0xC0C1 | 0x33EC 0xC0A8 | 00235 | 	jsr	r6, sxc__Z26OLED_SetPosition_160128RGBhh
0xC0C3 | 0x33EC 0xC08D | 00236 | 	jsr	r6, sxc__Z31OLED_WriteMemoryStart_160128RGBv
0xC0C5 | 0x03E8 0x5000 | 00237 | 	mov	r0, 0x5000
0xC0C7 |               | 00238 | BB8_1:                                  // =>This Inner Loop Header: Depth=1
0xC0C7 | 0xC7FF        | 00239 | 	st	r0, sp, 0xffff          // 1-byte Folded Spill
0xC0C8 | 0x1380        | 00240 | 	mov	r2, 0x0
0xC0C9 | 0x1B80        | 00241 | 	mov	r3, 0x0
0xC0CA | 0x33EC 0xC096 | 00242 | 	jsr	r6, sxc__Z20OLED_Pixel_160128RGBm
0xC0CC | 0x87FF        | 00243 | 	ld	r0, sp, 0xffff          // 1-byte Folded Reload
0xC0CD | 0x40FF        | 00244 | 	add	r0, r0, 0xffff
       |               | 00245 | 	//cmp	r0, 0x0
0xC0CE | 0x28F8        | 00246 | 	bc	ZC, BB8_1
       |               | 00247 | // BB#2:
0xC0CF | 0xB7FE        | 00248 | 	ld	r6, sp, 0xfffe          // 1-byte Folded Reload
0xC0D0 | 0x7FFE        | 00249 | 	sub	sp, sp, 0x2
0xC0D1 | 0x33E6        | 00250 | 	jsr	r6, r6
       |               | 00251 | 
       |               | 00252 | //align
       |               | 00253 | @ = (@ + 1-1)  & -1
0xC0D2 |               | 00254 | sxc__Z19OLED_Text_160128RGBhhhmm:       // @_Z19OLED_Text_160128RGBhhhmm
       |               | 00255 | // BB#0:
0xC0D2 | 0x7F09        | 00256 | 	add	sp, sp, 0x9
0xC0D3 | 0xF7F7        | 00257 | 	st	r6, sp, 0xfff7          // 1-byte Folded Spill
0xC0D4 | 0xEFFA        | 00258 | 	st	r5, sp, 0xfffa          // 1-byte Folded Spill
0xC0D5 | 0xD7FE        | 00259 | 	st	r2, sp, 0xfffe          // 1-byte Folded Spill
0xC0D6 | 0x0614        | 00260 | 	rol	r0, r4, 0x2
0xC0D7 | 0x03C8 0xFFFC | 00261 | 	and	r0, r0, 0xfffc
0xC0D9 | 0x0304        | 00262 | 	add	r0, r4, r0
0xC0DA | 0x8FF6        | 00263 | 	ld	r1, sp, 0xfff6
0xC0DB | 0x1380        | 00264 | 	mov	r2, 0x0
0xC0DC | 0x0BE8 0x0080 | 00265 | 	mov	r1, 0x80
0xC0DE | 0xCFF9        | 00266 | 	st	r1, sp, 0xfff9          // 1-byte Folded Spill
0xC0DF | 0x03C0 0xD21C | 00267 | 	add	r0, r0, sxc_Ascii_1
0xC0E1 | 0xC7FB        | 00268 | 	st	r0, sp, 0xfffb          // 1-byte Folded Spill
0xC0E2 |               | 00269 | BB9_1:                                  // =>This Loop Header: Depth=1
       |               | 00270 |                                         //     Child Loop BB9_2 Depth 2
0xC0E2 | 0xD7FD        | 00271 | 	st	r2, sp, 0xfffd          // 1-byte Folded Spill
0xC0E3 | 0xDFFC        | 00272 | 	st	r3, sp, 0xfffc          // 1-byte Folded Spill
0xC0E4 | 0x97FE        | 00273 | 	ld	r2, sp, 0xfffe          // 1-byte Folded Reload
0xC0E5 | 0x33EC 0xC0A8 | 00274 | 	jsr	r6, sxc__Z26OLED_SetPosition_160128RGBhh
0xC0E7 | 0x33EC 0xC08D | 00275 | 	jsr	r6, sxc__Z31OLED_WriteMemoryStart_160128RGBv
0xC0E9 | 0x1385        | 00276 | 	mov	r2, 0x5
0xC0EA |               | 00277 | BB9_2:                                  //   Parent Loop BB9_1 Depth=1
       |               | 00278 |                                         // =>  This Inner Loop Header: Depth=2
0xC0EA | 0xD7F8        | 00279 | 	st	r2, sp, 0xfff8          // 1-byte Folded Spill
0xC0EB | 0x87FB        | 00280 | 	ld	r0, sp, 0xfffb          // 1-byte Folded Reload
0xC0EC | 0x0350        | 00281 | 	sub	r0, r0, r2
0xC0ED | 0x8005        | 00282 | 	ld	r0, r0, 0x5
0xC0EE | 0x8FF9        | 00283 | 	ld	r1, sp, 0xfff9          // 1-byte Folded Reload
0xC0EF | 0x0548        | 00284 | 	and	r0, r0, r1
0xC0F0 | 0x0B48        | 00285 | 	sub	r1, r0, r1
0xC0F1 | 0x2803        | 00286 | 	bc	NE, BB9_4
       |               | 00287 | // BB#3:                                //   in Loop: Header=BB9_2 Depth=2
0xC0F2 | 0x97FA        | 00288 | 	ld	r2, sp, 0xfffa          // 1-byte Folded Reload
0xC0F3 | 0x9FF6        | 00289 | 	ld	r3, sp, 0xfff6
0xC0F4 | 0x0102        | 00290 | 	bra	BB9_5
0xC0F5 |               | 00291 | BB9_4:                                  //   in Loop: Header=BB9_2 Depth=2
0xC0F5 | 0x1380        | 00292 | 	mov	r2, 0x0
0xC0F6 | 0x1B80        | 00293 | 	mov	r3, 0x0
0xC0F7 |               | 00294 | BB9_5:                                  //   in Loop: Header=BB9_2 Depth=2
0xC0F7 | 0x33EC 0xC096 | 00295 | 	jsr	r6, sxc__Z20OLED_Pixel_160128RGBm
0xC0F9 | 0x97F8        | 00296 | 	ld	r2, sp, 0xfff8          // 1-byte Folded Reload
0xC0FA | 0x52FF        | 00297 | 	add	r2, r2, 0xffff
       |               | 00298 | 	//cmp	r2, 0x0
0xC0FB | 0x28EE        | 00299 | 	bc	ZC, BB9_2
       |               | 00300 | // BB#6:                                //   in Loop: Header=BB9_1 Depth=1
0xC0FC | 0x9FFC        | 00301 | 	ld	r3, sp, 0xfffc          // 1-byte Folded Reload
0xC0FD | 0x5B01        | 00302 | 	add	r3, r3, 0x1
0xC0FE | 0x87F9        | 00303 | 	ld	r0, sp, 0xfff9          // 1-byte Folded Reload
0xC0FF | 0x0680        | 00304 | 	and	r0, r0, 0xfffe
0xC100 | 0x0678        | 00305 | 	rol	r0, r0, 0xf
0xC101 | 0xC7F9        | 00306 | 	st	r0, sp, 0xfff9          // 1-byte Folded Spill
0xC102 | 0x97FD        | 00307 | 	ld	r2, sp, 0xfffd          // 1-byte Folded Reload
0xC103 | 0x5201        | 00308 | 	add	r2, r2, 0x1
0xC104 | 0x4AF8        | 00309 | 	sub	r1, r2, 0x8
0xC105 | 0x28DC        | 00310 | 	bc	NE, BB9_1
       |               | 00311 | // BB#7:
0xC106 | 0xB7F7        | 00312 | 	ld	r6, sp, 0xfff7          // 1-byte Folded Reload
0xC107 | 0x7FF7        | 00313 | 	sub	sp, sp, 0x9
0xC108 | 0x33E6        | 00314 | 	jsr	r6, r6
       |               | 00315 | 
       |               | 00316 | //align
       |               | 00317 | @ = (@ + 1-1)  & -1
0xC109 |               | 00318 | sxc__Z21OLED_Text2x_160128RGBhhhmm:     // @_Z21OLED_Text2x_160128RGBhhhmm
       |               | 00319 | // BB#0:
0xC109 | 0x7F09        | 00320 | 	add	sp, sp, 0x9
0xC10A | 0xF7F7        | 00321 | 	st	r6, sp, 0xfff7          // 1-byte Folded Spill
0xC10B | 0xEFFA        | 00322 | 	st	r5, sp, 0xfffa          // 1-byte Folded Spill
0xC10C | 0xE7FB        | 00323 | 	st	r4, sp, 0xfffb          // 1-byte Folded Spill
0xC10D | 0xD7FE        | 00324 | 	st	r2, sp, 0xfffe          // 1-byte Folded Spill
0xC10E | 0x87F6        | 00325 | 	ld	r0, sp, 0xfff6
0xC10F | 0x2381        | 00326 | 	mov	r4, 0x1
0xC110 | 0x03E8 0x0080 | 00327 | 	mov	r0, 0x80
0xC112 | 0xC7F9        | 00328 | 	st	r0, sp, 0xfff9          // 1-byte Folded Spill
0xC113 |               | 00329 | BB10_1:                                 // =>This Loop Header: Depth=1
       |               | 00330 |                                         //     Child Loop BB10_2 Depth 2
0xC113 | 0xE7FD        | 00331 | 	st	r4, sp, 0xfffd          // 1-byte Folded Spill
0xC114 | 0xDFFC        | 00332 | 	st	r3, sp, 0xfffc          // 1-byte Folded Spill
0xC115 | 0x97FE        | 00333 | 	ld	r2, sp, 0xfffe          // 1-byte Folded Reload
0xC116 | 0x33EC 0xC0A8 | 00334 | 	jsr	r6, sxc__Z26OLED_SetPosition_160128RGBhh
0xC118 | 0x33EC 0xC08D | 00335 | 	jsr	r6, sxc__Z31OLED_WriteMemoryStart_160128RGBv
0xC11A | 0x1380        | 00336 | 	mov	r2, 0x0
0xC11B |               | 00337 | BB10_2:                                 //   Parent Loop BB10_1 Depth=1
       |               | 00338 |                                         // =>  This Inner Loop Header: Depth=2
0xC11B | 0xD7F8        | 00339 | 	st	r2, sp, 0xfff8          // 1-byte Folded Spill
0xC11C | 0x8FFB        | 00340 | 	ld	r1, sp, 0xfffb          // 1-byte Folded Reload
0xC11D | 0x0611        | 00341 | 	rol	r0, r1, 0x2
0xC11E | 0x03C8 0xFFFC | 00342 | 	and	r0, r0, 0xfffc
0xC120 | 0x0301        | 00343 | 	add	r0, r1, r0
0xC121 | 0x03C0 0xD21C | 00344 | 	add	r0, r0, sxc_Ascii_1
0xC123 | 0x0E82        | 00345 | 	and	r1, r2, 0xfffe
0xC124 | 0x0E79        | 00346 | 	rol	r1, r1, 0xf
0xC125 | 0x0308        | 00347 | 	add	r0, r0, r1
0xC126 | 0x8000        | 00348 | 	ld	r0, r0, 0x0
0xC127 | 0x8FF9        | 00349 | 	ld	r1, sp, 0xfff9          // 1-byte Folded Reload
0xC128 | 0x0548        | 00350 | 	and	r0, r0, r1
0xC129 | 0x0B48        | 00351 | 	sub	r1, r0, r1
0xC12A | 0x2803        | 00352 | 	bc	NE, BB10_4
       |               | 00353 | // BB#3:                                //   in Loop: Header=BB10_2 Depth=2
0xC12B | 0x97FA        | 00354 | 	ld	r2, sp, 0xfffa          // 1-byte Folded Reload
0xC12C | 0x9FF6        | 00355 | 	ld	r3, sp, 0xfff6
0xC12D | 0x0102        | 00356 | 	bra	BB10_5
0xC12E |               | 00357 | BB10_4:                                 //   in Loop: Header=BB10_2 Depth=2
0xC12E | 0x1380        | 00358 | 	mov	r2, 0x0
0xC12F | 0x1B80        | 00359 | 	mov	r3, 0x0
0xC130 |               | 00360 | BB10_5:                                 //   in Loop: Header=BB10_2 Depth=2
0xC130 | 0x33EC 0xC096 | 00361 | 	jsr	r6, sxc__Z20OLED_Pixel_160128RGBm
0xC132 | 0x97F8        | 00362 | 	ld	r2, sp, 0xfff8          // 1-byte Folded Reload
0xC133 | 0x5201        | 00363 | 	add	r2, r2, 0x1
0xC134 | 0x4AF6        | 00364 | 	sub	r1, r2, 0xa
0xC135 | 0x28E5        | 00365 | 	bc	NE, BB10_2
       |               | 00366 | // BB#6:                                //   in Loop: Header=BB10_1 Depth=1
0xC136 | 0xA7FD        | 00367 | 	ld	r4, sp, 0xfffd          // 1-byte Folded Reload
0xC137 | 0x03CC 0x0001 | 00368 | 	and	r0, r4, 0x1
0xC139 | 0x0F80        | 00369 | 	xor	r1, r0, 0x1
0xC13A | 0x0380        | 00370 | 	mov	r0, 0x0
0xC13B | 0x0348        | 00371 | 	sub	r0, r0, r1
0xC13C | 0x97F9        | 00372 | 	ld	r2, sp, 0xfff9          // 1-byte Folded Reload
0xC13D | 0x1502        | 00373 | 	rol	r2, r2, r0
0xC13E | 0x0BF1 0x2020 | 00374 | 	ld	r1, r1, 0x2020
0xC140 | 0x154A        | 00375 | 	and	r2, r2, r1
0xC141 | 0x48F0        | 00376 | 	sub	r1, r0, 0x10
0xC142 | 0x1401        | 00377 | 	bc	LT, @ + 1 + 0x1
0xC143 | 0x1380        | 00378 | 	mov	r2, 0x0 //Select--False
0xC144 | 0xD7F9        | 00379 | 	st	r2, sp, 0xfff9          // 1-byte Folded Spill
0xC145 | 0x9FFC        | 00380 | 	ld	r3, sp, 0xfffc          // 1-byte Folded Reload
0xC146 | 0x5B01        | 00381 | 	add	r3, r3, 0x1
0xC147 | 0x6401        | 00382 | 	add	r4, r4, 0x1
0xC148 | 0x4CEF        | 00383 | 	sub	r1, r4, 0x11
0xC149 | 0x28C9        | 00384 | 	bc	NE, BB10_1
       |               | 00385 | // BB#7:
0xC14A | 0xB7F7        | 00386 | 	ld	r6, sp, 0xfff7          // 1-byte Folded Reload
0xC14B | 0x7FF7        | 00387 | 	sub	sp, sp, 0x9
0xC14C | 0x33E6        | 00388 | 	jsr	r6, r6
       |               | 00389 | 
       |               | 00390 | //align
       |               | 00391 | @ = (@ + 1-1)  & -1
0xC14D |               | 00392 | sxc__Z21OLED_Print_Sensor_Valhhjjmm:    // @_Z21OLED_Print_Sensor_Valhhjjmm
       |               | 00393 | // BB#0:
0xC14D | 0x7F07        | 00394 | 	add	sp, sp, 0x7
0xC14E | 0xF7F9        | 00395 | 	st	r6, sp, 0xfff9          // 1-byte Folded Spill
0xC14F | 0x87F7        | 00396 | 	ld	r0, sp, 0xfff7
0xC150 | 0x87F8        | 00397 | 	ld	r0, sp, 0xfff8
0xC151 | 0x0389        | 00398 | 	mov	r0, 0x9
0xC152 | 0x0B44        | 00399 | 	sub	r1, r4, r0
0xC153 | 0x2010        | 00400 | 	bc	UGE, BB11_1
       |               | 00401 | // BB#10:                               // %.thread
0xC154 | 0xEFFD        | 00402 | 	st	r5, sp, 0xfffd          // 1-byte Folded Spill
0xC155 | 0xD7FB        | 00403 | 	st	r2, sp, 0xfffb          // 1-byte Folded Spill
0xC156 | 0x5400        | 00404 | 	add	r2, r4, 0x0
0xC157 | 0xDFFA        | 00405 | 	st	r3, sp, 0xfffa          // 1-byte Folded Spill
0xC158 | 0x33EC 0xC03D | 00406 | 	jsr	r6, sxc__Z12Num_To_ASCIIj
0xC15A | 0x8FF7        | 00407 | 	ld	r1, sp, 0xfff7
0xC15B | 0xCFFF        | 00408 | 	st	r1, sp, 0xffff
0xC15C | 0x97FB        | 00409 | 	ld	r2, sp, 0xfffb          // 1-byte Folded Reload
0xC15D | 0x9FFA        | 00410 | 	ld	r3, sp, 0xfffa          // 1-byte Folded Reload
0xC15E | 0x6000        | 00411 | 	add	r4, r0, 0x0
0xC15F | 0xAFF8        | 00412 | 	ld	r5, sp, 0xfff8
0xC160 | 0x33EC 0xC0D2 | 00413 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC162 | 0x0387        | 00414 | 	mov	r0, 0x7
0xC163 | 0x0169        | 00415 | 	bra	BB11_4
0xC164 |               | 00416 | BB11_1:
0xC164 | 0xEFFD        | 00417 | 	st	r5, sp, 0xfffd          // 1-byte Folded Spill
0xC165 | 0xD7FB        | 00418 | 	st	r2, sp, 0xfffb          // 1-byte Folded Spill
0xC166 | 0xDFFA        | 00419 | 	st	r3, sp, 0xfffa          // 1-byte Folded Spill
0xC167 | 0x03E8 0x0064 | 00420 | 	mov	r0, 0x64
0xC169 | 0x0B44        | 00421 | 	sub	r1, r4, r0
0xC16A | 0x2027        | 00422 | 	bc	UGE, BB11_3
       |               | 00423 | // BB#2:
0xC16B | 0x5400        | 00424 | 	add	r2, r4, 0x0
0xC16C | 0x1B8A        | 00425 | 	mov	r3, 0xa
0xC16D | 0xE7FC        | 00426 | 	st	r4, sp, 0xfffc          // 1-byte Folded Spill
0xC16E | 0x33EC 0xCA2F | 00427 | 	jsr	r6, sxc___xinc_udiv
0xC170 | 0x5000        | 00428 | 	add	r2, r0, 0x0
0xC171 | 0x1B8A        | 00429 | 	mov	r3, 0xa
0xC172 | 0x33EC 0xCA39 | 00430 | 	jsr	r6, sxc___xinc_umod
0xC174 | 0x5000        | 00431 | 	add	r2, r0, 0x0
0xC175 | 0x33EC 0xC03D | 00432 | 	jsr	r6, sxc__Z12Num_To_ASCIIj
0xC177 | 0x8FF7        | 00433 | 	ld	r1, sp, 0xfff7
0xC178 | 0xCFFF        | 00434 | 	st	r1, sp, 0xffff
0xC179 | 0x97FB        | 00435 | 	ld	r2, sp, 0xfffb          // 1-byte Folded Reload
0xC17A | 0x9FFA        | 00436 | 	ld	r3, sp, 0xfffa          // 1-byte Folded Reload
0xC17B | 0x6000        | 00437 | 	add	r4, r0, 0x0
0xC17C | 0x87F8        | 00438 | 	ld	r0, sp, 0xfff8
0xC17D | 0x6800        | 00439 | 	add	r5, r0, 0x0
0xC17E | 0x33EC 0xC0D2 | 00440 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC180 | 0x97FC        | 00441 | 	ld	r2, sp, 0xfffc          // 1-byte Folded Reload
0xC181 | 0x1B8A        | 00442 | 	mov	r3, 0xa
0xC182 | 0x33EC 0xCA39 | 00443 | 	jsr	r6, sxc___xinc_umod
0xC184 | 0x5000        | 00444 | 	add	r2, r0, 0x0
0xC185 | 0x33EC 0xC03D | 00445 | 	jsr	r6, sxc__Z12Num_To_ASCIIj
0xC187 | 0x8FF7        | 00446 | 	ld	r1, sp, 0xfff7
0xC188 | 0xCFFF        | 00447 | 	st	r1, sp, 0xffff
0xC189 | 0x8FFB        | 00448 | 	ld	r1, sp, 0xfffb          // 1-byte Folded Reload
0xC18A | 0x5107        | 00449 | 	add	r2, r1, 0x7
0xC18B | 0x9FFA        | 00450 | 	ld	r3, sp, 0xfffa          // 1-byte Folded Reload
0xC18C | 0x6000        | 00451 | 	add	r4, r0, 0x0
0xC18D | 0xAFF8        | 00452 | 	ld	r5, sp, 0xfff8
0xC18E | 0x33EC 0xC0D2 | 00453 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC190 | 0x038E        | 00454 | 	mov	r0, 0xe
0xC191 | 0x013B        | 00455 | 	bra	BB11_4
0xC192 |               | 00456 | BB11_3:
0xC192 | 0x5400        | 00457 | 	add	r2, r4, 0x0
0xC193 | 0x1BE8 0x0064 | 00458 | 	mov	r3, 0x64
0xC195 | 0xE7FC        | 00459 | 	st	r4, sp, 0xfffc          // 1-byte Folded Spill
0xC196 | 0x33EC 0xCA2F | 00460 | 	jsr	r6, sxc___xinc_udiv
0xC198 | 0x5000        | 00461 | 	add	r2, r0, 0x0
0xC199 | 0x1B8A        | 00462 | 	mov	r3, 0xa
0xC19A | 0x33EC 0xCA39 | 00463 | 	jsr	r6, sxc___xinc_umod
0xC19C | 0x5000        | 00464 | 	add	r2, r0, 0x0
0xC19D | 0x33EC 0xC03D | 00465 | 	jsr	r6, sxc__Z12Num_To_ASCIIj
0xC19F | 0x8FF7        | 00466 | 	ld	r1, sp, 0xfff7
0xC1A0 | 0xCFFF        | 00467 | 	st	r1, sp, 0xffff
0xC1A1 | 0x97FB        | 00468 | 	ld	r2, sp, 0xfffb          // 1-byte Folded Reload
0xC1A2 | 0x9FFA        | 00469 | 	ld	r3, sp, 0xfffa          // 1-byte Folded Reload
0xC1A3 | 0x6000        | 00470 | 	add	r4, r0, 0x0
0xC1A4 | 0x87F8        | 00471 | 	ld	r0, sp, 0xfff8
0xC1A5 | 0x6800        | 00472 | 	add	r5, r0, 0x0
0xC1A6 | 0x33EC 0xC0D2 | 00473 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC1A8 | 0x97FC        | 00474 | 	ld	r2, sp, 0xfffc          // 1-byte Folded Reload
0xC1A9 | 0x1B8A        | 00475 | 	mov	r3, 0xa
0xC1AA | 0x33EC 0xCA2F | 00476 | 	jsr	r6, sxc___xinc_udiv
0xC1AC | 0x5000        | 00477 | 	add	r2, r0, 0x0
0xC1AD | 0x1B8A        | 00478 | 	mov	r3, 0xa
0xC1AE | 0x33EC 0xCA39 | 00479 | 	jsr	r6, sxc___xinc_umod
0xC1B0 | 0x5000        | 00480 | 	add	r2, r0, 0x0
0xC1B1 | 0x33EC 0xC03D | 00481 | 	jsr	r6, sxc__Z12Num_To_ASCIIj
0xC1B3 | 0x8FF7        | 00482 | 	ld	r1, sp, 0xfff7
0xC1B4 | 0xCFFF        | 00483 | 	st	r1, sp, 0xffff
0xC1B5 | 0x8FFB        | 00484 | 	ld	r1, sp, 0xfffb          // 1-byte Folded Reload
0xC1B6 | 0x5107        | 00485 | 	add	r2, r1, 0x7
0xC1B7 | 0x9FFA        | 00486 | 	ld	r3, sp, 0xfffa          // 1-byte Folded Reload
0xC1B8 | 0x6000        | 00487 | 	add	r4, r0, 0x0
0xC1B9 | 0xAFF8        | 00488 | 	ld	r5, sp, 0xfff8
0xC1BA | 0x33EC 0xC0D2 | 00489 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC1BC | 0x97FC        | 00490 | 	ld	r2, sp, 0xfffc          // 1-byte Folded Reload
0xC1BD | 0x1B8A        | 00491 | 	mov	r3, 0xa
0xC1BE | 0x33EC 0xCA39 | 00492 | 	jsr	r6, sxc___xinc_umod
0xC1C0 | 0x5000        | 00493 | 	add	r2, r0, 0x0
0xC1C1 | 0x33EC 0xC03D | 00494 | 	jsr	r6, sxc__Z12Num_To_ASCIIj
0xC1C3 | 0x8FF7        | 00495 | 	ld	r1, sp, 0xfff7
0xC1C4 | 0xCFFF        | 00496 | 	st	r1, sp, 0xffff
0xC1C5 | 0x8FFB        | 00497 | 	ld	r1, sp, 0xfffb          // 1-byte Folded Reload
0xC1C6 | 0x510E        | 00498 | 	add	r2, r1, 0xe
0xC1C7 | 0x9FFA        | 00499 | 	ld	r3, sp, 0xfffa          // 1-byte Folded Reload
0xC1C8 | 0x6000        | 00500 | 	add	r4, r0, 0x0
0xC1C9 | 0xAFF8        | 00501 | 	ld	r5, sp, 0xfff8
0xC1CA | 0x33EC 0xC0D2 | 00502 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC1CC | 0x0395        | 00503 | 	mov	r0, 0x15
0xC1CD |               | 00504 | BB11_4:
0xC1CD | 0xB7FD        | 00505 | 	ld	r6, sp, 0xfffd          // 1-byte Folded Reload
0xC1CE | 0x4EFF        | 00506 | 	sub	r1, r6, 0x1
0xC1CF | 0x2807        | 00507 | 	bc	NE, BB11_5
       |               | 00508 | // BB#7:
0xC1D0 | 0x8FF7        | 00509 | 	ld	r1, sp, 0xfff7
0xC1D1 | 0xCFFF        | 00510 | 	st	r1, sp, 0xffff
0xC1D2 | 0x8FFB        | 00511 | 	ld	r1, sp, 0xfffb          // 1-byte Folded Reload
0xC1D3 | 0x1308        | 00512 | 	add	r2, r0, r1
0xC1D4 | 0x9FFA        | 00513 | 	ld	r3, sp, 0xfffa          // 1-byte Folded Reload
0xC1D5 | 0x2385        | 00514 | 	mov	r4, 0x5
0xC1D6 | 0x0115        | 00515 | 	bra	BB11_8
0xC1D7 |               | 00516 | BB11_5:
0xC1D7 | 0x8FF8        | 00517 | 	ld	r1, sp, 0xfff8
0xC1D8 | 0x9FFA        | 00518 | 	ld	r3, sp, 0xfffa          // 1-byte Folded Reload
0xC1D9 | 0x97F7        | 00519 | 	ld	r2, sp, 0xfff7
0xC1DA | 0xA7FB        | 00520 | 	ld	r4, sp, 0xfffb          // 1-byte Folded Reload
0xC1DB | 0x4E00        | 00521 | 	sub	r1, r6, 0x0
0xC1DC | 0x2812        | 00522 | 	bc	NE, BB11_9
       |               | 00523 | // BB#6:
0xC1DD | 0xD7FF        | 00524 | 	st	r2, sp, 0xffff
0xC1DE | 0x1320        | 00525 | 	add	r2, r0, r4
0xC1DF | 0xD7FB        | 00526 | 	st	r2, sp, 0xfffb          // 1-byte Folded Spill
0xC1E0 | 0x23E8 0x0061 | 00527 | 	mov	r4, 0x61
0xC1E2 | 0xAFF8        | 00528 | 	ld	r5, sp, 0xfff8
0xC1E3 | 0x33EC 0xC0D2 | 00529 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC1E5 | 0x87F7        | 00530 | 	ld	r0, sp, 0xfff7
0xC1E6 | 0xC7FF        | 00531 | 	st	r0, sp, 0xffff
0xC1E7 | 0x87FB        | 00532 | 	ld	r0, sp, 0xfffb          // 1-byte Folded Reload
0xC1E8 | 0x5007        | 00533 | 	add	r2, r0, 0x7
0xC1E9 | 0x9FFA        | 00534 | 	ld	r3, sp, 0xfffa          // 1-byte Folded Reload
0xC1EA | 0x23E8 0x0023 | 00535 | 	mov	r4, 0x23
0xC1EC |               | 00536 | BB11_8:
0xC1EC | 0xAFF8        | 00537 | 	ld	r5, sp, 0xfff8
0xC1ED | 0x33EC 0xC0D2 | 00538 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC1EF |               | 00539 | BB11_9:
0xC1EF | 0xB7F9        | 00540 | 	ld	r6, sp, 0xfff9          // 1-byte Folded Reload
0xC1F0 | 0x7FF9        | 00541 | 	sub	sp, sp, 0x7
0xC1F1 | 0x33E6        | 00542 | 	jsr	r6, r6
       |               | 00543 | 
       |               | 00544 | //align
       |               | 00545 | @ = (@ + 1-1)  & -1
0xC1F2 |               | 00546 | sxc__Z8Draw_Barhhmmjjj:                 // @_Z8Draw_Barhhmmjjj
       |               | 00547 | // BB#0:
0xC1F2 | 0x7F06        | 00548 | 	add	sp, sp, 0x6
0xC1F3 | 0xF7FA        | 00549 | 	st	r6, sp, 0xfffa          // 1-byte Folded Spill
0xC1F4 | 0xD7FE        | 00550 | 	st	r2, sp, 0xfffe          // 1-byte Folded Spill
0xC1F5 | 0x060B        | 00551 | 	rol	r0, r3, 0x1
0xC1F6 | 0x0680        | 00552 | 	and	r0, r0, 0xfffe
0xC1F7 | 0x0E10        | 00553 | 	rol	r1, r0, 0x2
0xC1F8 | 0x0BC9 0xFFFC | 00554 | 	and	r1, r1, 0xfffc
0xC1FA | 0x0308        | 00555 | 	add	r0, r0, r1
0xC1FB | 0x0E09        | 00556 | 	rol	r1, r1, 0x1
0xC1FC | 0x0E81        | 00557 | 	and	r1, r1, 0xfffe
0xC1FD | 0x0308        | 00558 | 	add	r0, r0, r1
0xC1FE | 0x0E09        | 00559 | 	rol	r1, r1, 0x1
0xC1FF | 0x0E81        | 00560 | 	and	r1, r1, 0xfffe
0xC200 | 0x0308        | 00561 | 	add	r0, r0, r1
0xC201 | 0x0E09        | 00562 | 	rol	r1, r1, 0x1
0xC202 | 0x0E81        | 00563 | 	and	r1, r1, 0xfffe
0xC203 | 0x1308        | 00564 | 	add	r2, r0, r1
0xC204 | 0xD7FB        | 00565 | 	st	r2, sp, 0xfffb          // 1-byte Folded Spill
0xC205 | 0x1BE8 0x0064 | 00566 | 	mov	r3, 0x64
0xC207 | 0x33EC 0xCA2F | 00567 | 	jsr	r6, sxc___xinc_udiv
0xC209 | 0x8FFE        | 00568 | 	ld	r1, sp, 0xfffe          // 1-byte Folded Reload
0xC20A | 0xC7FC        | 00569 | 	st	r0, sp, 0xfffc          // 1-byte Folded Spill
0xC20B | 0x4900        | 00570 | 	sub	r1, r1, 0x0
0xC20C | 0x0830        | 00571 | 	bc	EQ, BB12_7
       |               | 00572 | // BB#1:                                // %.lr.ph13
0xC20D | 0x1BE8 0x0049 | 00573 | 	mov	r3, 0x49
0xC20F | 0x03E8 0x0063 | 00574 | 	mov	r0, 0x63
0xC211 | 0x8FFB        | 00575 | 	ld	r1, sp, 0xfffb          // 1-byte Folded Reload
0xC212 | 0x0B41        | 00576 | 	sub	r1, r1, r0
0xC213 | 0x101C        | 00577 | 	bc	ULE, BB12_6
       |               | 00578 | // BB#2:
0xC214 | 0x2380        | 00579 | 	mov	r4, 0x0
0xC215 |               | 00580 | BB12_5:                                 // %.lr.ph.us
       |               | 00581 |                                         // =>This Loop Header: Depth=1
       |               | 00582 |                                         //     Child Loop BB12_3 Depth 2
0xC215 | 0xE7FF        | 00583 | 	st	r4, sp, 0xffff          // 1-byte Folded Spill
0xC216 | 0xDFFD        | 00584 | 	st	r3, sp, 0xfffd          // 1-byte Folded Spill
0xC217 | 0x1397        | 00585 | 	mov	r2, 0x17
0xC218 | 0x33EC 0xC0A8 | 00586 | 	jsr	r6, sxc__Z26OLED_SetPosition_160128RGBhh
0xC21A | 0x33EC 0xC08D | 00587 | 	jsr	r6, sxc__Z31OLED_WriteMemoryStart_160128RGBv
0xC21C | 0x0380        | 00588 | 	mov	r0, 0x0
0xC21D |               | 00589 | BB12_3:                                 //   Parent Loop BB12_5 Depth=1
       |               | 00590 |                                         // =>  This Inner Loop Header: Depth=2
0xC21D | 0xC7FB        | 00591 | 	st	r0, sp, 0xfffb          // 1-byte Folded Spill
0xC21E | 0x13E8 0xF800 | 00592 | 	mov	r2, 0xf800
0xC220 | 0x1B80        | 00593 | 	mov	r3, 0x0
0xC221 | 0x33EC 0xC096 | 00594 | 	jsr	r6, sxc__Z20OLED_Pixel_160128RGBm
0xC223 | 0x87FB        | 00595 | 	ld	r0, sp, 0xfffb          // 1-byte Folded Reload
0xC224 | 0x4001        | 00596 | 	add	r0, r0, 0x1
0xC225 | 0x8FFC        | 00597 | 	ld	r1, sp, 0xfffc          // 1-byte Folded Reload
0xC226 | 0x0B48        | 00598 | 	sub	r1, r0, r1
0xC227 | 0x00F5        | 00599 | 	bc	ULT, BB12_3
       |               | 00600 | // BB#4:                                //   in Loop: Header=BB12_5 Depth=1
0xC228 | 0x9FFD        | 00601 | 	ld	r3, sp, 0xfffd          // 1-byte Folded Reload
0xC229 | 0x5B01        | 00602 | 	add	r3, r3, 0x1
0xC22A | 0xA7FF        | 00603 | 	ld	r4, sp, 0xffff          // 1-byte Folded Reload
0xC22B | 0x6401        | 00604 | 	add	r4, r4, 0x1
0xC22C | 0x87FE        | 00605 | 	ld	r0, sp, 0xfffe          // 1-byte Folded Reload
0xC22D | 0x0B44        | 00606 | 	sub	r1, r4, r0
0xC22E | 0x080E        | 00607 | 	bc	EQ, BB12_7
0xC22F | 0x01E5        | 00608 | 	bra	BB12_5
0xC230 |               | 00609 | BB12_6:                                 // %.preheader
       |               | 00610 |                                         // =>This Inner Loop Header: Depth=1
0xC230 | 0xDFFD        | 00611 | 	st	r3, sp, 0xfffd          // 1-byte Folded Spill
0xC231 | 0x1397        | 00612 | 	mov	r2, 0x17
0xC232 | 0x33EC 0xC0A8 | 00613 | 	jsr	r6, sxc__Z26OLED_SetPosition_160128RGBhh
0xC234 | 0x33EC 0xC08D | 00614 | 	jsr	r6, sxc__Z31OLED_WriteMemoryStart_160128RGBv
0xC236 | 0x97FE        | 00615 | 	ld	r2, sp, 0xfffe          // 1-byte Folded Reload
0xC237 | 0x8FFD        | 00616 | 	ld	r1, sp, 0xfffd          // 1-byte Folded Reload
0xC238 | 0x4101        | 00617 | 	add	r0, r1, 0x1
0xC239 | 0x49B8        | 00618 | 	add	r1, r1, 0xffb8
0xC23A | 0x5800        | 00619 | 	add	r3, r0, 0x0
0xC23B | 0x0B51        | 00620 | 	sub	r1, r1, r2
0xC23C | 0x28F3        | 00621 | 	bc	NE, BB12_6
0xC23D |               | 00622 | BB12_7:                                 // %._crit_edge14
0xC23D | 0xB7FA        | 00623 | 	ld	r6, sp, 0xfffa          // 1-byte Folded Reload
0xC23E | 0x7FFA        | 00624 | 	sub	sp, sp, 0x6
0xC23F | 0x33E6        | 00625 | 	jsr	r6, r6
       |               | 00626 | 
       |               | 00627 | //align
       |               | 00628 | @ = (@ + 1-1)  & -1
0xC240 |               | 00629 | sxc__Z15OLED_write_textihhPhimm:        // @_Z15OLED_write_textihhPhimm
       |               | 00630 | // BB#0:
0xC240 | 0x7F06        | 00631 | 	add	sp, sp, 0x6
0xC241 | 0xF7FA        | 00632 | 	st	r6, sp, 0xfffa          // 1-byte Folded Spill
0xC242 | 0xB7F9        | 00633 | 	ld	r6, sp, 0xfff9
0xC243 | 0x4EFF        | 00634 | 	sub	r1, r6, 0x1
0xC244 | 0x143C        | 00635 | 	bc	LT, BB13_6
       |               | 00636 | // BB#1:                                // %.lr.ph
0xC245 | 0x87F7        | 00637 | 	ld	r0, sp, 0xfff7
0xC246 | 0x87F8        | 00638 | 	ld	r0, sp, 0xfff8
0xC247 | 0x4AFF        | 00639 | 	sub	r1, r2, 0x1
0xC248 | 0x281C        | 00640 | 	bc	NE, BB13_4
       |               | 00641 | // BB#2:
0xC249 | 0x4500        | 00642 | 	add	r0, r5, 0x0
0xC24A | 0xE7FE        | 00643 | 	st	r4, sp, 0xfffe          // 1-byte Folded Spill
0xC24B | 0x5300        | 00644 | 	add	r2, r3, 0x0
0xC24C | 0x5E00        | 00645 | 	add	r3, r6, 0x0
0xC24D | 0x8FF7        | 00646 | 	ld	r1, sp, 0xfff7
0xC24E | 0x8FF8        | 00647 | 	ld	r1, sp, 0xfff8
0xC24F |               | 00648 | BB13_3:                                 // %.preheader
       |               | 00649 |                                         // =>This Inner Loop Header: Depth=1
0xC24F | 0xDFFD        | 00650 | 	st	r3, sp, 0xfffd          // 1-byte Folded Spill
0xC250 | 0xD7FB        | 00651 | 	st	r2, sp, 0xfffb          // 1-byte Folded Spill
0xC251 | 0xC7FC        | 00652 | 	st	r0, sp, 0xfffc          // 1-byte Folded Spill
0xC252 | 0x9000        | 00653 | 	ld	r2, r0, 0x0
0xC253 | 0x33EC 0xC059 | 00654 | 	jsr	r6, sxc__Z13char_to_ASCIIc
0xC255 | 0x8FF7        | 00655 | 	ld	r1, sp, 0xfff7
0xC256 | 0xCFFF        | 00656 | 	st	r1, sp, 0xffff
0xC257 | 0x97FB        | 00657 | 	ld	r2, sp, 0xfffb          // 1-byte Folded Reload
0xC258 | 0x9FFE        | 00658 | 	ld	r3, sp, 0xfffe          // 1-byte Folded Reload
0xC259 | 0x6000        | 00659 | 	add	r4, r0, 0x0
0xC25A | 0xAFF8        | 00660 | 	ld	r5, sp, 0xfff8
0xC25B | 0x33EC 0xC0D2 | 00661 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC25D | 0x9FFD        | 00662 | 	ld	r3, sp, 0xfffd          // 1-byte Folded Reload
0xC25E | 0x97FB        | 00663 | 	ld	r2, sp, 0xfffb          // 1-byte Folded Reload
0xC25F | 0x87FC        | 00664 | 	ld	r0, sp, 0xfffc          // 1-byte Folded Reload
0xC260 | 0x4001        | 00665 | 	add	r0, r0, 0x1
0xC261 | 0x5207        | 00666 | 	add	r2, r2, 0x7
0xC262 | 0x5BFF        | 00667 | 	add	r3, r3, 0xffff
       |               | 00668 | 	//cmp	r3, 0x0
0xC263 | 0x28EB        | 00669 | 	bc	ZC, BB13_3
0xC264 | 0x011C        | 00670 | 	bra	BB13_6
0xC265 |               | 00671 | BB13_4:                                 // %.lr.ph
0xC265 | 0x4500        | 00672 | 	add	r0, r5, 0x0
0xC266 | 0xE7FE        | 00673 | 	st	r4, sp, 0xfffe          // 1-byte Folded Spill
0xC267 | 0x6600        | 00674 | 	add	r4, r6, 0x0
0xC268 | 0x8FF7        | 00675 | 	ld	r1, sp, 0xfff7
0xC269 | 0x8FF8        | 00676 | 	ld	r1, sp, 0xfff8
0xC26A | 0x4AFE        | 00677 | 	sub	r1, r2, 0x2
0xC26B | 0x2815        | 00678 | 	bc	NE, BB13_6
0xC26C |               | 00679 | BB13_5:                                 // =>This Inner Loop Header: Depth=1
0xC26C | 0xE7FD        | 00680 | 	st	r4, sp, 0xfffd          // 1-byte Folded Spill
0xC26D | 0xDFFB        | 00681 | 	st	r3, sp, 0xfffb          // 1-byte Folded Spill
0xC26E | 0xC7FC        | 00682 | 	st	r0, sp, 0xfffc          // 1-byte Folded Spill
0xC26F | 0x9000        | 00683 | 	ld	r2, r0, 0x0
0xC270 | 0x33EC 0xC059 | 00684 | 	jsr	r6, sxc__Z13char_to_ASCIIc
0xC272 | 0x8FF7        | 00685 | 	ld	r1, sp, 0xfff7
0xC273 | 0xCFFF        | 00686 | 	st	r1, sp, 0xffff
0xC274 | 0x97FB        | 00687 | 	ld	r2, sp, 0xfffb          // 1-byte Folded Reload
0xC275 | 0x9FFE        | 00688 | 	ld	r3, sp, 0xfffe          // 1-byte Folded Reload
0xC276 | 0x6000        | 00689 | 	add	r4, r0, 0x0
0xC277 | 0xAFF8        | 00690 | 	ld	r5, sp, 0xfff8
0xC278 | 0x33EC 0xC109 | 00691 | 	jsr	r6, sxc__Z21OLED_Text2x_160128RGBhhhmm
0xC27A | 0xA7FD        | 00692 | 	ld	r4, sp, 0xfffd          // 1-byte Folded Reload
0xC27B | 0x9FFB        | 00693 | 	ld	r3, sp, 0xfffb          // 1-byte Folded Reload
0xC27C | 0x87FC        | 00694 | 	ld	r0, sp, 0xfffc          // 1-byte Folded Reload
0xC27D | 0x4001        | 00695 | 	add	r0, r0, 0x1
0xC27E | 0x5B0C        | 00696 | 	add	r3, r3, 0xc
0xC27F | 0x64FF        | 00697 | 	add	r4, r4, 0xffff
       |               | 00698 | 	//cmp	r4, 0x0
0xC280 | 0x28EB        | 00699 | 	bc	ZC, BB13_5
0xC281 |               | 00700 | BB13_6:                                 // %._crit_edge
0xC281 | 0xB7FA        | 00701 | 	ld	r6, sp, 0xfffa          // 1-byte Folded Reload
0xC282 | 0x7FFA        | 00702 | 	sub	sp, sp, 0x6
0xC283 | 0x33E6        | 00703 | 	jsr	r6, r6
       |               | 00704 | 
       |               | 00705 | //align
       |               | 00706 | @ = (@ + 1-1)  & -1
0xC284 |               | 00707 | sxc__Z19OLED_Init_160128RGBv:           // @_Z19OLED_Init_160128RGBv
       |               | 00708 | // BB#0:
0xC284 | 0x7F01        | 00709 | 	add	sp, sp, 0x1
0xC285 | 0xF7FF        | 00710 | 	st	r6, sp, 0xffff          // 1-byte Folded Spill
0xC286 | 0x0220        | 00711 | 	inp	r0, 0x20
0xC287 | 0x0680        | 00712 | 	and	r0, r0, 0xfffe
0xC288 | 0x02A0        | 00713 | 	outp	r0, 0x20
0xC289 | 0x1382        | 00714 | 	mov	r2, 0x2
0xC28A | 0x33EC 0xC01F | 00715 | 	jsr	r6, sxc__Z7wait_msj
0xC28C | 0x0220        | 00716 | 	inp	r0, 0x20
0xC28D | 0x0700        | 00717 | 	ior	r0, r0, 0x1
0xC28E | 0x02A0        | 00718 | 	outp	r0, 0x20
0xC28F | 0x1382        | 00719 | 	mov	r2, 0x2
0xC290 | 0x33EC 0xC01F | 00720 | 	jsr	r6, sxc__Z7wait_msj
0xC292 | 0x1384        | 00721 | 	mov	r2, 0x4
0xC293 | 0x33EC 0xC075 | 00722 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC295 | 0x1381        | 00723 | 	mov	r2, 0x1
0xC296 | 0x33EC 0xC081 | 00724 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC298 | 0x1381        | 00725 | 	mov	r2, 0x1
0xC299 | 0x33EC 0xC01F | 00726 | 	jsr	r6, sxc__Z7wait_msj
0xC29B | 0x1384        | 00727 | 	mov	r2, 0x4
0xC29C | 0x33EC 0xC075 | 00728 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC29E | 0x1380        | 00729 | 	mov	r2, 0x0
0xC29F | 0x33EC 0xC081 | 00730 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC2A1 | 0x1381        | 00731 | 	mov	r2, 0x1
0xC2A2 | 0x33EC 0xC01F | 00732 | 	jsr	r6, sxc__Z7wait_msj
0xC2A4 | 0x1386        | 00733 | 	mov	r2, 0x6
0xC2A5 | 0x33EC 0xC075 | 00734 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC2A7 | 0x1380        | 00735 | 	mov	r2, 0x0
0xC2A8 | 0x33EC 0xC081 | 00736 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC2AA | 0x1381        | 00737 | 	mov	r2, 0x1
0xC2AB | 0x33EC 0xC01F | 00738 | 	jsr	r6, sxc__Z7wait_msj
0xC2AD | 0x1382        | 00739 | 	mov	r2, 0x2
0xC2AE | 0x33EC 0xC075 | 00740 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC2B0 | 0x1381        | 00741 | 	mov	r2, 0x1
0xC2B1 | 0x33EC 0xC081 | 00742 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC2B3 | 0x1383        | 00743 | 	mov	r2, 0x3
0xC2B4 | 0x33EC 0xC075 | 00744 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC2B6 | 0x13E8 0x0030 | 00745 | 	mov	r2, 0x30
0xC2B8 | 0x33EC 0xC081 | 00746 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC2BA | 0x13E8 0x0028 | 00747 | 	mov	r2, 0x28
0xC2BC | 0x33EC 0xC075 | 00748 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC2BE | 0x13E8 0x007F | 00749 | 	mov	r2, 0x7f
0xC2C0 | 0x33EC 0xC081 | 00750 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC2C2 | 0x13E8 0x0029 | 00751 | 	mov	r2, 0x29
0xC2C4 | 0x33EC 0xC075 | 00752 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC2C6 | 0x1380        | 00753 | 	mov	r2, 0x0
0xC2C7 | 0x33EC 0xC081 | 00754 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC2C9 | 0x1394        | 00755 | 	mov	r2, 0x14
0xC2CA | 0x33EC 0xC075 | 00756 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC2CC | 0x13E8 0x0031 | 00757 | 	mov	r2, 0x31
0xC2CE | 0x33EC 0xC081 | 00758 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC2D0 | 0x1396        | 00759 | 	mov	r2, 0x16
0xC2D1 | 0x33EC 0xC075 | 00760 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC2D3 | 0x13E8 0x0066 | 00761 | 	mov	r2, 0x66
0xC2D5 | 0x33EC 0xC081 | 00762 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC2D7 | 0x1390        | 00763 | 	mov	r2, 0x10
0xC2D8 | 0x33EC 0xC075 | 00764 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC2DA | 0x13E8 0x0045 | 00765 | 	mov	r2, 0x45
0xC2DC | 0x33EC 0xC081 | 00766 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC2DE | 0x1391        | 00767 | 	mov	r2, 0x11
0xC2DF | 0x33EC 0xC075 | 00768 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC2E1 | 0x13E8 0x0034 | 00769 | 	mov	r2, 0x34
0xC2E3 | 0x33EC 0xC081 | 00770 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC2E5 | 0x1392        | 00771 | 	mov	r2, 0x12
0xC2E6 | 0x33EC 0xC075 | 00772 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC2E8 | 0x13E8 0x0033 | 00773 | 	mov	r2, 0x33
0xC2EA | 0x33EC 0xC081 | 00774 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC2EC | 0x1388        | 00775 | 	mov	r2, 0x8
0xC2ED | 0x33EC 0xC075 | 00776 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC2EF | 0x1384        | 00777 | 	mov	r2, 0x4
0xC2F0 | 0x33EC 0xC081 | 00778 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC2F2 | 0x1389        | 00779 | 	mov	r2, 0x9
0xC2F3 | 0x33EC 0xC075 | 00780 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC2F5 | 0x1385        | 00781 | 	mov	r2, 0x5
0xC2F6 | 0x33EC 0xC081 | 00782 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC2F8 | 0x138A        | 00783 | 	mov	r2, 0xa
0xC2F9 | 0x33EC 0xC075 | 00784 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC2FB | 0x1385        | 00785 | 	mov	r2, 0x5
0xC2FC | 0x33EC 0xC081 | 00786 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC2FE | 0x138B        | 00787 | 	mov	r2, 0xb
0xC2FF | 0x33EC 0xC075 | 00788 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC301 | 0x13E8 0x009D | 00789 | 	mov	r2, 0x9d
0xC303 | 0x33EC 0xC081 | 00790 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC305 | 0x138C        | 00791 | 	mov	r2, 0xc
0xC306 | 0x33EC 0xC075 | 00792 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC308 | 0x13E8 0x008C | 00793 | 	mov	r2, 0x8c
0xC30A | 0x33EC 0xC081 | 00794 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC30C | 0x138D        | 00795 | 	mov	r2, 0xd
0xC30D | 0x33EC 0xC075 | 00796 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC30F | 0x13E8 0x0057 | 00797 | 	mov	r2, 0x57
0xC311 | 0x33EC 0xC081 | 00798 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC313 | 0x13E8 0x0080 | 00799 | 	mov	r2, 0x80
0xC315 | 0x33EC 0xC075 | 00800 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC317 | 0x1380        | 00801 | 	mov	r2, 0x0
0xC318 | 0x33EC 0xC081 | 00802 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC31A | 0x1393        | 00803 | 	mov	r2, 0x13
0xC31B | 0x33EC 0xC075 | 00804 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC31D | 0x13E8 0x00A0 | 00805 | 	mov	r2, 0xa0
0xC31F | 0x33EC 0xC081 | 00806 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC321 | 0x1397        | 00807 | 	mov	r2, 0x17
0xC322 | 0x33EC 0xC075 | 00808 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC324 | 0x1380        | 00809 | 	mov	r2, 0x0
0xC325 | 0x33EC 0xC081 | 00810 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC327 | 0x1398        | 00811 | 	mov	r2, 0x18
0xC328 | 0x33EC 0xC075 | 00812 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC32A | 0x13E8 0x009F | 00813 | 	mov	r2, 0x9f
0xC32C | 0x33EC 0xC081 | 00814 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC32E | 0x1399        | 00815 | 	mov	r2, 0x19
0xC32F | 0x33EC 0xC075 | 00816 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC331 | 0x1380        | 00817 | 	mov	r2, 0x0
0xC332 | 0x33EC 0xC081 | 00818 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC334 | 0x139A        | 00819 | 	mov	r2, 0x1a
0xC335 | 0x33EC 0xC075 | 00820 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC337 | 0x13E8 0x007F | 00821 | 	mov	r2, 0x7f
0xC339 | 0x33EC 0xC081 | 00822 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC33B | 0x1386        | 00823 | 	mov	r2, 0x6
0xC33C | 0x33EC 0xC075 | 00824 | 	jsr	r6, sxc__Z22OLED_Command_160128RGBh
0xC33E | 0x1381        | 00825 | 	mov	r2, 0x1
0xC33F | 0x33EC 0xC081 | 00826 | 	jsr	r6, sxc__Z19OLED_Data_160128RGBh
0xC341 | 0xB7FF        | 00827 | 	ld	r6, sp, 0xffff          // 1-byte Folded Reload
0xC342 | 0x7FFF        | 00828 | 	sub	sp, sp, 0x1
0xC343 | 0x33E6        | 00829 | 	jsr	r6, r6
       |               | 00830 | 
       |               | 00831 | //align
       |               | 00832 | @ = (@ + 1-1)  & -1
0xC344 |               | 00833 | sxc__Z27OLED_display_second_warningv:   // @_Z27OLED_display_second_warningv
       |               | 00834 | // BB#0:
0xC344 | 0x7F1E        | 00835 | 	add	sp, sp, 0x1e
0xC345 | 0xF7E2        | 00836 | 	st	r6, sp, 0xffe2          // 1-byte Folded Spill
0xC346 | 0x57E3        | 00837 | 	add	r2, sp, 0xffe3
0xC347 | 0xD7FC        | 00838 | 	st	r2, sp, 0xfffc          // 1-byte Folded Spill
0xC348 | 0x1BE8 0xD4B8 | 00839 | 	mov	r3, sxc__ZZ27OLED_display_second_warningvE5text3
0xC34A | 0x238B        | 00840 | 	mov	r4, 0xb
0xC34B | 0x33EC 0xCA4C | 00841 | 	jsr	r6, sxc_memcpy
0xC34D | 0x038B        | 00842 | 	mov	r0, 0xb
0xC34E | 0xC7FF        | 00843 | 	st	r0, sp, 0xffff
0xC34F | 0x0380        | 00844 | 	mov	r0, 0x0
0xC350 | 0xC7FD        | 00845 | 	st	r0, sp, 0xfffd
0xC351 | 0x03E8 0xF800 | 00846 | 	mov	r0, 0xf800
0xC353 | 0xC7FE        | 00847 | 	st	r0, sp, 0xfffe
0xC354 | 0x1381        | 00848 | 	mov	r2, 0x1
0xC355 | 0x1B89        | 00849 | 	mov	r3, 0x9
0xC356 | 0x23E8 0x002A | 00850 | 	mov	r4, 0x2a
0xC358 | 0xAFFC        | 00851 | 	ld	r5, sp, 0xfffc          // 1-byte Folded Reload
0xC359 | 0x33EC 0xC240 | 00852 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC35B | 0x57EE        | 00853 | 	add	r2, sp, 0xffee
0xC35C | 0xD7FC        | 00854 | 	st	r2, sp, 0xfffc          // 1-byte Folded Spill
0xC35D | 0x1BE8 0xD4C3 | 00855 | 	mov	r3, sxc__ZZ27OLED_display_second_warningvE5text4
0xC35F | 0x238E        | 00856 | 	mov	r4, 0xe
0xC360 | 0x33EC 0xCA4C | 00857 | 	jsr	r6, sxc_memcpy
0xC362 | 0x0380        | 00858 | 	mov	r0, 0x0
0xC363 | 0xC7FD        | 00859 | 	st	r0, sp, 0xfffd
0xC364 | 0x03E8 0xF800 | 00860 | 	mov	r0, 0xf800
0xC366 | 0xC7FE        | 00861 | 	st	r0, sp, 0xfffe
0xC367 | 0x038E        | 00862 | 	mov	r0, 0xe
0xC368 | 0xC7FF        | 00863 | 	st	r0, sp, 0xffff
0xC369 | 0x1381        | 00864 | 	mov	r2, 0x1
0xC36A | 0x1B89        | 00865 | 	mov	r3, 0x9
0xC36B | 0x239E        | 00866 | 	mov	r4, 0x1e
0xC36C | 0xAFFC        | 00867 | 	ld	r5, sp, 0xfffc          // 1-byte Folded Reload
0xC36D | 0x33EC 0xC240 | 00868 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC36F | 0xB7E2        | 00869 | 	ld	r6, sp, 0xffe2          // 1-byte Folded Reload
0xC370 | 0x7FE2        | 00870 | 	sub	sp, sp, 0x1e
0xC371 | 0x33E6        | 00871 | 	jsr	r6, r6
       |               | 00872 | 
       |               | 00873 | //align
       |               | 00874 | @ = (@ + 1-1)  & -1
0xC372 |               | 00875 | sxc__Z10TempThreadPv:                   // @_Z10TempThreadPv
       |               | 00876 | // BB#0:
0xC372 | 0x7F01        | 00877 | 	add	sp, sp, 0x1
0xC373 | 0xF7FF        | 00878 | 	st	r6, sp, 0xffff          // 1-byte Folded Spill
0xC374 | 0x0381        | 00879 | 	mov	r0, 0x1
0xC375 | 0x011C        | 00880 | 	bra	BB16_1
0xC376 |               | 00881 | BB16_4:                                 // %_Z7getTempv.exit
       |               | 00882 |                                         //   in Loop: Header=BB16_1 Depth=1
0xC376 | 0x03EB 0xD4D1 | 00883 | 	st	r0, sxc_current_temp
0xC378 | 0x03EA 0xD4D1 | 00884 | 	ld	r0, sxc_current_temp
0xC37A | 0x0E10        | 00885 | 	rol	r1, r0, 0x2
0xC37B | 0x0BC9 0xFFFC | 00886 | 	and	r1, r1, 0xfffc
0xC37D | 0x0308        | 00887 | 	add	r0, r0, r1
0xC37E | 0x0E09        | 00888 | 	rol	r1, r1, 0x1
0xC37F | 0x0E81        | 00889 | 	and	r1, r1, 0xfffe
0xC380 | 0x0308        | 00890 | 	add	r0, r0, r1
0xC381 | 0x0E11        | 00891 | 	rol	r1, r1, 0x2
0xC382 | 0x0BC9 0xFFFC | 00892 | 	and	r1, r1, 0xfffc
0xC384 | 0x0308        | 00893 | 	add	r0, r0, r1
0xC385 | 0x0E09        | 00894 | 	rol	r1, r1, 0x1
0xC386 | 0x0E81        | 00895 | 	and	r1, r1, 0xfffe
0xC387 | 0x0308        | 00896 | 	add	r0, r0, r1
0xC388 | 0x13C0 0xFEE5 | 00897 | 	add	r2, r0, 0xfee5
0xC38A | 0x1BE8 0x0064 | 00898 | 	mov	r3, 0x64
0xC38C | 0x33EC 0xCA2F | 00899 | 	jsr	r6, sxc___xinc_udiv
0xC38E | 0x03EB 0xD4D1 | 00900 | 	st	r0, sxc_current_temp
0xC390 | 0x0381        | 00901 | 	mov	r0, 0x1
0xC391 | 0x0286        | 00902 | 	outp	r0, 0x6
0xC392 |               | 00903 | BB16_1:                                 // =>This Inner Loop Header: Depth=1
0xC392 | 0x0287        | 00904 | 	outp	r0, 0x7
0xC393 | 0x0232        | 00905 | 	inp	r0, 0x32
0xC394 | 0x0688        | 00906 | 	and	r0, r0, 0xfffd
0xC395 | 0x02B2        | 00907 | 	outp	r0, 0x32
0xC396 | 0x0B80        | 00908 | 	mov	r1, 0x0
0xC397 | 0x0AB6        | 00909 | 	outp	r1, 0x36
0xC398 | 0x0236        | 00910 | 	inp	r0, 0x36
0xC399 | 0x0AB6        | 00911 | 	outp	r1, 0x36
0xC39A | 0x1236        | 00912 | 	inp	r2, 0x36
0xC39B | 0x0A32        | 00913 | 	inp	r1, 0x32
0xC39C | 0x0F09        | 00914 | 	ior	r1, r1, 0x2
0xC39D | 0x0AB2        | 00915 | 	outp	r1, 0x32
0xC39E | 0x0BCA 0x0001 | 00916 | 	and	r1, r2, 0x1
       |               | 00917 | 	//cmp	r1, 0x0
0xC3A0 | 0x2808        | 00918 | 	bc	ZC, BB16_2
       |               | 00919 | // BB#3:                                //   in Loop: Header=BB16_1 Depth=1
0xC3A1 | 0x03C8 0x00FF | 00920 | 	and	r0, r0, 0xff
0xC3A3 | 0x0640        | 00921 | 	rol	r0, r0, 0x8
0xC3A4 | 0x0582        | 00922 | 	ior	r0, r2, r0
0xC3A5 | 0x03C8 0xFFF0 | 00923 | 	and	r0, r0, 0xfff0
0xC3A7 | 0x0660        | 00924 | 	rol	r0, r0, 0xc
0xC3A8 | 0x01CD        | 00925 | 	bra	BB16_4
0xC3A9 |               | 00926 | BB16_2:                                 //   in Loop: Header=BB16_1 Depth=1
0xC3A9 | 0x0232        | 00927 | 	inp	r0, 0x32
0xC3AA | 0x0688        | 00928 | 	and	r0, r0, 0xfffd
0xC3AB | 0x02B2        | 00929 | 	outp	r0, 0x32
0xC3AC | 0x0380        | 00930 | 	mov	r0, 0x0
0xC3AD | 0x02B6        | 00931 | 	outp	r0, 0x36
0xC3AE | 0x0A36        | 00932 | 	inp	r1, 0x36
0xC3AF | 0x02B6        | 00933 | 	outp	r0, 0x36
0xC3B0 | 0x0A36        | 00934 | 	inp	r1, 0x36
0xC3B1 | 0x02B6        | 00935 | 	outp	r0, 0x36
0xC3B2 | 0x0A36        | 00936 | 	inp	r1, 0x36
0xC3B3 | 0x02B6        | 00937 | 	outp	r0, 0x36
0xC3B4 | 0x0A36        | 00938 | 	inp	r1, 0x36
0xC3B5 | 0x0A32        | 00939 | 	inp	r1, 0x32
0xC3B6 | 0x0F09        | 00940 | 	ior	r1, r1, 0x2
0xC3B7 | 0x0AB2        | 00941 | 	outp	r1, 0x32
0xC3B8 | 0x01BD        | 00942 | 	bra	BB16_4
       |               | 00943 | 
       |               | 00944 | //align
       |               | 00945 | @ = (@ + 1-1)  & -1
0xC3B9 |               | 00946 | sxc__Z14RotEncodThreadPv:               // @_Z14RotEncodThreadPv
       |               | 00947 | // BB#0:
0xC3B9 | 0x7F04        | 00948 | 	add	sp, sp, 0x4
0xC3BA | 0xF7FC        | 00949 | 	st	r6, sp, 0xfffc          // 1-byte Folded Spill
0xC3BB | 0x0388        | 00950 | 	mov	r0, 0x8
0xC3BC | 0x13E8 0xD4D4 | 00951 | 	mov	r2, sxc_r_encoder
0xC3BE | 0x2384        | 00952 | 	mov	r4, 0x4
0xC3BF | 0x3383        | 00953 | 	mov	r6, 0x3
0xC3C0 | 0x0112        | 00954 | 	bra	BB17_1
0xC3C1 |               | 00955 | BB17_21:                                // %_Z15get_encoder_pos14rotary_encoder.exit
       |               | 00956 |                                         //   in Loop: Header=BB17_1 Depth=1
0xC3C1 | 0x8FFF        | 00957 | 	ld	r1, sp, 0xffff
0xC3C2 | 0xAFFE        | 00958 | 	ld	r5, sp, 0xfffe
0xC3C3 | 0x1BEB 0xD4D4 | 00959 | 	st	r3, sxc_r_encoder
0xC3C5 | 0xEA01        | 00960 | 	st	r5, r2, 0x1
0xC3C6 | 0xCA02        | 00961 | 	st	r1, r2, 0x2
0xC3C7 | 0x0286        | 00962 | 	outp	r0, 0x6
0xC3C8 | 0x2287        | 00963 | 	outp	r4, 0x7
0xC3C9 | 0x0A2E        | 00964 | 	inp	r1, 0x2e
0xC3CA | 0x0BC9 0xFFFC | 00965 | 	and	r1, r1, 0xfffc
0xC3CC | 0x0E71        | 00966 | 	rol	r1, r1, 0xe
0xC3CD | 0x0BC9 0x0001 | 00967 | 	and	r1, r1, 0x1
0xC3CF | 0x0F81        | 00968 | 	xor	r1, r1, 0x1
0xC3D0 | 0x0BEB 0xD4D3 | 00969 | 	st	r1, sxc_btn_press
0xC3D2 | 0x2286        | 00970 | 	outp	r4, 0x6
0xC3D3 |               | 00971 | BB17_1:                                 // =>This Inner Loop Header: Depth=1
0xC3D3 | 0x0287        | 00972 | 	outp	r0, 0x7
0xC3D4 | 0x8A02        | 00973 | 	ld	r1, r2, 0x2
0xC3D5 | 0x9A01        | 00974 | 	ld	r3, r2, 0x1
0xC3D6 | 0x2BEA 0xD4D4 | 00975 | 	ld	r5, sxc_r_encoder
0xC3D8 | 0xEFFD        | 00976 | 	st	r5, sp, 0xfffd
0xC3D9 | 0xDFFE        | 00977 | 	st	r3, sp, 0xfffe
0xC3DA | 0xCFFF        | 00978 | 	st	r1, sp, 0xffff
0xC3DB | 0x0A2E        | 00979 | 	inp	r1, 0x2e
0xC3DC | 0x0BC9 0x0002 | 00980 | 	and	r1, r1, 0x2
0xC3DE | 0x1A2E        | 00981 | 	inp	r3, 0x2e
0xC3DF | 0x1BCB 0x0001 | 00982 | 	and	r3, r3, 0x1
0xC3E1 | 0x1D8B        | 00983 | 	ior	r3, r3, r1
0xC3E2 | 0x8FFE        | 00984 | 	ld	r1, sp, 0xfffe
0xC3E3 | 0x0B4B        | 00985 | 	sub	r1, r3, r1
0xC3E4 | 0x0820        | 00986 | 	bc	EQ, BB17_16
       |               | 00987 | // BB#2:                                //   in Loop: Header=BB17_1 Depth=1
0xC3E5 | 0xAFFE        | 00988 | 	ld	r5, sp, 0xfffe
0xC3E6 | 0x0B75        | 00989 | 	sub	r1, r5, r6
0xC3E7 | 0x301C        | 00990 | 	bc	UGT, BB17_15
       |               | 00991 | // BB#3:                                //   in Loop: Header=BB17_1 Depth=1
0xC3E8 | 0x0BF5 0xD213 | 00992 | 	ld	r1, r5,JTI17_0
0xC3EA | 0x0BE1        | 00993 | 	jsr	r1, r1
0xC3EB |               | 00994 | BB17_4:                                 //   in Loop: Header=BB17_1 Depth=1
0xC3EB | 0x4BFE        | 00995 | 	sub	r1, r3, 0x2
0xC3EC | 0x080F        | 00996 | 	bc	EQ, BB17_13
       |               | 00997 | // BB#5:                                //   in Loop: Header=BB17_1 Depth=1
0xC3ED | 0x4BFF        | 00998 | 	sub	r1, r3, 0x1
0xC3EE | 0x2815        | 00999 | 	bc	NE, BB17_15
0xC3EF | 0x0111        | 01000 | 	bra	BB17_6
0xC3F0 |               | 01001 | BB17_7:                                 //   in Loop: Header=BB17_1 Depth=1
0xC3F0 | 0x4B00        | 01002 | 	sub	r1, r3, 0x0
0xC3F1 | 0x080A        | 01003 | 	bc	EQ, BB17_13
       |               | 01004 | // BB#8:                                //   in Loop: Header=BB17_1 Depth=1
0xC3F2 | 0x4BFD        | 01005 | 	sub	r1, r3, 0x3
0xC3F3 | 0x080D        | 01006 | 	bc	EQ, BB17_6
0xC3F4 | 0x010F        | 01007 | 	bra	BB17_15
0xC3F5 |               | 01008 | BB17_9:                                 //   in Loop: Header=BB17_1 Depth=1
0xC3F5 | 0x4BFD        | 01009 | 	sub	r1, r3, 0x3
0xC3F6 | 0x0805        | 01010 | 	bc	EQ, BB17_13
       |               | 01011 | // BB#10:                               //   in Loop: Header=BB17_1 Depth=1
0xC3F7 | 0x4B00        | 01012 | 	sub	r1, r3, 0x0
0xC3F8 | 0x0808        | 01013 | 	bc	EQ, BB17_6
0xC3F9 | 0x010A        | 01014 | 	bra	BB17_15
0xC3FA |               | 01015 | BB17_11:                                //   in Loop: Header=BB17_1 Depth=1
0xC3FA | 0x4BFF        | 01016 | 	sub	r1, r3, 0x1
0xC3FB | 0x2803        | 01017 | 	bc	NE, BB17_12
0xC3FC |               | 01018 | BB17_13:                                //   in Loop: Header=BB17_1 Depth=1
0xC3FC | 0x8FFD        | 01019 | 	ld	r1, sp, 0xfffd
0xC3FD | 0x49FF        | 01020 | 	add	r1, r1, 0xffff
0xC3FE | 0x0104        | 01021 | 	bra	BB17_14
0xC3FF |               | 01022 | BB17_12:                                //   in Loop: Header=BB17_1 Depth=1
0xC3FF | 0x4BFE        | 01023 | 	sub	r1, r3, 0x2
0xC400 | 0x2803        | 01024 | 	bc	NE, BB17_15
0xC401 |               | 01025 | BB17_6:                                 //   in Loop: Header=BB17_1 Depth=1
0xC401 | 0x8FFD        | 01026 | 	ld	r1, sp, 0xfffd
0xC402 | 0x4901        | 01027 | 	add	r1, r1, 0x1
0xC403 |               | 01028 | BB17_14:                                //   in Loop: Header=BB17_1 Depth=1
0xC403 | 0xCFFD        | 01029 | 	st	r1, sp, 0xfffd
0xC404 |               | 01030 | BB17_15:                                //   in Loop: Header=BB17_1 Depth=1
0xC404 | 0xDFFE        | 01031 | 	st	r3, sp, 0xfffe
0xC405 |               | 01032 | BB17_16:                                //   in Loop: Header=BB17_1 Depth=1
0xC405 | 0x8FFD        | 01033 | 	ld	r1, sp, 0xfffd
0xC406 | 0x49FC        | 01034 | 	sub	r1, r1, 0x4
0xC407 | 0x1402        | 01035 | 	bc	LT, BB17_18
       |               | 01036 | // BB#17:                               //   in Loop: Header=BB17_1 Depth=1
0xC408 | 0x0B81        | 01037 | 	mov	r1, 0x1
0xC409 | 0x0104        | 01038 | 	bra	BB17_20
0xC40A |               | 01039 | BB17_18:                                //   in Loop: Header=BB17_1 Depth=1
0xC40A | 0x9FFD        | 01040 | 	ld	r3, sp, 0xfffd
0xC40B | 0x4B04        | 01041 | 	sub	r1, r3, 0xfffc
0xC40C | 0x38B4        | 01042 | 	bc	GT, BB17_21
       |               | 01043 | // BB#19:                               //   in Loop: Header=BB17_1 Depth=1
0xC40D | 0x0B82        | 01044 | 	mov	r1, 0x2
0xC40E |               | 01045 | BB17_20:                                //   in Loop: Header=BB17_1 Depth=1
0xC40E | 0xCFFF        | 01046 | 	st	r1, sp, 0xffff
0xC40F | 0x1B80        | 01047 | 	mov	r3, 0x0
0xC410 | 0xDFFD        | 01048 | 	st	r3, sp, 0xfffd
0xC411 | 0x01AF        | 01049 | 	bra	BB17_21
       |               | 01050 | //	.section	//.text,"xr"
       |               | 01051 | //align
       |               | 01052 | @ = (@ + 1-1)  & -1
0xC412 |               | 01053 | sxc__Z9PIDThreadPv:                     // @_Z9PIDThreadPv
       |               | 01054 | // BB#0:
0xC412 | 0x7F05        | 01055 | 	add	sp, sp, 0x5
0xC413 | 0xF7FB        | 01056 | 	st	r6, sp, 0xfffb          // 1-byte Folded Spill
0xC414 | 0x03E8 0x005B | 01057 | 	mov	r0, 0x5b
0xC416 | 0x02BE        | 01058 | 	outp	r0, 0x3e
0xC417 | 0x0382        | 01059 | 	mov	r0, 0x2
0xC418 | 0x02C3        | 01060 | 	outp	r0, 0x43
0xC419 | 0x02C5        | 01061 | 	outp	r0, 0x45
0xC41A | 0x03E8 0xBB80 | 01062 | 	mov	r0, 0xbb80
0xC41C | 0x02C0        | 01063 | 	outp	r0, 0x40
0xC41D | 0x0BE8 0x5DC0 | 01064 | 	mov	r1, 0x5dc0
0xC41F | 0x0AC2        | 01065 | 	outp	r1, 0x42
0xC420 | 0x02C4        | 01066 | 	outp	r0, 0x44
0xC421 | 0x1380        | 01067 | 	mov	r2, 0x0
0xC422 | 0x23E8 0x0040 | 01068 | 	mov	r4, 0x40
0xC424 | 0x2B80        | 01069 | 	mov	r5, 0x0
0xC425 | 0x3380        | 01070 | 	mov	r6, 0x0
0xC426 | 0x0380        | 01071 | 	mov	r0, 0x0
0xC427 | 0x0102        | 01072 | 	bra	BB18_1
0xC428 |               | 01073 | BB18_13:                                //   in Loop: Header=BB18_1 Depth=1
0xC428 | 0x0AA6        | 01074 | 	outp	r1, 0x26
0xC429 | 0x97FC        | 01075 | 	ld	r2, sp, 0xfffc          // 1-byte Folded Reload
0xC42A |               | 01076 | BB18_1:                                 // %_Z14heating_actionj.exit
       |               | 01077 |                                         // =>This Inner Loop Header: Depth=1
0xC42A | 0x0A3E        | 01078 | 	inp	r1, 0x3e
0xC42B | 0x1A43        | 01079 | 	inp	r3, 0x43
0xC42C | 0x0D8B        | 01080 | 	ior	r1, r3, r1
0xC42D | 0x4900        | 01081 | 	sub	r1, r1, 0x0
0xC42E | 0x3813        | 01082 | 	bc	GT, BB18_2
       |               | 01083 | // BB#3:                                //   in Loop: Header=BB18_1 Depth=1
0xC42F | 0x2287        | 01084 | 	outp	r4, 0x7
0xC430 | 0x0B81        | 01085 | 	mov	r1, 0x1
0xC431 | 0x0A87        | 01086 | 	outp	r1, 0x7
0xC432 | 0x0BEA 0xD4D8 | 01087 | 	ld	r1, sxc_target_temp_index
0xC434 | 0x0BF1 0xD4DA | 01088 | 	ld	r1, r1,sxc_selected_profile
0xC436 | 0x1BEA 0xD4D1 | 01089 | 	ld	r3, sxc_current_temp
0xC438 | 0x3359        | 01090 | 	sub	r6, r1, r3
0xC439 | 0x232E        | 01091 | 	add	r4, r6, r5
0xC43A | 0x0BC4 0xFF2E | 01092 | 	sub	r1, r4, 0xd2
0xC43C | 0x1807        | 01093 | 	bc	LE, BB18_5
       |               | 01094 | // BB#4:                                //   in Loop: Header=BB18_1 Depth=1
0xC43D | 0x2BE8 0x00D2 | 01095 | 	mov	r5, 0xd2
0xC43F | 0x1BE8 0x01A4 | 01096 | 	mov	r3, 0x1a4
0xC441 | 0x0110        | 01097 | 	bra	BB18_6
0xC442 |               | 01098 | BB18_2:                                 //   in Loop: Header=BB18_1 Depth=1
0xC442 | 0xD7FC        | 01099 | 	st	r2, sp, 0xfffc          // 1-byte Folded Spill
0xC443 | 0x0169        | 01100 | 	bra	BB18_11
0xC444 |               | 01101 | BB18_5:                                 //   in Loop: Header=BB18_1 Depth=1
0xC444 | 0x1EFC        | 01102 | 	and	r3, r4, 0x7fff
0xC445 | 0x2E0B        | 01103 | 	rol	r5, r3, 0x1
0xC446 | 0x1BE8 0xFE5C | 01104 | 	mov	r3, 0xfe5c
0xC448 | 0x0BC4 0x00D2 | 01105 | 	sub	r1, r4, 0xff2e
0xC44A | 0x1401        | 01106 | 	bc	LT, @ + 1 + 0x1
0xC44B | 0x5D00        | 01107 | 	mov	r3, r5 //Select--False
0xC44C | 0x2BE8 0xFF2E | 01108 | 	mov	r5, 0xff2e
0xC44E | 0x0BC4 0x00D2 | 01109 | 	sub	r1, r4, 0xff2e
0xC450 | 0x1401        | 01110 | 	bc	LT, @ + 1 + 0x1
0xC451 | 0x6C00        | 01111 | 	mov	r5, r4 //Select--False
0xC452 |               | 01112 | BB18_6:                                 //   in Loop: Header=BB18_1 Depth=1
0xC452 | 0xF7FC        | 01113 | 	st	r6, sp, 0xfffc          // 1-byte Folded Spill
0xC453 | 0x0B56        | 01114 | 	sub	r1, r6, r2
0xC454 | 0x0E19        | 01115 | 	rol	r1, r1, 0x3
0xC455 | 0x0BC9 0xFFF8 | 01116 | 	and	r1, r1, 0xfff8
0xC457 | 0x1609        | 01117 | 	rol	r2, r1, 0x1
0xC458 | 0x1682        | 01118 | 	and	r2, r2, 0xfffe
0xC459 | 0x0B11        | 01119 | 	add	r1, r1, r2
0xC45A | 0x1622        | 01120 | 	rol	r2, r2, 0x4
0xC45B | 0x13CA 0xFFF0 | 01121 | 	and	r2, r2, 0xfff0
0xC45D | 0x0B11        | 01122 | 	add	r1, r1, r2
0xC45E | 0x160E        | 01123 | 	rol	r2, r6, 0x1
0xC45F | 0x1682        | 01124 | 	and	r2, r2, 0xfffe
0xC460 | 0x2612        | 01125 | 	rol	r4, r2, 0x2
0xC461 | 0x23CC 0xFFFC | 01126 | 	and	r4, r4, 0xfffc
0xC463 | 0x1322        | 01127 | 	add	r2, r2, r4
0xC464 | 0x260C        | 01128 | 	rol	r4, r4, 0x1
0xC465 | 0x2684        | 01129 | 	and	r4, r4, 0xfffe
0xC466 | 0x1322        | 01130 | 	add	r2, r2, r4
0xC467 | 0x260C        | 01131 | 	rol	r4, r4, 0x1
0xC468 | 0x2684        | 01132 | 	and	r4, r4, 0xfffe
0xC469 | 0x1322        | 01133 | 	add	r2, r2, r4
0xC46A | 0x260C        | 01134 | 	rol	r4, r4, 0x1
0xC46B | 0x2684        | 01135 | 	and	r4, r4, 0xfffe
0xC46C | 0x1322        | 01136 | 	add	r2, r2, r4
0xC46D | 0x260C        | 01137 | 	rol	r4, r4, 0x1
0xC46E | 0x2684        | 01138 | 	and	r4, r4, 0xfffe
0xC46F | 0x1322        | 01139 | 	add	r2, r2, r4
0xC470 | 0x0B11        | 01140 | 	add	r1, r1, r2
0xC471 | 0x1319        | 01141 | 	add	r2, r1, r3
0xC472 | 0x1BE8 0x07D0 | 01142 | 	mov	r3, 0x7d0
0xC474 | 0x0BC2 0xF830 | 01143 | 	sub	r1, r2, 0x7d0
0xC476 | 0x3804        | 01144 | 	bc	GT, BB18_8
       |               | 01145 | // BB#7:                                //   in Loop: Header=BB18_1 Depth=1
0xC477 | 0x1B80        | 01146 | 	mov	r3, 0x0
0xC478 | 0x4A00        | 01147 | 	sub	r1, r2, 0x0
0xC479 | 0x1401        | 01148 | 	bc	LT, @ + 1 + 0x1
0xC47A | 0x5A00        | 01149 | 	mov	r3, r2 //Select--False
0xC47B |               | 01150 | BB18_8:                                 // %_Z11pid_computeP3Pidjj.exit
       |               | 01151 |                                         //   in Loop: Header=BB18_1 Depth=1
0xC47B | 0xDFFE        | 01152 | 	st	r3, sp, 0xfffe          // 1-byte Folded Spill
0xC47C | 0xEFFD        | 01153 | 	st	r5, sp, 0xfffd          // 1-byte Folded Spill
0xC47D | 0x0B81        | 01154 | 	mov	r1, 0x1
0xC47E | 0x0A86        | 01155 | 	outp	r1, 0x6
0xC47F | 0x4001        | 01156 | 	add	r0, r0, 0x1
0xC480 | 0x48FE        | 01157 | 	sub	r1, r0, 0x2
0xC481 | 0x2826        | 01158 | 	bc	NE, BB18_10
       |               | 01159 | // BB#9:                                //   in Loop: Header=BB18_1 Depth=1
0xC482 | 0x03EA 0xD4D8 | 01160 | 	ld	r0, sxc_target_temp_index
0xC484 | 0x4001        | 01161 | 	add	r0, r0, 0x1
0xC485 | 0x03EB 0xD4D8 | 01162 | 	st	r0, sxc_target_temp_index
0xC487 | 0x03E8 0x0080 | 01163 | 	mov	r0, 0x80
0xC489 | 0x0287        | 01164 | 	outp	r0, 0x7
0xC48A | 0x03EA 0xD4D8 | 01165 | 	ld	r0, sxc_target_temp_index
0xC48C | 0x0610        | 01166 | 	rol	r0, r0, 0x2
0xC48D | 0x03C8 0xFFFC | 01167 | 	and	r0, r0, 0xfffc
0xC48F | 0x0E18        | 01168 | 	rol	r1, r0, 0x3
0xC490 | 0x0BC9 0xFFF8 | 01169 | 	and	r1, r1, 0xfff8
0xC492 | 0x0308        | 01170 | 	add	r0, r0, r1
0xC493 | 0x0E09        | 01171 | 	rol	r1, r1, 0x1
0xC494 | 0x0E81        | 01172 | 	and	r1, r1, 0xfffe
0xC495 | 0x0308        | 01173 | 	add	r0, r0, r1
0xC496 | 0x5064        | 01174 | 	add	r2, r0, 0x64
0xC497 | 0x1BEA 0xD567 | 01175 | 	ld	r3, sxc_progress_scaler
0xC499 | 0x33EC 0xCA2F | 01176 | 	jsr	r6, sxc___xinc_udiv
0xC49B | 0x0B81        | 01177 | 	mov	r1, 0x1
0xC49C | 0x03EB 0xD4D9 | 01178 | 	st	r0, sxc_progress
0xC49E | 0x03E8 0x0080 | 01179 | 	mov	r0, 0x80
0xC4A0 | 0x0286        | 01180 | 	outp	r0, 0x6
0xC4A1 | 0x03E8 0x0100 | 01181 | 	mov	r0, 0x100
0xC4A3 | 0x0287        | 01182 | 	outp	r0, 0x7
0xC4A4 | 0x0BEB 0xD568 | 01183 | 	st	r1, sxc_print_humidity
0xC4A6 | 0x0286        | 01184 | 	outp	r0, 0x6
0xC4A7 | 0x0380        | 01185 | 	mov	r0, 0x0
0xC4A8 |               | 01186 | BB18_10:                                //   in Loop: Header=BB18_1 Depth=1
0xC4A8 | 0x23E8 0x0040 | 01187 | 	mov	r4, 0x40
0xC4AA | 0x2286        | 01188 | 	outp	r4, 0x6
0xC4AB | 0xAFFD        | 01189 | 	ld	r5, sp, 0xfffd          // 1-byte Folded Reload
0xC4AC | 0xB7FE        | 01190 | 	ld	r6, sp, 0xfffe          // 1-byte Folded Reload
0xC4AD |               | 01191 | BB18_11:                                //   in Loop: Header=BB18_1 Depth=1
0xC4AD | 0x0E1E        | 01192 | 	rol	r1, r6, 0x3
0xC4AE | 0x0BC9 0xFFF8 | 01193 | 	and	r1, r1, 0xfff8
0xC4B0 | 0x1609        | 01194 | 	rol	r2, r1, 0x1
0xC4B1 | 0x1682        | 01195 | 	and	r2, r2, 0xfffe
0xC4B2 | 0x0B11        | 01196 | 	add	r1, r1, r2
0xC4B3 | 0x1A3F        | 01197 | 	inp	r3, 0x3f
0xC4B4 | 0x1226        | 01198 | 	inp	r2, 0x26
0xC4B5 | 0x0B59        | 01199 | 	sub	r1, r1, r3
0xC4B6 | 0x2004        | 01200 | 	bc	UGE, BB18_12
       |               | 01201 | // BB#14:                               //   in Loop: Header=BB18_1 Depth=1
0xC4B7 | 0x0BCA 0xFF9F | 01202 | 	and	r1, r2, 0xff9f
0xC4B9 | 0x0100 0xFF6D | 01203 | 	bra	BB18_13
0xC4BB |               | 01204 | BB18_12:                                //   in Loop: Header=BB18_1 Depth=1
0xC4BB | 0x0BD2 0x0060 | 01205 | 	ior	r1, r2, 0x60
0xC4BD | 0x0100 0xFF69 | 01206 | 	bra	BB18_13
       |               | 01207 | 
       |               | 01208 | //align
       |               | 01209 | @ = (@ + 1-1)  & -1
0xC4BF |               | 01210 | sxc__Z14HumidityThreadPv:               // @_Z14HumidityThreadPv
       |               | 01211 | // BB#0:
0xC4BF | 0x7F02        | 01212 | 	add	sp, sp, 0x2
0xC4C0 | 0xF7FE        | 01213 | 	st	r6, sp, 0xfffe          // 1-byte Folded Spill
0xC4C1 | 0x03E8 0x005B | 01214 | 	mov	r0, 0x5b
0xC4C3 | 0x02C8        | 01215 | 	outp	r0, 0x48
0xC4C4 | 0x03E8 0x00C7 | 01216 | 	mov	r0, 0xc7
0xC4C6 | 0x02CA        | 01217 | 	outp	r0, 0x4a
0xC4C7 | 0x0380        | 01218 | 	mov	r0, 0x0
0xC4C8 | 0xC7FF        | 01219 | 	st	r0, sp, 0xffff          // 1-byte Folded Spill
0xC4C9 | 0x0135        | 01220 | 	bra	BB19_1
0xC4CA |               | 01221 | BB19_7:                                 // %_Z12get_humidityjj.exit
       |               | 01222 |                                         //   in Loop: Header=BB19_1 Depth=1
0xC4CA | 0x0382        | 01223 | 	mov	r0, 0x2
0xC4CB | 0x0287        | 01224 | 	outp	r0, 0x7
0xC4CC | 0x03EA 0xD4D2 | 01225 | 	ld	r0, sxc_humidity
0xC4CE | 0x0249        | 01226 | 	inp	r0, 0x49
0xC4CF | 0x1380        | 01227 | 	mov	r2, 0x0
0xC4D0 | 0x9FFF        | 01228 | 	ld	r3, sp, 0xffff          // 1-byte Folded Reload
0xC4D1 | 0x0B58        | 01229 | 	sub	r1, r0, r3
0xC4D2 | 0x3002        | 01230 | 	bc	UGT, @ + 1 + 0x2
0xC4D3 | 0x13E8 0x00C7 | 01231 | 	mov	r2, 0xc7 //Select--False
0xC4D5 | 0x0358        | 01232 | 	sub	r0, r0, r3
0xC4D6 | 0x0310        | 01233 | 	add	r0, r0, r2
0xC4D7 | 0x0610        | 01234 | 	rol	r0, r0, 0x2
0xC4D8 | 0x03C8 0xFFFC | 01235 | 	and	r0, r0, 0xfffc
0xC4DA | 0x0E18        | 01236 | 	rol	r1, r0, 0x3
0xC4DB | 0x0BC9 0xFFF8 | 01237 | 	and	r1, r1, 0xfff8
0xC4DD | 0x0308        | 01238 | 	add	r0, r0, r1
0xC4DE | 0x0E09        | 01239 | 	rol	r1, r1, 0x1
0xC4DF | 0x0E81        | 01240 | 	and	r1, r1, 0xfffe
0xC4E0 | 0x1308        | 01241 | 	add	r2, r0, r1
0xC4E1 | 0x1BE8 0x00C7 | 01242 | 	mov	r3, 0xc7
0xC4E3 | 0x33EC 0xCA2F | 01243 | 	jsr	r6, sxc___xinc_udiv
0xC4E5 | 0x0E10        | 01244 | 	rol	r1, r0, 0x2
0xC4E6 | 0x0BC9 0xFFFC | 01245 | 	and	r1, r1, 0xfffc
0xC4E8 | 0x0308        | 01246 | 	add	r0, r0, r1
0xC4E9 | 0x0E09        | 01247 | 	rol	r1, r1, 0x1
0xC4EA | 0x0E81        | 01248 | 	and	r1, r1, 0xfffe
0xC4EB | 0x0308        | 01249 | 	add	r0, r0, r1
0xC4EC | 0x0E09        | 01250 | 	rol	r1, r1, 0x1
0xC4ED | 0x0E81        | 01251 | 	and	r1, r1, 0xfffe
0xC4EE | 0x0308        | 01252 | 	add	r0, r0, r1
0xC4EF | 0x0E09        | 01253 | 	rol	r1, r1, 0x1
0xC4F0 | 0x0E81        | 01254 | 	and	r1, r1, 0xfffe
0xC4F1 | 0x0308        | 01255 | 	add	r0, r0, r1
0xC4F2 | 0x0E09        | 01256 | 	rol	r1, r1, 0x1
0xC4F3 | 0x0E81        | 01257 | 	and	r1, r1, 0xfffe
0xC4F4 | 0x1308        | 01258 | 	add	r2, r0, r1
0xC4F5 | 0x1BE8 0x0064 | 01259 | 	mov	r3, 0x64
0xC4F7 | 0x33EC 0xCA2F | 01260 | 	jsr	r6, sxc___xinc_udiv
0xC4F9 | 0x40FA        | 01261 | 	add	r0, r0, 0xfffa
0xC4FA | 0x03EB 0xD4D2 | 01262 | 	st	r0, sxc_humidity
0xC4FC | 0x0380        | 01263 | 	mov	r0, 0x0
0xC4FD | 0x0B82        | 01264 | 	mov	r1, 0x2
0xC4FE | 0x0A86        | 01265 | 	outp	r1, 0x6
0xC4FF |               | 01266 | BB19_1:                                 // %.outer
       |               | 01267 |                                         // =>This Loop Header: Depth=1
       |               | 01268 |                                         //     Child Loop BB19_3 Depth 2
       |               | 01269 |                                         //     Child Loop BB19_6 Depth 2
0xC4FF | 0x48FF        | 01270 | 	sub	r1, r0, 0x1
0xC500 | 0x2804        | 01271 | 	bc	NE, BB19_2
0xC501 |               | 01272 | BB19_6:                                 //   Parent Loop BB19_1 Depth=1
       |               | 01273 |                                         // =>  This Inner Loop Header: Depth=2
0xC501 | 0x0226        | 01274 | 	inp	r0, 0x26
0xC502 | 0x0698        | 01275 | 	bic	r0, r0, 0x3
       |               | 01276 | 	//cmp	r0, 0x0
0xC503 | 0x04FD        | 01277 | 	bc	VS, BB19_6
0xC504 | 0x01C5        | 01278 | 	bra	BB19_7
0xC505 |               | 01279 | BB19_2:                                 // %.outer
       |               | 01280 |                                         //   in Loop: Header=BB19_1 Depth=1
0xC505 | 0x4800        | 01281 | 	sub	r1, r0, 0x0
0xC506 | 0x280A        | 01282 | 	bc	NE, BB19_5
0xC507 |               | 01283 | BB19_3:                                 // %.outer.split.us..outer.split.us.split_crit_edge
       |               | 01284 |                                         //   Parent Loop BB19_1 Depth=1
       |               | 01285 |                                         // =>  This Inner Loop Header: Depth=2
0xC507 | 0x0226        | 01286 | 	inp	r0, 0x26
0xC508 | 0x03C8 0xFFF8 | 01287 | 	and	r0, r0, 0xfff8
0xC50A | 0x0668        | 01288 | 	rol	r0, r0, 0xd
0xC50B | 0x03C8 0x0001 | 01289 | 	and	r0, r0, 0x1
       |               | 01290 | 	//cmp	r0, 0x0
0xC50D | 0x08F9        | 01291 | 	bc	ZS, BB19_3
       |               | 01292 | // BB#4:                                // %.us-lcssa.us
       |               | 01293 |                                         //   in Loop: Header=BB19_1 Depth=1
0xC50E | 0x0A49        | 01294 | 	inp	r1, 0x49
0xC50F | 0xCFFF        | 01295 | 	st	r1, sp, 0xffff          // 1-byte Folded Spill
0xC510 | 0x01EE        | 01296 | 	bra	BB19_1
0xC511 |               | 01297 | BB19_5:                                 // =>This Inner Loop Header: Depth=1
0xC511 | 0x0226        | 01298 | 	inp	r0, 0x26
0xC512 | 0x01FE        | 01299 | 	bra	BB19_5
       |               | 01300 | 
       |               | 01301 | //align
       |               | 01302 | @ = (@ + 1-1)  & -1
0xC513 |               | 01303 | sxc__Z15stateOLEDThreadPv:              // @_Z15stateOLEDThreadPv
       |               | 01304 | // BB#0:
0xC513 | 0x7F4F        | 01305 | 	add	sp, sp, 0x4f
0xC514 | 0xF7B1        | 01306 | 	st	r6, sp, 0xffb1          // 1-byte Folded Spill
0xC515 | 0x33EC 0xC284 | 01307 | 	jsr	r6, sxc__Z19OLED_Init_160128RGBv
0xC517 | 0x33EC 0xC0BD | 01308 | 	jsr	r6, sxc__Z25OLED_FillScreen_160128RGBm
0xC519 | 0x1384        | 01309 | 	mov	r2, 0x4
0xC51A | 0x03E8 0x005B | 01310 | 	mov	r0, 0x5b
0xC51C | 0x03C0 0xD4DA | 01311 | 	add	r0, r0, sxc_selected_profile
0xC51E | 0xC7F2        | 01312 | 	st	r0, sp, 0xfff2          // 1-byte Folded Spill
0xC51F | 0x03E8 0x007C | 01313 | 	mov	r0, 0x7c
0xC521 | 0x03C0 0xD4DA | 01314 | 	add	r0, r0, sxc_selected_profile
0xC523 | 0xC7F3        | 01315 | 	st	r0, sp, 0xfff3          // 1-byte Folded Spill
0xC524 | 0x03E8 0x003D | 01316 | 	mov	r0, 0x3d
0xC526 | 0x03C0 0xD4DA | 01317 | 	add	r0, r0, sxc_selected_profile
0xC528 | 0xC7F4        | 01318 | 	st	r0, sp, 0xfff4          // 1-byte Folded Spill
0xC529 | 0x03E8 0x006D | 01319 | 	mov	r0, 0x6d
0xC52B | 0x03C0 0xD4DA | 01320 | 	add	r0, r0, sxc_selected_profile
0xC52D | 0xC7F5        | 01321 | 	st	r0, sp, 0xfff5          // 1-byte Folded Spill
0xC52E | 0x1B80        | 01322 | 	mov	r3, 0x0
0xC52F | 0x0102        | 01323 | 	bra	BB20_1
0xC530 |               | 01324 | BB20_39:                                // %_Z21generate_RSS_profile1P7profile.exit
       |               | 01325 |                                         //   in Loop: Header=BB20_1 Depth=1
0xC530 | 0x1384        | 01326 | 	mov	r2, 0x4
0xC531 | 0x1286        | 01327 | 	outp	r2, 0x6
0xC532 |               | 01328 | BB20_1:                                 // %.outer
       |               | 01329 |                                         // =>This Loop Header: Depth=1
       |               | 01330 |                                         //     Child Loop BB20_44 Depth 2
       |               | 01331 |                                         //       Child Loop BB20_49 Depth 3
       |               | 01332 |                                         //       Child Loop BB20_48 Depth 3
       |               | 01333 |                                         //       Child Loop BB20_46 Depth 3
       |               | 01334 |                                         //     Child Loop BB20_56 Depth 2
       |               | 01335 |                                         //     Child Loop BB20_19 Depth 2
       |               | 01336 |                                         //     Child Loop BB20_20 Depth 2
       |               | 01337 |                                         //     Child Loop BB20_22 Depth 2
       |               | 01338 |                                         //     Child Loop BB20_24 Depth 2
       |               | 01339 |                                         //     Child Loop BB20_26 Depth 2
       |               | 01340 |                                         //     Child Loop BB20_27 Depth 2
       |               | 01341 |                                         //     Child Loop BB20_29 Depth 2
       |               | 01342 |                                         //     Child Loop BB20_31 Depth 2
       |               | 01343 |                                         //     Child Loop BB20_33 Depth 2
       |               | 01344 |                                         //     Child Loop BB20_34 Depth 2
       |               | 01345 |                                         //     Child Loop BB20_36 Depth 2
       |               | 01346 |                                         //     Child Loop BB20_38 Depth 2
0xC532 | 0x0B53        | 01347 | 	sub	r1, r3, r2
0xC533 | 0x3000 0x047F | 01348 | 	bc	UGT, BB20_69
       |               | 01349 | // BB#2:                                // %.outer
       |               | 01350 |                                         //   in Loop: Header=BB20_1 Depth=1
0xC535 | 0x0BF3 0xD217 | 01351 | 	ld	r1, r3,JTI20_0
0xC537 | 0x0BE1        | 01352 | 	jsr	r1, r1
0xC538 |               | 01353 | BB20_3:                                 // %.split
       |               | 01354 |                                         //   in Loop: Header=BB20_1 Depth=1
0xC538 | 0x0390        | 01355 | 	mov	r0, 0x10
0xC539 | 0x0287        | 01356 | 	outp	r0, 0x7
0xC53A | 0x03EA 0xD4D7 | 01357 | 	ld	r0, sxc_profile_index
0xC53C | 0xC7EF        | 01358 | 	st	r0, sp, 0xffef          // 1-byte Folded Spill
0xC53D | 0x57E5        | 01359 | 	add	r2, sp, 0xffe5
0xC53E | 0xD7F0        | 01360 | 	st	r2, sp, 0xfff0          // 1-byte Folded Spill
0xC53F | 0x1BE8 0xD429 | 01361 | 	mov	r3, sxc__ZZ17OLED_profile_pagejE4text
0xC541 | 0x2389        | 01362 | 	mov	r4, 0x9
0xC542 | 0x33EC 0xCA4C | 01363 | 	jsr	r6, sxc_memcpy
0xC544 | 0x87EF        | 01364 | 	ld	r0, sp, 0xffef          // 1-byte Folded Reload
0xC545 | 0x4030        | 01365 | 	add	r0, r0, 0x30
0xC546 | 0xC7EE        | 01366 | 	st	r0, sp, 0xffee
0xC547 | 0x0389        | 01367 | 	mov	r0, 0x9
0xC548 | 0xC7FF        | 01368 | 	st	r0, sp, 0xffff
0xC549 | 0x0380        | 01369 | 	mov	r0, 0x0
0xC54A | 0xC7FD        | 01370 | 	st	r0, sp, 0xfffd
0xC54B | 0x03BF        | 01371 | 	mov	r0, 0xffff
0xC54C | 0xC7FE        | 01372 | 	st	r0, sp, 0xfffe
0xC54D | 0x1382        | 01373 | 	mov	r2, 0x2
0xC54E | 0x1B85        | 01374 | 	mov	r3, 0x5
0xC54F | 0x23E8 0x0064 | 01375 | 	mov	r4, 0x64
0xC551 | 0xAFF0        | 01376 | 	ld	r5, sp, 0xfff0          // 1-byte Folded Reload
0xC552 | 0x33EC 0xC240 | 01377 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC554 | 0x0380        | 01378 | 	mov	r0, 0x0
0xC555 | 0xC7FD        | 01379 | 	st	r0, sp, 0xfffd
0xC556 | 0x03BF        | 01380 | 	mov	r0, 0xffff
0xC557 | 0xC7FE        | 01381 | 	st	r0, sp, 0xfffe
0xC558 | 0x0381        | 01382 | 	mov	r0, 0x1
0xC559 | 0xC7FF        | 01383 | 	st	r0, sp, 0xffff
0xC55A | 0x6FEE        | 01384 | 	add	r5, sp, 0xffee
0xC55B | 0x1382        | 01385 | 	mov	r2, 0x2
0xC55C | 0x1BE8 0x0078 | 01386 | 	mov	r3, 0x78
0xC55E | 0x23E8 0x0064 | 01387 | 	mov	r4, 0x64
0xC560 | 0x33EC 0xC240 | 01388 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC562 | 0x57D0        | 01389 | 	add	r2, sp, 0xffd0
0xC563 | 0xD7F0        | 01390 | 	st	r2, sp, 0xfff0          // 1-byte Folded Spill
0xC564 | 0x1BE8 0xD432 | 01391 | 	mov	r3, sxc__ZZ17OLED_profile_pagejE5text2
0xC566 | 0x238A        | 01392 | 	mov	r4, 0xa
0xC567 | 0x33EC 0xCA4C | 01393 | 	jsr	r6, sxc_memcpy
0xC569 | 0x038A        | 01394 | 	mov	r0, 0xa
0xC56A | 0xC7FF        | 01395 | 	st	r0, sp, 0xffff
0xC56B | 0x0380        | 01396 | 	mov	r0, 0x0
0xC56C | 0xC7FD        | 01397 | 	st	r0, sp, 0xfffd
0xC56D | 0x03BF        | 01398 | 	mov	r0, 0xffff
0xC56E | 0xC7FE        | 01399 | 	st	r0, sp, 0xfffe
0xC56F | 0x1381        | 01400 | 	mov	r2, 0x1
0xC570 | 0x1B94        | 01401 | 	mov	r3, 0x14
0xC571 | 0x23E8 0x004D | 01402 | 	mov	r4, 0x4d
0xC573 | 0xAFF0        | 01403 | 	ld	r5, sp, 0xfff0          // 1-byte Folded Reload
0xC574 | 0x33EC 0xC240 | 01404 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC576 | 0x57B8        | 01405 | 	add	r2, sp, 0xffb8
0xC577 | 0xD7F0        | 01406 | 	st	r2, sp, 0xfff0          // 1-byte Folded Spill
0xC578 | 0x1BE8 0xD43C | 01407 | 	mov	r3, sxc__ZZ17OLED_profile_pagejE5text3
0xC57A | 0x238B        | 01408 | 	mov	r4, 0xb
0xC57B | 0x33EC 0xCA4C | 01409 | 	jsr	r6, sxc_memcpy
0xC57D | 0x038B        | 01410 | 	mov	r0, 0xb
0xC57E | 0xC7FF        | 01411 | 	st	r0, sp, 0xffff
0xC57F | 0x0380        | 01412 | 	mov	r0, 0x0
0xC580 | 0xC7FD        | 01413 | 	st	r0, sp, 0xfffd
0xC581 | 0x03BF        | 01414 | 	mov	r0, 0xffff
0xC582 | 0xC7FE        | 01415 | 	st	r0, sp, 0xfffe
0xC583 | 0x1381        | 01416 | 	mov	r2, 0x1
0xC584 | 0x1B94        | 01417 | 	mov	r3, 0x14
0xC585 | 0x23E8 0x0040 | 01418 | 	mov	r4, 0x40
0xC587 | 0xAFF0        | 01419 | 	ld	r5, sp, 0xfff0          // 1-byte Folded Reload
0xC588 | 0x33EC 0xC240 | 01420 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC58A | 0x0380        | 01421 | 	mov	r0, 0x0
0xC58B | 0xC7FF        | 01422 | 	st	r0, sp, 0xffff
0xC58C | 0x138F        | 01423 | 	mov	r2, 0xf
0xC58D | 0x1B8F        | 01424 | 	mov	r3, 0xf
0xC58E | 0x23E8 0x0062 | 01425 | 	mov	r4, 0x62
0xC590 | 0x2BBF        | 01426 | 	mov	r5, 0xffff
0xC591 | 0x33EC 0xC109 | 01427 | 	jsr	r6, sxc__Z21OLED_Text2x_160128RGBhhhmm
0xC593 | 0x0380        | 01428 | 	mov	r0, 0x0
0xC594 | 0xC7FF        | 01429 | 	st	r0, sp, 0xffff
0xC595 | 0x13E8 0x0085 | 01430 | 	mov	r2, 0x85
0xC597 | 0x1B8F        | 01431 | 	mov	r3, 0xf
0xC598 | 0x23E8 0x0063 | 01432 | 	mov	r4, 0x63
0xC59A | 0x2BBF        | 01433 | 	mov	r5, 0xffff
0xC59B | 0x33EC 0xC109 | 01434 | 	jsr	r6, sxc__Z21OLED_Text2x_160128RGBhhhmm
0xC59D | 0x0380        | 01435 | 	mov	r0, 0x0
0xC59E | 0xC7FF        | 01436 | 	st	r0, sp, 0xffff
0xC59F | 0x13E8 0x0050 | 01437 | 	mov	r2, 0x50
0xC5A1 | 0x1B9A        | 01438 | 	mov	r3, 0x1a
0xC5A2 | 0x23E8 0x0064 | 01439 | 	mov	r4, 0x64
0xC5A4 | 0x2BBF        | 01440 | 	mov	r5, 0xffff
0xC5A5 | 0x33EC 0xC0D2 | 01441 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC5A7 | 0x87EF        | 01442 | 	ld	r0, sp, 0xffef          // 1-byte Folded Reload
0xC5A8 | 0x03C8 0x0001 | 01443 | 	and	r0, r0, 0x1
       |               | 01444 | 	//cmp	r0, 0x0
0xC5AA | 0x2800 0x029E | 01445 | 	bc	ZC, BB20_4
       |               | 01446 | // BB#5:                                //   in Loop: Header=BB20_1 Depth=1
0xC5AC | 0x0380        | 01447 | 	mov	r0, 0x0
0xC5AD | 0xC7FF        | 01448 | 	st	r0, sp, 0xffff
0xC5AE | 0x13E8 0x0050 | 01449 | 	mov	r2, 0x50
0xC5B0 | 0x1B92        | 01450 | 	mov	r3, 0x12
0xC5B1 | 0x23E8 0x0067 | 01451 | 	mov	r4, 0x67
0xC5B3 | 0x2BBF        | 01452 | 	mov	r5, 0xffff
0xC5B4 | 0x33EC 0xC0D2 | 01453 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC5B6 | 0x0380        | 01454 | 	mov	r0, 0x0
0xC5B7 | 0xC7FF        | 01455 | 	st	r0, sp, 0xffff
0xC5B8 | 0x13E8 0x0050 | 01456 | 	mov	r2, 0x50
0xC5BA | 0x1B8A        | 01457 | 	mov	r3, 0xa
0xC5BB | 0x23E8 0x0068 | 01458 | 	mov	r4, 0x68
0xC5BD | 0x0100 0x029C | 01459 | 	bra	BB20_6
0xC5BF |               | 01460 | BB20_43:                                // %.split11
       |               | 01461 |                                         //   in Loop: Header=BB20_1 Depth=1
0xC5BF | 0x0381        | 01462 | 	mov	r0, 0x1
0xC5C0 | 0x0287        | 01463 | 	outp	r0, 0x7
0xC5C1 | 0x0382        | 01464 | 	mov	r0, 0x2
0xC5C2 | 0x0287        | 01465 | 	outp	r0, 0x7
0xC5C3 | 0x03E8 0x0040 | 01466 | 	mov	r0, 0x40
0xC5C5 | 0x0287        | 01467 | 	outp	r0, 0x7
0xC5C6 | 0x0390        | 01468 | 	mov	r0, 0x10
0xC5C7 | 0x0287        | 01469 | 	outp	r0, 0x7
0xC5C8 | 0x03EA 0xD4D7 | 01470 | 	ld	r0, sxc_profile_index
0xC5CA | 0xC7EF        | 01471 | 	st	r0, sp, 0xffef          // 1-byte Folded Spill
0xC5CB | 0x33EC 0xC284 | 01472 | 	jsr	r6, sxc__Z19OLED_Init_160128RGBv
0xC5CD | 0x33EC 0xC0BD | 01473 | 	jsr	r6, sxc__Z25OLED_FillScreen_160128RGBm
0xC5CF | 0x57E5        | 01474 | 	add	r2, sp, 0xffe5
0xC5D0 | 0xD7F0        | 01475 | 	st	r2, sp, 0xfff0          // 1-byte Folded Spill
0xC5D1 | 0x1BE8 0xD454 | 01476 | 	mov	r3, sxc__ZZ21OLED_display_progressjE4arr1
0xC5D3 | 0x2389        | 01477 | 	mov	r4, 0x9
0xC5D4 | 0x33EC 0xCA4C | 01478 | 	jsr	r6, sxc_memcpy
0xC5D6 | 0x0388        | 01479 | 	mov	r0, 0x8
0xC5D7 | 0xC7FF        | 01480 | 	st	r0, sp, 0xffff
0xC5D8 | 0x0380        | 01481 | 	mov	r0, 0x0
0xC5D9 | 0xC7FD        | 01482 | 	st	r0, sp, 0xfffd
0xC5DA | 0x03BF        | 01483 | 	mov	r0, 0xffff
0xC5DB | 0xC7FE        | 01484 | 	st	r0, sp, 0xfffe
0xC5DC | 0x1381        | 01485 | 	mov	r2, 0x1
0xC5DD | 0x1B85        | 01486 | 	mov	r3, 0x5
0xC5DE | 0x23E8 0x0069 | 01487 | 	mov	r4, 0x69
0xC5E0 | 0xAFF0        | 01488 | 	ld	r5, sp, 0xfff0          // 1-byte Folded Reload
0xC5E1 | 0x33EC 0xC240 | 01489 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC5E3 | 0x87EF        | 01490 | 	ld	r0, sp, 0xffef          // 1-byte Folded Reload
0xC5E4 | 0x4030        | 01491 | 	add	r0, r0, 0x30
0xC5E5 | 0xC7EE        | 01492 | 	st	r0, sp, 0xffee
0xC5E6 | 0x0380        | 01493 | 	mov	r0, 0x0
0xC5E7 | 0xC7FD        | 01494 | 	st	r0, sp, 0xfffd
0xC5E8 | 0x03BF        | 01495 | 	mov	r0, 0xffff
0xC5E9 | 0xC7FE        | 01496 | 	st	r0, sp, 0xfffe
0xC5EA | 0x0381        | 01497 | 	mov	r0, 0x1
0xC5EB | 0xC7FF        | 01498 | 	st	r0, sp, 0xffff
0xC5EC | 0x6FEE        | 01499 | 	add	r5, sp, 0xffee
0xC5ED | 0x1381        | 01500 | 	mov	r2, 0x1
0xC5EE | 0x1BE8 0x0065 | 01501 | 	mov	r3, 0x65
0xC5F0 | 0x23E8 0x0069 | 01502 | 	mov	r4, 0x69
0xC5F2 | 0x33EC 0xC240 | 01503 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC5F4 | 0x57B8        | 01504 | 	add	r2, sp, 0xffb8
0xC5F5 | 0xD7EF        | 01505 | 	st	r2, sp, 0xffef          // 1-byte Folded Spill
0xC5F6 | 0x1BE8 0xD45D | 01506 | 	mov	r3, sxc__ZZ21OLED_display_progressjE12arr_progress
0xC5F8 | 0x2389        | 01507 | 	mov	r4, 0x9
0xC5F9 | 0x33EC 0xCA4C | 01508 | 	jsr	r6, sxc_memcpy
0xC5FB | 0x0380        | 01509 | 	mov	r0, 0x0
0xC5FC | 0xC7FD        | 01510 | 	st	r0, sp, 0xfffd
0xC5FD | 0x03BF        | 01511 | 	mov	r0, 0xffff
0xC5FE | 0xC7FE        | 01512 | 	st	r0, sp, 0xfffe
0xC5FF | 0x0389        | 01513 | 	mov	r0, 0x9
0xC600 | 0xC7FF        | 01514 | 	st	r0, sp, 0xffff
0xC601 | 0x1381        | 01515 | 	mov	r2, 0x1
0xC602 | 0x1B94        | 01516 | 	mov	r3, 0x14
0xC603 | 0x23E8 0x0032 | 01517 | 	mov	r4, 0x32
0xC605 | 0xAFEF        | 01518 | 	ld	r5, sp, 0xffef          // 1-byte Folded Reload
0xC606 | 0x33EC 0xC240 | 01519 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC608 | 0x57D0        | 01520 | 	add	r2, sp, 0xffd0
0xC609 | 0xD7EF        | 01521 | 	st	r2, sp, 0xffef          // 1-byte Folded Spill
0xC60A | 0x1BE8 0xD466 | 01522 | 	mov	r3, sxc__ZZ21OLED_display_progressjE8arr_temp
0xC60C | 0x238C        | 01523 | 	mov	r4, 0xc
0xC60D | 0x33EC 0xCA4C | 01524 | 	jsr	r6, sxc_memcpy
0xC60F | 0x038C        | 01525 | 	mov	r0, 0xc
0xC610 | 0xC7FF        | 01526 | 	st	r0, sp, 0xffff
0xC611 | 0x0380        | 01527 | 	mov	r0, 0x0
0xC612 | 0xC7FD        | 01528 | 	st	r0, sp, 0xfffd
0xC613 | 0x03BF        | 01529 | 	mov	r0, 0xffff
0xC614 | 0xC7FE        | 01530 | 	st	r0, sp, 0xfffe
0xC615 | 0x1381        | 01531 | 	mov	r2, 0x1
0xC616 | 0x1B94        | 01532 | 	mov	r3, 0x14
0xC617 | 0x239E        | 01533 | 	mov	r4, 0x1e
0xC618 | 0xAFEF        | 01534 | 	ld	r5, sp, 0xffef          // 1-byte Folded Reload
0xC619 | 0x33EC 0xC240 | 01535 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC61B | 0x57DC        | 01536 | 	add	r2, sp, 0xffdc
0xC61C | 0xD7EF        | 01537 | 	st	r2, sp, 0xffef          // 1-byte Folded Spill
0xC61D | 0x1BE8 0xD472 | 01538 | 	mov	r3, sxc__ZZ21OLED_display_progressjE7arr_hum
0xC61F | 0x2389        | 01539 | 	mov	r4, 0x9
0xC620 | 0x33EC 0xCA4C | 01540 | 	jsr	r6, sxc_memcpy
0xC622 | 0x03BF        | 01541 | 	mov	r0, 0xffff
0xC623 | 0xC7FE        | 01542 | 	st	r0, sp, 0xfffe
0xC624 | 0x0389        | 01543 | 	mov	r0, 0x9
0xC625 | 0xC7FF        | 01544 | 	st	r0, sp, 0xffff
0xC626 | 0x0380        | 01545 | 	mov	r0, 0x0
0xC627 | 0xC7FD        | 01546 | 	st	r0, sp, 0xfffd
0xC628 | 0x0380        | 01547 | 	mov	r0, 0x0
0xC629 | 0xC7F0        | 01548 | 	st	r0, sp, 0xfff0          // 1-byte Folded Spill
0xC62A | 0x1381        | 01549 | 	mov	r2, 0x1
0xC62B | 0x1B94        | 01550 | 	mov	r3, 0x14
0xC62C | 0x238A        | 01551 | 	mov	r4, 0xa
0xC62D | 0xAFEF        | 01552 | 	ld	r5, sp, 0xffef          // 1-byte Folded Reload
0xC62E | 0x33EC 0xC240 | 01553 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC630 | 0x1BE8 0x0046 | 01554 | 	mov	r3, 0x46
0xC632 |               | 01555 | BB20_44:                                //   Parent Loop BB20_1 Depth=1
       |               | 01556 |                                         // =>  This Loop Header: Depth=2
       |               | 01557 |                                         //       Child Loop BB20_49 Depth 3
       |               | 01558 |                                         //       Child Loop BB20_48 Depth 3
       |               | 01559 |                                         //       Child Loop BB20_46 Depth 3
0xC632 | 0xDFF1        | 01560 | 	st	r3, sp, 0xfff1          // 1-byte Folded Spill
0xC633 | 0x1394        | 01561 | 	mov	r2, 0x14
0xC634 | 0x33EC 0xC0A8 | 01562 | 	jsr	r6, sxc__Z26OLED_SetPosition_160128RGBhh
0xC636 | 0x33EC 0xC08D | 01563 | 	jsr	r6, sxc__Z31OLED_WriteMemoryStart_160128RGBv
0xC638 | 0x87F0        | 01564 | 	ld	r0, sp, 0xfff0          // 1-byte Folded Reload
0xC639 | 0x48E3        | 01565 | 	sub	r1, r0, 0x1d
0xC63A | 0x280C        | 01566 | 	bc	NE, BB20_47
       |               | 01567 | // BB#45:                               //   in Loop: Header=BB20_44 Depth=2
0xC63B | 0x03E8 0x0080 | 01568 | 	mov	r0, 0x80
0xC63D |               | 01569 | BB20_46:                                // %.lr.ph.split.split.us.i.i
       |               | 01570 |                                         //   Parent Loop BB20_1 Depth=1
       |               | 01571 |                                         //     Parent Loop BB20_44 Depth=2
       |               | 01572 |                                         // =>    This Inner Loop Header: Depth=3
0xC63D | 0xC7EF        | 01573 | 	st	r0, sp, 0xffef          // 1-byte Folded Spill
0xC63E | 0x13E8 0xF800 | 01574 | 	mov	r2, 0xf800
0xC640 | 0x1B80        | 01575 | 	mov	r3, 0x0
0xC641 | 0x33EC 0xC096 | 01576 | 	jsr	r6, sxc__Z20OLED_Pixel_160128RGBm
0xC643 | 0x87EF        | 01577 | 	ld	r0, sp, 0xffef          // 1-byte Folded Reload
0xC644 | 0x40FF        | 01578 | 	add	r0, r0, 0xffff
       |               | 01579 | 	//cmp	r0, 0x0
0xC645 | 0x28F7        | 01580 | 	bc	ZC, BB20_46
0xC646 | 0x0120        | 01581 | 	bra	BB20_54
0xC647 |               | 01582 | BB20_47:                                //   in Loop: Header=BB20_44 Depth=2
0xC647 | 0x1380        | 01583 | 	mov	r2, 0x0
0xC648 | 0x1BE8 0x0080 | 01584 | 	mov	r3, 0x80
0xC64A | 0x4800        | 01585 | 	sub	r1, r0, 0x0
0xC64B | 0x280A        | 01586 | 	bc	NE, BB20_49
0xC64C |               | 01587 | BB20_48:                                // %.lr.ph.split.us..lr.ph.split.us.split_crit_edge.i.i
       |               | 01588 |                                         //   Parent Loop BB20_1 Depth=1
       |               | 01589 |                                         //     Parent Loop BB20_44 Depth=2
       |               | 01590 |                                         // =>    This Inner Loop Header: Depth=3
0xC64C | 0xDFEF        | 01591 | 	st	r3, sp, 0xffef          // 1-byte Folded Spill
0xC64D | 0x13E8 0xF800 | 01592 | 	mov	r2, 0xf800
0xC64F | 0x1B80        | 01593 | 	mov	r3, 0x0
0xC650 | 0x33EC 0xC096 | 01594 | 	jsr	r6, sxc__Z20OLED_Pixel_160128RGBm
0xC652 | 0x9FEF        | 01595 | 	ld	r3, sp, 0xffef          // 1-byte Folded Reload
0xC653 | 0x5BFF        | 01596 | 	add	r3, r3, 0xffff
       |               | 01597 | 	//cmp	r3, 0x0
0xC654 | 0x28F7        | 01598 | 	bc	ZC, BB20_48
0xC655 | 0x0111        | 01599 | 	bra	BB20_54
0xC656 |               | 01600 | BB20_49:                                // %.lr.ph.split..lr.ph.split.split_crit_edge.i.i
       |               | 01601 |                                         //   Parent Loop BB20_1 Depth=1
       |               | 01602 |                                         //     Parent Loop BB20_44 Depth=2
       |               | 01603 |                                         // =>    This Inner Loop Header: Depth=3
0xC656 | 0x4A00        | 01604 | 	sub	r1, r2, 0x0
0xC657 | 0x0802        | 01605 | 	bc	EQ, BB20_51
       |               | 01606 | // BB#50:                               // %.lr.ph.split..lr.ph.split.split_crit_edge.i.i
       |               | 01607 |                                         //   in Loop: Header=BB20_49 Depth=3
0xC658 | 0x4A81        | 01608 | 	sub	r1, r2, 0x7f
0xC659 | 0x2804        | 01609 | 	bc	NE, BB20_52
0xC65A |               | 01610 | BB20_51:                                //   in Loop: Header=BB20_49 Depth=3
0xC65A | 0xD7EF        | 01611 | 	st	r2, sp, 0xffef          // 1-byte Folded Spill
0xC65B | 0x13E8 0xF800 | 01612 | 	mov	r2, 0xf800
0xC65D | 0x0102        | 01613 | 	bra	BB20_53
0xC65E |               | 01614 | BB20_52:                                //   in Loop: Header=BB20_49 Depth=3
0xC65E | 0xD7EF        | 01615 | 	st	r2, sp, 0xffef          // 1-byte Folded Spill
0xC65F | 0x1380        | 01616 | 	mov	r2, 0x0
0xC660 |               | 01617 | BB20_53:                                //   in Loop: Header=BB20_49 Depth=3
0xC660 | 0x1B80        | 01618 | 	mov	r3, 0x0
0xC661 | 0x33EC 0xC096 | 01619 | 	jsr	r6, sxc__Z20OLED_Pixel_160128RGBm
0xC663 | 0x97EF        | 01620 | 	ld	r2, sp, 0xffef          // 1-byte Folded Reload
0xC664 | 0x5201        | 01621 | 	add	r2, r2, 0x1
0xC665 | 0x4A80        | 01622 | 	sub	r1, r2, 0x80
0xC666 | 0x28EF        | 01623 | 	bc	NE, BB20_49
0xC667 |               | 01624 | BB20_54:                                // %._crit_edge.i.i
       |               | 01625 |                                         //   in Loop: Header=BB20_44 Depth=2
0xC667 | 0x9FF1        | 01626 | 	ld	r3, sp, 0xfff1          // 1-byte Folded Reload
0xC668 | 0x5B01        | 01627 | 	add	r3, r3, 0x1
0xC669 | 0x87F0        | 01628 | 	ld	r0, sp, 0xfff0          // 1-byte Folded Reload
0xC66A | 0x4001        | 01629 | 	add	r0, r0, 0x1
0xC66B | 0xC7F0        | 01630 | 	st	r0, sp, 0xfff0          // 1-byte Folded Spill
0xC66C | 0x48E2        | 01631 | 	sub	r1, r0, 0x1e
0xC66D | 0x28C4        | 01632 | 	bc	NE, BB20_44
       |               | 01633 | // BB#55:                               // %_Z21OLED_display_progressj.exit
       |               | 01634 |                                         //   in Loop: Header=BB20_1 Depth=1
0xC66E | 0x1398        | 01635 | 	mov	r2, 0x18
0xC66F | 0x1B80        | 01636 | 	mov	r3, 0x0
0xC670 | 0x33EC 0xC1F2 | 01637 | 	jsr	r6, sxc__Z8Draw_Barhhmmjjj
0xC672 | 0x0390        | 01638 | 	mov	r0, 0x10
0xC673 | 0x0286        | 01639 | 	outp	r0, 0x6
0xC674 | 0x03E8 0x0040 | 01640 | 	mov	r0, 0x40
0xC676 | 0x0286        | 01641 | 	outp	r0, 0x6
0xC677 | 0x0382        | 01642 | 	mov	r0, 0x2
0xC678 | 0x0286        | 01643 | 	outp	r0, 0x6
0xC679 | 0x0381        | 01644 | 	mov	r0, 0x1
0xC67A | 0x0286        | 01645 | 	outp	r0, 0x6
0xC67B | 0x13E8 0x8000 | 01646 | 	mov	r2, 0x8000
0xC67D | 0x1287        | 01647 | 	outp	r2, 0x7
0xC67E | 0x0BEA 0xD208 | 01648 | 	ld	r1, thrds_vector
0xC680 | 0x0EA1        | 01649 | 	and	r1, r1, 0xffef
0xC681 | 0x0BEB 0xD208 | 01650 | 	st	r1, thrds_vector
0xC683 | 0x0A84        | 01651 | 	outp	r1, 0x4
0xC684 | 0x1286        | 01652 | 	outp	r2, 0x6
0xC685 | 0x1287        | 01653 | 	outp	r2, 0x7
0xC686 | 0x0BEA 0xD208 | 01654 | 	ld	r1, thrds_vector
0xC688 | 0x0EA9        | 01655 | 	and	r1, r1, 0xffdf
0xC689 | 0x0BEB 0xD208 | 01656 | 	st	r1, thrds_vector
0xC68B | 0x0A84        | 01657 | 	outp	r1, 0x4
0xC68C | 0x1286        | 01658 | 	outp	r2, 0x6
0xC68D | 0x0BEA 0xD4D9 | 01659 | 	ld	r1, sxc_progress
0xC68F | 0x1380        | 01660 | 	mov	r2, 0x0
0xC690 | 0x1BBF        | 01661 | 	mov	r3, 0xffff
0xC691 | 0x23E8 0x0064 | 01662 | 	mov	r4, 0x64
0xC693 | 0x0B61        | 01663 | 	sub	r1, r1, r4
0xC694 | 0x306A        | 01664 | 	bc	UGT, BB20_61
0xC695 |               | 01665 | BB20_56:                                // %.lr.ph
       |               | 01666 |                                         //   Parent Loop BB20_1 Depth=1
       |               | 01667 |                                         // =>  This Inner Loop Header: Depth=2
0xC695 | 0x0381        | 01668 | 	mov	r0, 0x1
0xC696 | 0x0287        | 01669 | 	outp	r0, 0x7
0xC697 | 0x03E8 0x0040 | 01670 | 	mov	r0, 0x40
0xC699 | 0x0287        | 01671 | 	outp	r0, 0x7
0xC69A | 0x0384        | 01672 | 	mov	r0, 0x4
0xC69B | 0x0287        | 01673 | 	outp	r0, 0x7
0xC69C | 0x0BEA 0xD4D3 | 01674 | 	ld	r1, sxc_btn_press
0xC69E | 0xCFEF        | 01675 | 	st	r1, sp, 0xffef          // 1-byte Folded Spill
0xC69F | 0x0286        | 01676 | 	outp	r0, 0x6
0xC6A0 | 0x03E8 0x0080 | 01677 | 	mov	r0, 0x80
0xC6A2 | 0x0287        | 01678 | 	outp	r0, 0x7
0xC6A3 | 0x23EA 0xD4D9 | 01679 | 	ld	r4, sxc_progress
0xC6A5 | 0xE7F0        | 01680 | 	st	r4, sp, 0xfff0          // 1-byte Folded Spill
0xC6A6 | 0xD7FE        | 01681 | 	st	r2, sp, 0xfffe
0xC6A7 | 0xDFFF        | 01682 | 	st	r3, sp, 0xffff
0xC6A8 | 0x13E8 0x0053 | 01683 | 	mov	r2, 0x53
0xC6AA | 0x1BE8 0x0032 | 01684 | 	mov	r3, 0x32
0xC6AC | 0x2B81        | 01685 | 	mov	r5, 0x1
0xC6AD | 0x33EC 0xC14D | 01686 | 	jsr	r6, sxc__Z21OLED_Print_Sensor_Valhhjjmm
0xC6AF | 0x139A        | 01687 | 	mov	r2, 0x1a
0xC6B0 | 0x9FF0        | 01688 | 	ld	r3, sp, 0xfff0          // 1-byte Folded Reload
0xC6B1 | 0x33EC 0xC1F2 | 01689 | 	jsr	r6, sxc__Z8Draw_Barhhmmjjj
0xC6B3 | 0x03E8 0x0080 | 01690 | 	mov	r0, 0x80
0xC6B5 | 0x0286        | 01691 | 	outp	r0, 0x6
0xC6B6 | 0x23EA 0xD4D1 | 01692 | 	ld	r4, sxc_current_temp
0xC6B8 | 0x03BF        | 01693 | 	mov	r0, 0xffff
0xC6B9 | 0xC7FF        | 01694 | 	st	r0, sp, 0xffff
0xC6BA | 0x0380        | 01695 | 	mov	r0, 0x0
0xC6BB | 0xC7FE        | 01696 | 	st	r0, sp, 0xfffe
0xC6BC | 0x13E8 0x0068 | 01697 | 	mov	r2, 0x68
0xC6BE | 0x1B9E        | 01698 | 	mov	r3, 0x1e
0xC6BF | 0x2B80        | 01699 | 	mov	r5, 0x0
0xC6C0 | 0x33EC 0xC14D | 01700 | 	jsr	r6, sxc__Z21OLED_Print_Sensor_Valhhjjmm
0xC6C2 | 0x1384        | 01701 | 	mov	r2, 0x4
0xC6C3 | 0x87EF        | 01702 | 	ld	r0, sp, 0xffef          // 1-byte Folded Reload
0xC6C4 | 0x48FF        | 01703 | 	sub	r1, r0, 0x1
0xC6C5 | 0x0801        | 01704 | 	bc	EQ, @ + 1 + 0x1
0xC6C6 | 0x1381        | 01705 | 	mov	r2, 0x1 //Select--False
0xC6C7 | 0x03E8 0x0100 | 01706 | 	mov	r0, 0x100
0xC6C9 | 0x0287        | 01707 | 	outp	r0, 0x7
0xC6CA | 0x03EA 0xD568 | 01708 | 	ld	r0, sxc_print_humidity
0xC6CC | 0x48FF        | 01709 | 	sub	r1, r0, 0x1
0xC6CD | 0x281E        | 01710 | 	bc	NE, BB20_57
       |               | 01711 | // BB#58:                               //   in Loop: Header=BB20_56 Depth=2
0xC6CE | 0x0382        | 01712 | 	mov	r0, 0x2
0xC6CF | 0x0287        | 01713 | 	outp	r0, 0x7
0xC6D0 | 0x23EA 0xD4D2 | 01714 | 	ld	r4, sxc_humidity
0xC6D2 | 0x03BF        | 01715 | 	mov	r0, 0xffff
0xC6D3 | 0xC7FF        | 01716 | 	st	r0, sp, 0xffff
0xC6D4 | 0x0380        | 01717 | 	mov	r0, 0x0
0xC6D5 | 0xC7FE        | 01718 | 	st	r0, sp, 0xfffe
0xC6D6 | 0xD7EF        | 01719 | 	st	r2, sp, 0xffef          // 1-byte Folded Spill
0xC6D7 | 0x13E8 0x0053 | 01720 | 	mov	r2, 0x53
0xC6D9 | 0x1B8A        | 01721 | 	mov	r3, 0xa
0xC6DA | 0x2B81        | 01722 | 	mov	r5, 0x1
0xC6DB | 0x33EC 0xC14D | 01723 | 	jsr	r6, sxc__Z21OLED_Print_Sensor_Valhhjjmm
0xC6DD | 0x13EA 0xD4D2 | 01724 | 	ld	r2, sxc_humidity
0xC6DF | 0x0383        | 01725 | 	mov	r0, 0x3
0xC6E0 | 0x1BE8 0x003C | 01726 | 	mov	r3, 0x3c
0xC6E2 | 0xA7EF        | 01727 | 	ld	r4, sp, 0xffef          // 1-byte Folded Reload
0xC6E3 | 0x0B5A        | 01728 | 	sub	r1, r2, r3
0xC6E4 | 0x3001        | 01729 | 	bc	UGT, @ + 1 + 0x1
0xC6E5 | 0x4400        | 01730 | 	mov	r0, r4 //Select--False
0xC6E6 | 0x0B82        | 01731 | 	mov	r1, 0x2
0xC6E7 | 0x0A86        | 01732 | 	outp	r1, 0x6
0xC6E8 | 0x0B80        | 01733 | 	mov	r1, 0x0
0xC6E9 | 0x0BEB 0xD568 | 01734 | 	st	r1, sxc_print_humidity
0xC6EB | 0x0101        | 01735 | 	bra	BB20_59
0xC6EC |               | 01736 | BB20_57:                                //   in Loop: Header=BB20_56 Depth=2
0xC6EC | 0x4200        | 01737 | 	add	r0, r2, 0x0
0xC6ED |               | 01738 | BB20_59:                                //   in Loop: Header=BB20_56 Depth=2
0xC6ED | 0x0BE8 0x0100 | 01739 | 	mov	r1, 0x100
0xC6EF | 0x0A86        | 01740 | 	outp	r1, 0x6
0xC6F0 | 0x0BE8 0x0040 | 01741 | 	mov	r1, 0x40
0xC6F2 | 0x0A86        | 01742 | 	outp	r1, 0x6
0xC6F3 | 0x0B81        | 01743 | 	mov	r1, 0x1
0xC6F4 | 0x0A86        | 01744 | 	outp	r1, 0x6
0xC6F5 | 0x0BEA 0xD4D9 | 01745 | 	ld	r1, sxc_progress
0xC6F7 | 0x1380        | 01746 | 	mov	r2, 0x0
0xC6F8 | 0x1BE8 0x0064 | 01747 | 	mov	r3, 0x64
0xC6FA | 0x0B59        | 01748 | 	sub	r1, r1, r3
0xC6FB | 0x3003        | 01749 | 	bc	UGT, BB20_61
       |               | 01750 | // BB#60:                               //   in Loop: Header=BB20_56 Depth=2
0xC6FC | 0x1BBF        | 01751 | 	mov	r3, 0xffff
0xC6FD | 0x48FF        | 01752 | 	sub	r1, r0, 0x1
0xC6FE | 0x0896        | 01753 | 	bc	EQ, BB20_56
0xC6FF |               | 01754 | BB20_61:                                // %.critedge
       |               | 01755 |                                         //   in Loop: Header=BB20_1 Depth=1
0xC6FF | 0x1BE8 0x8000 | 01756 | 	mov	r3, 0x8000
0xC701 | 0x1A87        | 01757 | 	outp	r3, 0x7
0xC702 | 0x0BEA 0xD208 | 01758 | 	ld	r1, thrds_vector
0xC704 | 0x0F19        | 01759 | 	ior	r1, r1, 0x8
0xC705 | 0x0BEB 0xD208 | 01760 | 	st	r1, thrds_vector
0xC707 | 0x0A84        | 01761 | 	outp	r1, 0x4
0xC708 | 0x1A86        | 01762 | 	outp	r3, 0x6
0xC709 | 0x1A87        | 01763 | 	outp	r3, 0x7
0xC70A | 0x0BEA 0xD208 | 01764 | 	ld	r1, thrds_vector
0xC70C | 0x0F21        | 01765 | 	ior	r1, r1, 0x10
0xC70D | 0x0BEB 0xD208 | 01766 | 	st	r1, thrds_vector
0xC70F | 0x0A84        | 01767 | 	outp	r1, 0x4
0xC710 | 0x1A86        | 01768 | 	outp	r3, 0x6
0xC711 | 0x1A87        | 01769 | 	outp	r3, 0x7
0xC712 | 0x0BEA 0xD208 | 01770 | 	ld	r1, thrds_vector
0xC714 | 0x0F29        | 01771 | 	ior	r1, r1, 0x20
0xC715 | 0x0BEB 0xD208 | 01772 | 	st	r1, thrds_vector
0xC717 | 0x0A84        | 01773 | 	outp	r1, 0x4
0xC718 | 0x1A86        | 01774 | 	outp	r3, 0x6
0xC719 | 0x0A26        | 01775 | 	inp	r1, 0x26
0xC71A | 0x0BC9 0xFF9F | 01776 | 	and	r1, r1, 0xff9f
0xC71C | 0x0AA6        | 01777 | 	outp	r1, 0x26
0xC71D | 0x1B83        | 01778 | 	mov	r3, 0x3
0xC71E | 0x48FD        | 01779 | 	sub	r1, r0, 0x3
0xC71F | 0x0807        | 01780 | 	bc	EQ, BB20_63
       |               | 01781 | // BB#62:                               //   in Loop: Header=BB20_1 Depth=1
0xC720 | 0x03E8 0x0080 | 01782 | 	mov	r0, 0x80
0xC722 | 0x0287        | 01783 | 	outp	r0, 0x7
0xC723 | 0x13EB 0xD4D9 | 01784 | 	st	r2, sxc_progress
0xC725 | 0x0286        | 01785 | 	outp	r0, 0x6
0xC726 | 0x1B84        | 01786 | 	mov	r3, 0x4
0xC727 |               | 01787 | BB20_63:                                //   in Loop: Header=BB20_1 Depth=1
0xC727 | 0xDFEF        | 01788 | 	st	r3, sp, 0xffef          // 1-byte Folded Spill
0xC728 | 0x33EC 0xC0BD | 01789 | 	jsr	r6, sxc__Z25OLED_FillScreen_160128RGBm
0xC72A | 0x9FEF        | 01790 | 	ld	r3, sp, 0xffef          // 1-byte Folded Reload
0xC72B | 0x1384        | 01791 | 	mov	r2, 0x4
0xC72C | 0x0100 0xFE04 | 01792 | 	bra	BB20_1
0xC72E |               | 01793 | BB20_40:                                // %.split8
       |               | 01794 |                                         //   in Loop: Header=BB20_1 Depth=1
0xC72E | 0x33EC 0xC0BD | 01795 | 	jsr	r6, sxc__Z25OLED_FillScreen_160128RGBm
0xC730 | 0x03E8 0x0047 | 01796 | 	mov	r0, 0x47
0xC732 | 0xC7BF        | 01797 | 	st	r0, sp, 0xffbf
0xC733 | 0x03E8 0x004E | 01798 | 	mov	r0, 0x4e
0xC735 | 0xC7BE        | 01799 | 	st	r0, sp, 0xffbe
0xC736 | 0x03E8 0x0049 | 01800 | 	mov	r0, 0x49
0xC738 | 0xC7BD        | 01801 | 	st	r0, sp, 0xffbd
0xC739 | 0x03E8 0x0041 | 01802 | 	mov	r0, 0x41
0xC73B | 0xC7BA        | 01803 | 	st	r0, sp, 0xffba
0xC73C | 0x03E8 0x0054 | 01804 | 	mov	r0, 0x54
0xC73E | 0xC7BC        | 01805 | 	st	r0, sp, 0xffbc
0xC73F | 0xC7B9        | 01806 | 	st	r0, sp, 0xffb9
0xC740 | 0x0BE8 0x0052 | 01807 | 	mov	r1, 0x52
0xC742 | 0xCFBB        | 01808 | 	st	r1, sp, 0xffbb
0xC743 | 0x03E8 0x0053 | 01809 | 	mov	r0, 0x53
0xC745 | 0xC7B8        | 01810 | 	st	r0, sp, 0xffb8
0xC746 | 0x03E8 0x002E | 01811 | 	mov	r0, 0x2e
0xC748 | 0xC7D7        | 01812 | 	st	r0, sp, 0xffd7
0xC749 | 0xC7D6        | 01813 | 	st	r0, sp, 0xffd6
0xC74A | 0x03E8 0x0057 | 01814 | 	mov	r0, 0x57
0xC74C | 0xC7D5        | 01815 | 	st	r0, sp, 0xffd5
0xC74D | 0x03E8 0x004F | 01816 | 	mov	r0, 0x4f
0xC74F | 0xC7D4        | 01817 | 	st	r0, sp, 0xffd4
0xC750 | 0x03E8 0x004C | 01818 | 	mov	r0, 0x4c
0xC752 | 0xC7D3        | 01819 | 	st	r0, sp, 0xffd3
0xC753 | 0x03E8 0x0046 | 01820 | 	mov	r0, 0x46
0xC755 | 0xC7D2        | 01821 | 	st	r0, sp, 0xffd2
0xC756 | 0x03E8 0x0045 | 01822 | 	mov	r0, 0x45
0xC758 | 0xC7D1        | 01823 | 	st	r0, sp, 0xffd1
0xC759 | 0xCFD0        | 01824 | 	st	r1, sp, 0xffd0
0xC75A | 0x0380        | 01825 | 	mov	r0, 0x0
0xC75B | 0xC7FD        | 01826 | 	st	r0, sp, 0xfffd
0xC75C | 0x03E8 0x1F00 | 01827 | 	mov	r0, 0x1f00
0xC75E | 0xC7FE        | 01828 | 	st	r0, sp, 0xfffe
0xC75F | 0x0388        | 01829 | 	mov	r0, 0x8
0xC760 | 0xC7FF        | 01830 | 	st	r0, sp, 0xffff
0xC761 | 0x6FB8        | 01831 | 	add	r5, sp, 0xffb8
0xC762 | 0x1382        | 01832 | 	mov	r2, 0x2
0xC763 | 0x1B85        | 01833 | 	mov	r3, 0x5
0xC764 | 0x23E8 0x0053 | 01834 | 	mov	r4, 0x53
0xC766 | 0x33EC 0xC240 | 01835 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC768 | 0x0380        | 01836 | 	mov	r0, 0x0
0xC769 | 0xC7FD        | 01837 | 	st	r0, sp, 0xfffd
0xC76A | 0x03E8 0x1F00 | 01838 | 	mov	r0, 0x1f00
0xC76C | 0xC7FE        | 01839 | 	st	r0, sp, 0xfffe
0xC76D | 0x0388        | 01840 | 	mov	r0, 0x8
0xC76E | 0xC7FF        | 01841 | 	st	r0, sp, 0xffff
0xC76F | 0x6FD0        | 01842 | 	add	r5, sp, 0xffd0
0xC770 | 0x1382        | 01843 | 	mov	r2, 0x2
0xC771 | 0x1B85        | 01844 | 	mov	r3, 0x5
0xC772 | 0x239F        | 01845 | 	mov	r4, 0x1f
0xC773 | 0x33EC 0xC240 | 01846 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC775 | 0x0BE8 0x8000 | 01847 | 	mov	r1, 0x8000
0xC777 | 0x0A87        | 01848 | 	outp	r1, 0x7
0xC778 | 0x03EA 0xD208 | 01849 | 	ld	r0, thrds_vector
0xC77A | 0x0698        | 01850 | 	and	r0, r0, 0xfff7
0xC77B | 0x03EB 0xD208 | 01851 | 	st	r0, thrds_vector
0xC77D | 0x0284        | 01852 | 	outp	r0, 0x4
0xC77E | 0x0A86        | 01853 | 	outp	r1, 0x6
0xC77F | 0x13E8 0x03E8 | 01854 | 	mov	r2, 0x3e8
0xC781 | 0x33EC 0xC01F | 01855 | 	jsr	r6, sxc__Z7wait_msj
0xC783 | 0x0381        | 01856 | 	mov	r0, 0x1
0xC784 | 0x0287        | 01857 | 	outp	r0, 0x7
0xC785 | 0x03EA 0xD4D1 | 01858 | 	ld	r0, sxc_current_temp
0xC787 | 0x0BE8 0x0063 | 01859 | 	mov	r1, 0x63
0xC789 | 0x0B48        | 01860 | 	sub	r1, r0, r1
0xC78A | 0x3004        | 01861 | 	bc	UGT, BB20_42
       |               | 01862 | // BB#41:                               //   in Loop: Header=BB20_1 Depth=1
0xC78B | 0x0226        | 01863 | 	inp	r0, 0x26
0xC78C | 0x03D0 0x0060 | 01864 | 	ior	r0, r0, 0x60
0xC78E | 0x02A6        | 01865 | 	outp	r0, 0x26
0xC78F |               | 01866 | BB20_42:                                //   in Loop: Header=BB20_1 Depth=1
0xC78F | 0x0381        | 01867 | 	mov	r0, 0x1
0xC790 | 0x0286        | 01868 | 	outp	r0, 0x6
0xC791 | 0x13E8 0x03E8 | 01869 | 	mov	r2, 0x3e8
0xC793 | 0x33EC 0xC01F | 01870 | 	jsr	r6, sxc__Z7wait_msj
0xC795 | 0x33EC 0xC0BD | 01871 | 	jsr	r6, sxc__Z25OLED_FillScreen_160128RGBm
0xC797 | 0x1B81        | 01872 | 	mov	r3, 0x1
0xC798 | 0x1384        | 01873 | 	mov	r2, 0x4
0xC799 | 0x0100 0xFD97 | 01874 | 	bra	BB20_1
0xC79B |               | 01875 | BB20_64:                                // %.split14
       |               | 01876 |                                         //   in Loop: Header=BB20_1 Depth=1
0xC79B | 0x0BE8 0xD492 | 01877 | 	mov	r1, sxc__ZZ20OLED_display_warningvE4text
0xC79D | 0x8106        | 01878 | 	ld	r0, r1, 0x6
0xC79E | 0xC7E2        | 01879 | 	st	r0, sp, 0xffe2
0xC79F | 0x8105        | 01880 | 	ld	r0, r1, 0x5
0xC7A0 | 0xC7E1        | 01881 | 	st	r0, sp, 0xffe1
0xC7A1 | 0x8104        | 01882 | 	ld	r0, r1, 0x4
0xC7A2 | 0xC7E0        | 01883 | 	st	r0, sp, 0xffe0
0xC7A3 | 0x8103        | 01884 | 	ld	r0, r1, 0x3
0xC7A4 | 0xC7DF        | 01885 | 	st	r0, sp, 0xffdf
0xC7A5 | 0x8102        | 01886 | 	ld	r0, r1, 0x2
0xC7A6 | 0xC7DE        | 01887 | 	st	r0, sp, 0xffde
0xC7A7 | 0x8101        | 01888 | 	ld	r0, r1, 0x1
0xC7A8 | 0xC7DD        | 01889 | 	st	r0, sp, 0xffdd
0xC7A9 | 0x03EA 0xD492 | 01890 | 	ld	r0, sxc__ZZ20OLED_display_warningvE4text
0xC7AB | 0xC7DC        | 01891 | 	st	r0, sp, 0xffdc
0xC7AC | 0x039F        | 01892 | 	mov	r0, 0x1f
0xC7AD | 0xC7FE        | 01893 | 	st	r0, sp, 0xfffe
0xC7AE | 0x0387        | 01894 | 	mov	r0, 0x7
0xC7AF | 0xC7FF        | 01895 | 	st	r0, sp, 0xffff
0xC7B0 | 0x0380        | 01896 | 	mov	r0, 0x0
0xC7B1 | 0xC7FD        | 01897 | 	st	r0, sp, 0xfffd
0xC7B2 | 0x6FDC        | 01898 | 	add	r5, sp, 0xffdc
0xC7B3 | 0x1382        | 01899 | 	mov	r2, 0x2
0xC7B4 | 0x1B89        | 01900 | 	mov	r3, 0x9
0xC7B5 | 0x23E8 0x0062 | 01901 | 	mov	r4, 0x62
0xC7B7 | 0x33EC 0xC240 | 01902 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC7B9 | 0x57B8        | 01903 | 	add	r2, sp, 0xffb8
0xC7BA | 0xD7EF        | 01904 | 	st	r2, sp, 0xffef          // 1-byte Folded Spill
0xC7BB | 0x1BE8 0xD499 | 01905 | 	mov	r3, sxc__ZZ20OLED_display_warningvE5text1
0xC7BD | 0x2393        | 01906 | 	mov	r4, 0x13
0xC7BE | 0x33EC 0xCA4C | 01907 | 	jsr	r6, sxc_memcpy
0xC7C0 | 0x0393        | 01908 | 	mov	r0, 0x13
0xC7C1 | 0xC7FF        | 01909 | 	st	r0, sp, 0xffff
0xC7C2 | 0x0380        | 01910 | 	mov	r0, 0x0
0xC7C3 | 0xC7FD        | 01911 | 	st	r0, sp, 0xfffd
0xC7C4 | 0x03BF        | 01912 | 	mov	r0, 0xffff
0xC7C5 | 0xC7FE        | 01913 | 	st	r0, sp, 0xfffe
0xC7C6 | 0x1381        | 01914 | 	mov	r2, 0x1
0xC7C7 | 0x1B89        | 01915 | 	mov	r3, 0x9
0xC7C8 | 0x23E8 0x0053 | 01916 | 	mov	r4, 0x53
0xC7CA | 0xAFEF        | 01917 | 	ld	r5, sp, 0xffef          // 1-byte Folded Reload
0xC7CB | 0x33EC 0xC240 | 01918 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC7CD | 0x57D0        | 01919 | 	add	r2, sp, 0xffd0
0xC7CE | 0xD7EF        | 01920 | 	st	r2, sp, 0xffef          // 1-byte Folded Spill
0xC7CF | 0x1BE8 0xD4AC | 01921 | 	mov	r3, sxc__ZZ20OLED_display_warningvE5text2
0xC7D1 | 0x238C        | 01922 | 	mov	r4, 0xc
0xC7D2 | 0x33EC 0xCA4C | 01923 | 	jsr	r6, sxc_memcpy
0xC7D4 | 0x0380        | 01924 | 	mov	r0, 0x0
0xC7D5 | 0xC7FD        | 01925 | 	st	r0, sp, 0xfffd
0xC7D6 | 0x03BF        | 01926 | 	mov	r0, 0xffff
0xC7D7 | 0xC7FE        | 01927 | 	st	r0, sp, 0xfffe
0xC7D8 | 0x038C        | 01928 | 	mov	r0, 0xc
0xC7D9 | 0xC7FF        | 01929 | 	st	r0, sp, 0xffff
0xC7DA | 0x1381        | 01930 | 	mov	r2, 0x1
0xC7DB | 0x1B89        | 01931 | 	mov	r3, 0x9
0xC7DC | 0x23E8 0x0047 | 01932 | 	mov	r4, 0x47
0xC7DE | 0xAFEF        | 01933 | 	ld	r5, sp, 0xffef          // 1-byte Folded Reload
0xC7DF | 0x33EC 0xC240 | 01934 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC7E1 | 0x13E8 0x0064 | 01935 | 	mov	r2, 0x64
0xC7E3 | 0x33EC 0xC01F | 01936 | 	jsr	r6, sxc__Z7wait_msj
0xC7E5 | 0x33EC 0xC344 | 01937 | 	jsr	r6, sxc__Z27OLED_display_second_warningv
0xC7E7 | 0x1384        | 01938 | 	mov	r2, 0x4
0xC7E8 | 0x1287        | 01939 | 	outp	r2, 0x7
0xC7E9 | 0x022E        | 01940 | 	inp	r0, 0x2e
0xC7EA | 0x03C8 0xFFFC | 01941 | 	and	r0, r0, 0xfffc
0xC7EC | 0x0670        | 01942 | 	rol	r0, r0, 0xe
0xC7ED | 0x03C8 0x0001 | 01943 | 	and	r0, r0, 0x1
0xC7EF | 0x0780        | 01944 | 	xor	r0, r0, 0x1
0xC7F0 | 0x03EB 0xD4D3 | 01945 | 	st	r0, sxc_btn_press
0xC7F2 | 0x1B83        | 01946 | 	mov	r3, 0x3
0xC7F3 | 0x03EA 0xD4D3 | 01947 | 	ld	r0, sxc_btn_press
0xC7F5 | 0x48FF        | 01948 | 	sub	r1, r0, 0x1
0xC7F6 | 0x2809        | 01949 | 	bc	NE, BB20_66
       |               | 01950 | // BB#65:                               //   in Loop: Header=BB20_1 Depth=1
0xC7F7 | 0x1286        | 01951 | 	outp	r2, 0x6
0xC7F8 | 0x13E8 0x03E8 | 01952 | 	mov	r2, 0x3e8
0xC7FA | 0x33EC 0xC01F | 01953 | 	jsr	r6, sxc__Z7wait_msj
0xC7FC | 0x33EC 0xC0BD | 01954 | 	jsr	r6, sxc__Z25OLED_FillScreen_160128RGBm
0xC7FE | 0x1384        | 01955 | 	mov	r2, 0x4
0xC7FF | 0x1B82        | 01956 | 	mov	r3, 0x2
0xC800 |               | 01957 | BB20_66:                                //   in Loop: Header=BB20_1 Depth=1
0xC800 | 0x1286        | 01958 | 	outp	r2, 0x6
0xC801 | 0x0100 0xFD2F | 01959 | 	bra	BB20_1
0xC803 |               | 01960 | BB20_67:                                // %.split17
       |               | 01961 |                                         //   in Loop: Header=BB20_1 Depth=1
0xC803 | 0x57E5        | 01962 | 	add	r2, sp, 0xffe5
0xC804 | 0xD7EF        | 01963 | 	st	r2, sp, 0xffef          // 1-byte Folded Spill
0xC805 | 0x1BE8 0xD47B | 01964 | 	mov	r3, sxc__ZZ17OLED_end_progressvE4text
0xC807 | 0x2389        | 01965 | 	mov	r4, 0x9
0xC808 | 0x33EC 0xCA4C | 01966 | 	jsr	r6, sxc_memcpy
0xC80A | 0x0389        | 01967 | 	mov	r0, 0x9
0xC80B | 0xC7FF        | 01968 | 	st	r0, sp, 0xffff
0xC80C | 0x0380        | 01969 | 	mov	r0, 0x0
0xC80D | 0xC7FD        | 01970 | 	st	r0, sp, 0xfffd
0xC80E | 0x03BF        | 01971 | 	mov	r0, 0xffff
0xC80F | 0xC7FE        | 01972 | 	st	r0, sp, 0xfffe
0xC810 | 0x1382        | 01973 | 	mov	r2, 0x2
0xC811 | 0x1B85        | 01974 | 	mov	r3, 0x5
0xC812 | 0x23E8 0x0064 | 01975 | 	mov	r4, 0x64
0xC814 | 0xAFEF        | 01976 | 	ld	r5, sp, 0xffef          // 1-byte Folded Reload
0xC815 | 0x33EC 0xC240 | 01977 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC817 | 0x57B8        | 01978 | 	add	r2, sp, 0xffb8
0xC818 | 0xD7EF        | 01979 | 	st	r2, sp, 0xffef          // 1-byte Folded Spill
0xC819 | 0x1BE8 0xD484 | 01980 | 	mov	r3, sxc__ZZ17OLED_end_progressvE5text2
0xC81B | 0x238E        | 01981 | 	mov	r4, 0xe
0xC81C | 0x33EC 0xCA4C | 01982 | 	jsr	r6, sxc_memcpy
0xC81E | 0x0380        | 01983 | 	mov	r0, 0x0
0xC81F | 0xC7FD        | 01984 | 	st	r0, sp, 0xfffd
0xC820 | 0x03BF        | 01985 | 	mov	r0, 0xffff
0xC821 | 0xC7FE        | 01986 | 	st	r0, sp, 0xfffe
0xC822 | 0x038E        | 01987 | 	mov	r0, 0xe
0xC823 | 0xC7FF        | 01988 | 	st	r0, sp, 0xffff
0xC824 | 0x1381        | 01989 | 	mov	r2, 0x1
0xC825 | 0x1B85        | 01990 | 	mov	r3, 0x5
0xC826 | 0x23E8 0x004B | 01991 | 	mov	r4, 0x4b
0xC828 | 0xAFEF        | 01992 | 	ld	r5, sp, 0xffef          // 1-byte Folded Reload
0xC829 | 0x33EC 0xC240 | 01993 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC82B | 0x13E8 0x0064 | 01994 | 	mov	r2, 0x64
0xC82D | 0x33EC 0xC01F | 01995 | 	jsr	r6, sxc__Z7wait_msj
0xC82F | 0x33EC 0xC344 | 01996 | 	jsr	r6, sxc__Z27OLED_display_second_warningv
0xC831 | 0x1B84        | 01997 | 	mov	r3, 0x4
0xC832 | 0x1A87        | 01998 | 	outp	r3, 0x7
0xC833 | 0x022E        | 01999 | 	inp	r0, 0x2e
0xC834 | 0x03C8 0xFFFC | 02000 | 	and	r0, r0, 0xfffc
0xC836 | 0x0670        | 02001 | 	rol	r0, r0, 0xe
0xC837 | 0x03C8 0x0001 | 02002 | 	and	r0, r0, 0x1
0xC839 | 0x0780        | 02003 | 	xor	r0, r0, 0x1
0xC83A | 0x03EB 0xD4D3 | 02004 | 	st	r0, sxc_btn_press
0xC83C | 0x03EA 0xD4D3 | 02005 | 	ld	r0, sxc_btn_press
0xC83E | 0x48FF        | 02006 | 	sub	r1, r0, 0x1
0xC83F | 0x2800 0xFCEF | 02007 | 	bc	NE, BB20_39
       |               | 02008 | // BB#68:                               //   in Loop: Header=BB20_1 Depth=1
0xC841 | 0x13E8 0x03E8 | 02009 | 	mov	r2, 0x3e8
0xC843 | 0x33EC 0xC01F | 02010 | 	jsr	r6, sxc__Z7wait_msj
0xC845 | 0x33EC 0xC0BD | 02011 | 	jsr	r6, sxc__Z25OLED_FillScreen_160128RGBm
0xC847 | 0x1B80        | 02012 | 	mov	r3, 0x0
0xC848 | 0x0100 0xFCE6 | 02013 | 	bra	BB20_39
0xC84A |               | 02014 | BB20_4:                                 //   in Loop: Header=BB20_1 Depth=1
0xC84A | 0x0380        | 02015 | 	mov	r0, 0x0
0xC84B | 0xC7FF        | 02016 | 	st	r0, sp, 0xffff
0xC84C | 0x13E8 0x0050 | 02017 | 	mov	r2, 0x50
0xC84E | 0x1B92        | 02018 | 	mov	r3, 0x12
0xC84F | 0x23E8 0x0065 | 02019 | 	mov	r4, 0x65
0xC851 | 0x2BBF        | 02020 | 	mov	r5, 0xffff
0xC852 | 0x33EC 0xC0D2 | 02021 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC854 | 0x0380        | 02022 | 	mov	r0, 0x0
0xC855 | 0xC7FF        | 02023 | 	st	r0, sp, 0xffff
0xC856 | 0x13E8 0x0050 | 02024 | 	mov	r2, 0x50
0xC858 | 0x1B8A        | 02025 | 	mov	r3, 0xa
0xC859 | 0x23E8 0x0066 | 02026 | 	mov	r4, 0x66
0xC85B |               | 02027 | BB20_6:                                 //   in Loop: Header=BB20_1 Depth=1
0xC85B | 0x2BBF        | 02028 | 	mov	r5, 0xffff
0xC85C | 0x33EC 0xC0D2 | 02029 | 	jsr	r6, sxc__Z19OLED_Text_160128RGBhhhmm
0xC85E | 0x03EA 0xD4D7 | 02030 | 	ld	r0, sxc_profile_index
0xC860 | 0xC7EF        | 02031 | 	st	r0, sp, 0xffef          // 1-byte Folded Spill
0xC861 | 0x57B8        | 02032 | 	add	r2, sp, 0xffb8
0xC862 | 0xD7F0        | 02033 | 	st	r2, sp, 0xfff0          // 1-byte Folded Spill
0xC863 | 0x1BE8 0xD447 | 02034 | 	mov	r3, sxc__ZZ18OLED_profile_timesPjE5text4
0xC865 | 0x238D        | 02035 | 	mov	r4, 0xd
0xC866 | 0x33EC 0xCA4C | 02036 | 	jsr	r6, sxc_memcpy
0xC868 | 0x038D        | 02037 | 	mov	r0, 0xd
0xC869 | 0xC7FF        | 02038 | 	st	r0, sp, 0xffff
0xC86A | 0x0380        | 02039 | 	mov	r0, 0x0
0xC86B | 0xC7FD        | 02040 | 	st	r0, sp, 0xfffd
0xC86C | 0x03BF        | 02041 | 	mov	r0, 0xffff
0xC86D | 0xC7FE        | 02042 | 	st	r0, sp, 0xfffe
0xC86E | 0x1381        | 02043 | 	mov	r2, 0x1
0xC86F | 0x1B94        | 02044 | 	mov	r3, 0x14
0xC870 | 0x23E8 0x0033 | 02045 | 	mov	r4, 0x33
0xC872 | 0xAFF0        | 02046 | 	ld	r5, sp, 0xfff0          // 1-byte Folded Reload
0xC873 | 0x33EC 0xC240 | 02047 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC875 | 0x0380        | 02048 | 	mov	r0, 0x0
0xC876 | 0xC7FE        | 02049 | 	st	r0, sp, 0xfffe
0xC877 | 0x03E8 0xF800 | 02050 | 	mov	r0, 0xf800
0xC879 | 0xC7FF        | 02051 | 	st	r0, sp, 0xffff
0xC87A | 0x87EF        | 02052 | 	ld	r0, sp, 0xffef          // 1-byte Folded Reload
0xC87B | 0x0608        | 02053 | 	rol	r0, r0, 0x1
0xC87C | 0x0680        | 02054 | 	and	r0, r0, 0xfffe
0xC87D | 0x0E08        | 02055 | 	rol	r1, r0, 0x1
0xC87E | 0x0E81        | 02056 | 	and	r1, r1, 0xfffe
0xC87F | 0x0308        | 02057 | 	add	r0, r0, r1
0xC880 | 0xC7EF        | 02058 | 	st	r0, sp, 0xffef          // 1-byte Folded Spill
0xC881 | 0x23F0 0xD563 | 02059 | 	ld	r4, r0,sxc_profile_array-6
0xC883 | 0x13E8 0x0061 | 02060 | 	mov	r2, 0x61
0xC885 | 0x1BE8 0x004D | 02061 | 	mov	r3, 0x4d
0xC887 | 0x2B83        | 02062 | 	mov	r5, 0x3
0xC888 | 0x33EC 0xC14D | 02063 | 	jsr	r6, sxc__Z21OLED_Print_Sensor_Valhhjjmm
0xC88A | 0x0380        | 02064 | 	mov	r0, 0x0
0xC88B | 0xC7FE        | 02065 | 	st	r0, sp, 0xfffe
0xC88C | 0x03E8 0xF800 | 02066 | 	mov	r0, 0xf800
0xC88E | 0xC7FF        | 02067 | 	st	r0, sp, 0xffff
0xC88F | 0x87EF        | 02068 | 	ld	r0, sp, 0xffef          // 1-byte Folded Reload
0xC890 | 0x23F0 0xD564 | 02069 | 	ld	r4, r0,sxc_profile_array-5
0xC892 | 0x13E8 0x0068 | 02070 | 	mov	r2, 0x68
0xC894 | 0x1BE8 0x0040 | 02071 | 	mov	r3, 0x40
0xC896 | 0x2B83        | 02072 | 	mov	r5, 0x3
0xC897 | 0x33EC 0xC14D | 02073 | 	jsr	r6, sxc__Z21OLED_Print_Sensor_Valhhjjmm
0xC899 | 0x03E8 0xF800 | 02074 | 	mov	r0, 0xf800
0xC89B | 0xC7FF        | 02075 | 	st	r0, sp, 0xffff
0xC89C | 0x0380        | 02076 | 	mov	r0, 0x0
0xC89D | 0xC7FE        | 02077 | 	st	r0, sp, 0xfffe
0xC89E | 0x87EF        | 02078 | 	ld	r0, sp, 0xffef          // 1-byte Folded Reload
0xC89F | 0x23F0 0xD565 | 02079 | 	ld	r4, r0,sxc_profile_array-4
0xC8A1 | 0x13E8 0x0076 | 02080 | 	mov	r2, 0x76
0xC8A3 | 0x1BE8 0x0033 | 02081 | 	mov	r3, 0x33
0xC8A5 | 0x2B83        | 02082 | 	mov	r5, 0x3
0xC8A6 | 0x33EC 0xC14D | 02083 | 	jsr	r6, sxc__Z21OLED_Print_Sensor_Valhhjjmm
0xC8A8 | 0x03E8 0x0073 | 02084 | 	mov	r0, 0x73
0xC8AA | 0xC7EE        | 02085 | 	st	r0, sp, 0xffee
0xC8AB | 0x0380        | 02086 | 	mov	r0, 0x0
0xC8AC | 0xC7FD        | 02087 | 	st	r0, sp, 0xfffd
0xC8AD | 0x03BF        | 02088 | 	mov	r0, 0xffff
0xC8AE | 0xC7FE        | 02089 | 	st	r0, sp, 0xfffe
0xC8AF | 0x0381        | 02090 | 	mov	r0, 0x1
0xC8B0 | 0xC7FF        | 02091 | 	st	r0, sp, 0xffff
0xC8B1 | 0x6FEE        | 02092 | 	add	r5, sp, 0xffee
0xC8B2 | 0xEFEF        | 02093 | 	st	r5, sp, 0xffef          // 1-byte Folded Spill
0xC8B3 | 0x1381        | 02094 | 	mov	r2, 0x1
0xC8B4 | 0x1BE8 0x0076 | 02095 | 	mov	r3, 0x76
0xC8B6 | 0x23E8 0x004D | 02096 | 	mov	r4, 0x4d
0xC8B8 | 0x33EC 0xC240 | 02097 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC8BA | 0x0380        | 02098 | 	mov	r0, 0x0
0xC8BB | 0xC7FD        | 02099 | 	st	r0, sp, 0xfffd
0xC8BC | 0x03BF        | 02100 | 	mov	r0, 0xffff
0xC8BD | 0xC7FE        | 02101 | 	st	r0, sp, 0xfffe
0xC8BE | 0x0381        | 02102 | 	mov	r0, 0x1
0xC8BF | 0xC7FF        | 02103 | 	st	r0, sp, 0xffff
0xC8C0 | 0x1381        | 02104 | 	mov	r2, 0x1
0xC8C1 | 0x1BE8 0x007D | 02105 | 	mov	r3, 0x7d
0xC8C3 | 0x23E8 0x0040 | 02106 | 	mov	r4, 0x40
0xC8C5 | 0xAFEF        | 02107 | 	ld	r5, sp, 0xffef          // 1-byte Folded Reload
0xC8C6 | 0x33EC 0xC240 | 02108 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC8C8 | 0x0380        | 02109 | 	mov	r0, 0x0
0xC8C9 | 0xC7FD        | 02110 | 	st	r0, sp, 0xfffd
0xC8CA | 0x03BF        | 02111 | 	mov	r0, 0xffff
0xC8CB | 0xC7FE        | 02112 | 	st	r0, sp, 0xfffe
0xC8CC | 0x0381        | 02113 | 	mov	r0, 0x1
0xC8CD | 0xC7FF        | 02114 | 	st	r0, sp, 0xffff
0xC8CE | 0x1381        | 02115 | 	mov	r2, 0x1
0xC8CF | 0x1BE8 0x008B | 02116 | 	mov	r3, 0x8b
0xC8D1 | 0x23E8 0x0033 | 02117 | 	mov	r4, 0x33
0xC8D3 | 0xAFEF        | 02118 | 	ld	r5, sp, 0xffef          // 1-byte Folded Reload
0xC8D4 | 0x33EC 0xC240 | 02119 | 	jsr	r6, sxc__Z15OLED_write_textihhPhimm
0xC8D6 | 0x1B90        | 02120 | 	mov	r3, 0x10
0xC8D7 | 0x1A86        | 02121 | 	outp	r3, 0x6
0xC8D8 | 0x0388        | 02122 | 	mov	r0, 0x8
0xC8D9 | 0x0287        | 02123 | 	outp	r0, 0x7
0xC8DA | 0x23E8 0xD4D4 | 02124 | 	mov	r4, sxc_r_encoder
0xC8DC | 0x8402        | 02125 | 	ld	r0, r4, 0x2
0xC8DD | 0x48FF        | 02126 | 	sub	r1, r0, 0x1
0xC8DE | 0x2812        | 02127 | 	bc	NE, BB20_10
       |               | 02128 | // BB#7:                                //   in Loop: Header=BB20_1 Depth=1
0xC8DF | 0x1A87        | 02129 | 	outp	r3, 0x7
0xC8E0 | 0x03EA 0xD4D7 | 02130 | 	ld	r0, sxc_profile_index
0xC8E2 | 0x4001        | 02131 | 	add	r0, r0, 0x1
0xC8E3 | 0x03EB 0xD4D7 | 02132 | 	st	r0, sxc_profile_index
0xC8E5 | 0x03EA 0xD4D7 | 02133 | 	ld	r0, sxc_profile_index
0xC8E7 | 0x0B84        | 02134 | 	mov	r1, 0x4
0xC8E8 | 0x0B48        | 02135 | 	sub	r1, r0, r1
0xC8E9 | 0x0003        | 02136 | 	bc	ULT, BB20_9
       |               | 02137 | // BB#8:                                //   in Loop: Header=BB20_1 Depth=1
0xC8EA | 0x0381        | 02138 | 	mov	r0, 0x1
0xC8EB | 0x03EB 0xD4D7 | 02139 | 	st	r0, sxc_profile_index
0xC8ED |               | 02140 | BB20_9:                                 //   in Loop: Header=BB20_1 Depth=1
0xC8ED | 0x1A86        | 02141 | 	outp	r3, 0x6
0xC8EE | 0x0380        | 02142 | 	mov	r0, 0x0
0xC8EF | 0xC402        | 02143 | 	st	r0, r4, 0x2
0xC8F0 | 0x0112        | 02144 | 	bra	BB20_14
0xC8F1 |               | 02145 | BB20_10:                                //   in Loop: Header=BB20_1 Depth=1
0xC8F1 | 0x8402        | 02146 | 	ld	r0, r4, 0x2
0xC8F2 | 0x1380        | 02147 | 	mov	r2, 0x0
0xC8F3 | 0x48FE        | 02148 | 	sub	r1, r0, 0x2
0xC8F4 | 0x280E        | 02149 | 	bc	NE, BB20_14
       |               | 02150 | // BB#11:                               //   in Loop: Header=BB20_1 Depth=1
0xC8F5 | 0x1A87        | 02151 | 	outp	r3, 0x7
0xC8F6 | 0x03EA 0xD4D7 | 02152 | 	ld	r0, sxc_profile_index
0xC8F8 | 0x40FF        | 02153 | 	add	r0, r0, 0xffff
0xC8F9 | 0x03EB 0xD4D7 | 02154 | 	st	r0, sxc_profile_index
0xC8FB | 0x03EA 0xD4D7 | 02155 | 	ld	r0, sxc_profile_index
       |               | 02156 | 	//cmp	r0, 0x0
0xC8FD | 0x2803        | 02157 | 	bc	ZC, BB20_13
       |               | 02158 | // BB#12:                               //   in Loop: Header=BB20_1 Depth=1
0xC8FE | 0x0383        | 02159 | 	mov	r0, 0x3
0xC8FF | 0x03EB 0xD4D7 | 02160 | 	st	r0, sxc_profile_index
0xC901 |               | 02161 | BB20_13:                                //   in Loop: Header=BB20_1 Depth=1
0xC901 | 0x1A86        | 02162 | 	outp	r3, 0x6
0xC902 | 0xD402        | 02163 | 	st	r2, r4, 0x2
0xC903 |               | 02164 | BB20_14:                                //   in Loop: Header=BB20_1 Depth=1
0xC903 | 0x0388        | 02165 | 	mov	r0, 0x8
0xC904 | 0x0286        | 02166 | 	outp	r0, 0x6
0xC905 | 0x0384        | 02167 | 	mov	r0, 0x4
0xC906 | 0x0287        | 02168 | 	outp	r0, 0x7
0xC907 | 0x022E        | 02169 | 	inp	r0, 0x2e
0xC908 | 0x03C8 0xFFFC | 02170 | 	and	r0, r0, 0xfffc
0xC90A | 0x0670        | 02171 | 	rol	r0, r0, 0xe
0xC90B | 0x03C8 0x0001 | 02172 | 	and	r0, r0, 0x1
0xC90D | 0x0780        | 02173 | 	xor	r0, r0, 0x1
0xC90E | 0x03EB 0xD4D3 | 02174 | 	st	r0, sxc_btn_press
0xC910 | 0x1B80        | 02175 | 	mov	r3, 0x0
0xC911 | 0x03EA 0xD4D3 | 02176 | 	ld	r0, sxc_btn_press
0xC913 | 0x48FF        | 02177 | 	sub	r1, r0, 0x1
0xC914 | 0x2800 0xFC1A | 02178 | 	bc	NE, BB20_39
       |               | 02179 | // BB#15:                               //   in Loop: Header=BB20_1 Depth=1
0xC916 | 0x33EC 0xC0BD | 02180 | 	jsr	r6, sxc__Z25OLED_FillScreen_160128RGBm
0xC918 | 0x03EA 0xD4D7 | 02181 | 	ld	r0, sxc_profile_index
0xC91A | 0x48FD        | 02182 | 	sub	r1, r0, 0x3
0xC91B | 0x0833        | 02183 | 	bc	EQ, BB20_32
       |               | 02184 | // BB#16:                               //   in Loop: Header=BB20_1 Depth=1
0xC91C | 0x48FE        | 02185 | 	sub	r1, r0, 0x2
0xC91D | 0x2863        | 02186 | 	bc	NE, BB20_17
       |               | 02187 | // BB#25:                               //   in Loop: Header=BB20_1 Depth=1
0xC91E | 0x0399        | 02188 | 	mov	r0, 0x19
0xC91F | 0x03EB 0xD4DA | 02189 | 	st	r0, sxc_selected_profile
0xC921 | 0x039C        | 02190 | 	mov	r0, 0x1c
0xC922 | 0x0B81        | 02191 | 	mov	r1, 0x1
0xC923 | 0x1BC1 0xD4DA | 02192 | 	add	r3, r1, sxc_selected_profile
0xC925 | 0x23E8 0xD4DA | 02193 | 	mov	r4, sxc_selected_profile
0xC927 | 0x2BE8 0x00A0 | 02194 | 	mov	r5, 0xa0
0xC929 |               | 02195 | BB20_26:                                //   Parent Loop BB20_1 Depth=1
       |               | 02196 |                                         // =>  This Inner Loop Header: Depth=2
0xC929 | 0x13E8 0x002D | 02197 | 	mov	r2, 0x2d
0xC92B | 0xC300        | 02198 | 	st	r0, r3, 0x0
0xC92C | 0x5B01        | 02199 | 	add	r3, r3, 0x1
0xC92D | 0x4003        | 02200 | 	add	r0, r0, 0x3
0xC92E | 0x0BC0 0xFF5D | 02201 | 	sub	r1, r0, 0xa3
0xC930 | 0x28F8        | 02202 | 	bc	NE, BB20_26
0xC931 |               | 02203 | BB20_27:                                // %.lr.ph66.i
       |               | 02204 |                                         //   Parent Loop BB20_1 Depth=1
       |               | 02205 |                                         // =>  This Inner Loop Header: Depth=2
0xC931 | 0x0354        | 02206 | 	sub	r0, r4, r2
0xC932 | 0xE85B        | 02207 | 	st	r5, r0, 0x5b
0xC933 | 0x52FF        | 02208 | 	add	r2, r2, 0xffff
       |               | 02209 | 	//cmp	r2, 0x0
0xC934 | 0x28FC        | 02210 | 	bc	ZC, BB20_27
       |               | 02211 | // BB#28:                               //   in Loop: Header=BB20_1 Depth=1
0xC935 | 0x03E8 0x00A3 | 02212 | 	mov	r0, 0xa3
0xC937 | 0x97F2        | 02213 | 	ld	r2, sp, 0xfff2          // 1-byte Folded Reload
0xC938 |               | 02214 | BB20_29:                                // %.lr.ph59.i
       |               | 02215 |                                         //   Parent Loop BB20_1 Depth=1
       |               | 02216 |                                         // =>  This Inner Loop Header: Depth=2
0xC938 | 0xC200        | 02217 | 	st	r0, r2, 0x0
0xC939 | 0x5201        | 02218 | 	add	r2, r2, 0x1
0xC93A | 0x4003        | 02219 | 	add	r0, r0, 0x3
0xC93B | 0x0BC0 0xFF03 | 02220 | 	sub	r1, r0, 0xfd
0xC93D | 0x28FA        | 02221 | 	bc	NE, BB20_29
       |               | 02222 | // BB#30:                               // %.lr.ph54.i5.loopexit
       |               | 02223 |                                         //   in Loop: Header=BB20_1 Depth=1
0xC93E | 0x03E8 0x00FA | 02224 | 	mov	r0, 0xfa
0xC940 | 0xC479        | 02225 | 	st	r0, r4, 0x79
0xC941 | 0xC47A        | 02226 | 	st	r0, r4, 0x7a
0xC942 | 0xC47B        | 02227 | 	st	r0, r4, 0x7b
0xC943 | 0x03E8 0x00F5 | 02228 | 	mov	r0, 0xf5
0xC945 | 0x97F3        | 02229 | 	ld	r2, sp, 0xfff3          // 1-byte Folded Reload
0xC946 |               | 02230 | BB20_31:                                // %.lr.ph.i9
       |               | 02231 |                                         //   Parent Loop BB20_1 Depth=1
       |               | 02232 |                                         // =>  This Inner Loop Header: Depth=2
0xC946 | 0x1B82        | 02233 | 	mov	r3, 0x2
0xC947 | 0xC200        | 02234 | 	st	r0, r2, 0x0
0xC948 | 0x5201        | 02235 | 	add	r2, r2, 0x1
0xC949 | 0x40FB        | 02236 | 	add	r0, r0, 0xfffb
0xC94A | 0x0BC0 0xFF60 | 02237 | 	sub	r1, r0, 0xa0
0xC94C | 0x28F9        | 02238 | 	bc	NE, BB20_31
0xC94D | 0x0100 0xFBE1 | 02239 | 	bra	BB20_39
0xC94F |               | 02240 | BB20_32:                                //   in Loop: Header=BB20_1 Depth=1
0xC94F | 0x0399        | 02241 | 	mov	r0, 0x19
0xC950 | 0x03EB 0xD4DA | 02242 | 	st	r0, sxc_selected_profile
0xC952 | 0x039B        | 02243 | 	mov	r0, 0x1b
0xC953 | 0x0B81        | 02244 | 	mov	r1, 0x1
0xC954 | 0x1BC1 0xD4DA | 02245 | 	add	r3, r1, sxc_selected_profile
0xC956 | 0x23E8 0x0073 | 02246 | 	mov	r4, 0x73
0xC958 | 0x2BE8 0xD4DA | 02247 | 	mov	r5, sxc_selected_profile
0xC95A |               | 02248 | BB20_33:                                //   Parent Loop BB20_1 Depth=1
       |               | 02249 |                                         // =>  This Inner Loop Header: Depth=2
0xC95A | 0x13E8 0x002D | 02250 | 	mov	r2, 0x2d
0xC95C | 0xC300        | 02251 | 	st	r0, r3, 0x0
0xC95D | 0x5B01        | 02252 | 	add	r3, r3, 0x1
0xC95E | 0x4002        | 02253 | 	add	r0, r0, 0x2
0xC95F | 0x488B        | 02254 | 	sub	r1, r0, 0x75
0xC960 | 0x28F9        | 02255 | 	bc	NE, BB20_33
0xC961 |               | 02256 | BB20_34:                                // %.lr.ph66.i15
       |               | 02257 |                                         //   Parent Loop BB20_1 Depth=1
       |               | 02258 |                                         // =>  This Inner Loop Header: Depth=2
0xC961 | 0x0355        | 02259 | 	sub	r0, r5, r2
0xC962 | 0xE05B        | 02260 | 	st	r4, r0, 0x5b
0xC963 | 0x52FF        | 02261 | 	add	r2, r2, 0xffff
       |               | 02262 | 	//cmp	r2, 0x0
0xC964 | 0x28FC        | 02263 | 	bc	ZC, BB20_34
       |               | 02264 | // BB#35:                               //   in Loop: Header=BB20_1 Depth=1
0xC965 | 0x03E8 0x0075 | 02265 | 	mov	r0, 0x75
0xC967 | 0x97F2        | 02266 | 	ld	r2, sp, 0xfff2          // 1-byte Folded Reload
0xC968 |               | 02267 | BB20_36:                                // %.lr.ph59.i19
       |               | 02268 |                                         //   Parent Loop BB20_1 Depth=1
       |               | 02269 |                                         // =>  This Inner Loop Header: Depth=2
0xC968 | 0xC200        | 02270 | 	st	r0, r2, 0x0
0xC969 | 0x5201        | 02271 | 	add	r2, r2, 0x1
0xC96A | 0x4002        | 02272 | 	add	r0, r0, 0x2
0xC96B | 0x0BC0 0xFF57 | 02273 | 	sub	r1, r0, 0xa9
0xC96D | 0x28FA        | 02274 | 	bc	NE, BB20_36
       |               | 02275 | // BB#37:                               // %.lr.ph54.i22.loopexit
       |               | 02276 |                                         //   in Loop: Header=BB20_1 Depth=1
0xC96E | 0x03E8 0x00A7 | 02277 | 	mov	r0, 0xa7
0xC970 | 0xC575        | 02278 | 	st	r0, r5, 0x75
0xC971 | 0xC576        | 02279 | 	st	r0, r5, 0x76
0xC972 | 0xC577        | 02280 | 	st	r0, r5, 0x77
0xC973 | 0x03E8 0x00A2 | 02281 | 	mov	r0, 0xa2
0xC975 | 0x0BE8 0x0078 | 02282 | 	mov	r1, 0x78
0xC977 | 0x13C1 0xD4DA | 02283 | 	add	r2, r1, sxc_selected_profile
0xC979 |               | 02284 | BB20_38:                                // %.lr.ph.i26
       |               | 02285 |                                         //   Parent Loop BB20_1 Depth=1
       |               | 02286 |                                         // =>  This Inner Loop Header: Depth=2
0xC979 | 0x1B82        | 02287 | 	mov	r3, 0x2
0xC97A | 0xC200        | 02288 | 	st	r0, r2, 0x0
0xC97B | 0x5201        | 02289 | 	add	r2, r2, 0x1
0xC97C | 0x40FB        | 02290 | 	add	r0, r0, 0xfffb
0xC97D | 0x48C7        | 02291 | 	sub	r1, r0, 0x39
0xC97E | 0x28FA        | 02292 | 	bc	NE, BB20_38
0xC97F | 0x0100 0xFBAF | 02293 | 	bra	BB20_39
0xC981 |               | 02294 | BB20_17:                                //   in Loop: Header=BB20_1 Depth=1
0xC981 | 0x1B82        | 02295 | 	mov	r3, 0x2
0xC982 | 0x23E8 0xD4DA | 02296 | 	mov	r4, sxc_selected_profile
0xC984 | 0x48FF        | 02297 | 	sub	r1, r0, 0x1
0xC985 | 0x2800 0xFBA9 | 02298 | 	bc	NE, BB20_39
       |               | 02299 | // BB#18:                               //   in Loop: Header=BB20_1 Depth=1
0xC987 | 0x0399        | 02300 | 	mov	r0, 0x19
0xC988 | 0x03EB 0xD4DA | 02301 | 	st	r0, sxc_selected_profile
0xC98A | 0x039E        | 02302 | 	mov	r0, 0x1e
0xC98B | 0x0B81        | 02303 | 	mov	r1, 0x1
0xC98C | 0x13C1 0xD4DA | 02304 | 	add	r2, r1, sxc_selected_profile
0xC98E |               | 02305 | BB20_19:                                //   Parent Loop BB20_1 Depth=1
       |               | 02306 |                                         // =>  This Inner Loop Header: Depth=2
0xC98E | 0x1BE8 0x0065 | 02307 | 	mov	r3, 0x65
0xC990 | 0xC200        | 02308 | 	st	r0, r2, 0x0
0xC991 | 0x5201        | 02309 | 	add	r2, r2, 0x1
0xC992 | 0x4005        | 02310 | 	add	r0, r0, 0x5
0xC993 | 0x4897        | 02311 | 	sub	r1, r0, 0x69
0xC994 | 0x28F9        | 02312 | 	bc	NE, BB20_19
0xC995 |               | 02313 | BB20_20:                                // %.lr.ph68.i
       |               | 02314 |                                         //   Parent Loop BB20_1 Depth=1
       |               | 02315 |                                         // =>  This Inner Loop Header: Depth=2
0xC995 | 0x1BFB 0xD485 | 02316 | 	st	r3, r3,sxc_selected_profile-85
0xC997 | 0x5B01        | 02317 | 	add	r3, r3, 0x1
0xC998 | 0x0BC3 0xFF6E | 02318 | 	sub	r1, r3, 0x92
0xC99A | 0x28FA        | 02319 | 	bc	NE, BB20_20
       |               | 02320 | // BB#21:                               //   in Loop: Header=BB20_1 Depth=1
0xC99B | 0x03E8 0x0093 | 02321 | 	mov	r0, 0x93
0xC99D | 0x97F4        | 02322 | 	ld	r2, sp, 0xfff4          // 1-byte Folded Reload
0xC99E |               | 02323 | BB20_22:                                // %.lr.ph60.i
       |               | 02324 |                                         //   Parent Loop BB20_1 Depth=1
       |               | 02325 |                                         // =>  This Inner Loop Header: Depth=2
0xC99E | 0xC200        | 02326 | 	st	r0, r2, 0x0
0xC99F | 0x5201        | 02327 | 	add	r2, r2, 0x1
0xC9A0 | 0x4002        | 02328 | 	add	r0, r0, 0x2
0xC9A1 | 0x0BC0 0xFF13 | 02329 | 	sub	r1, r0, 0xed
0xC9A3 | 0x28FA        | 02330 | 	bc	NE, BB20_22
       |               | 02331 | // BB#23:                               // %.lr.ph54.i.loopexit
       |               | 02332 |                                         //   in Loop: Header=BB20_1 Depth=1
0xC9A4 | 0x03E8 0x00EB | 02333 | 	mov	r0, 0xeb
0xC9A6 | 0xC46A        | 02334 | 	st	r0, r4, 0x6a
0xC9A7 | 0xC46B        | 02335 | 	st	r0, r4, 0x6b
0xC9A8 | 0xC46C        | 02336 | 	st	r0, r4, 0x6c
0xC9A9 | 0x03E8 0x00E6 | 02337 | 	mov	r0, 0xe6
0xC9AB | 0x97F5        | 02338 | 	ld	r2, sp, 0xfff5          // 1-byte Folded Reload
0xC9AC |               | 02339 | BB20_24:                                // %.lr.ph.i
       |               | 02340 |                                         //   Parent Loop BB20_1 Depth=1
       |               | 02341 |                                         // =>  This Inner Loop Header: Depth=2
0xC9AC | 0x1B82        | 02342 | 	mov	r3, 0x2
0xC9AD | 0xC200        | 02343 | 	st	r0, r2, 0x0
0xC9AE | 0x5201        | 02344 | 	add	r2, r2, 0x1
0xC9AF | 0x40FB        | 02345 | 	add	r0, r0, 0xfffb
0xC9B0 | 0x48BA        | 02346 | 	sub	r1, r0, 0x46
0xC9B1 | 0x28FA        | 02347 | 	bc	NE, BB20_24
0xC9B2 | 0x0100 0xFB7C | 02348 | 	bra	BB20_39
0xC9B4 |               | 02349 | BB20_69:                                // %infloop
       |               | 02350 |                                         // =>This Inner Loop Header: Depth=1
0xC9B4 | 0x01FF        | 02351 | 	bra	BB20_69
       |               | 02352 | //	.section	//.text,"xr"
       |               | 02353 | //sxc_main
       |               | 02354 | //align
       |               | 02355 | @ = (@ + 1-1)  & -1
0xC9B5 |               | 02356 | sxc_main:                               // @main
       |               | 02357 | // BB#0:
0xC9B5 | 0x0396        | 02358 | 	mov	r0, 0x16
0xC9B6 | 0x02F0        | 02359 | 	outp	r0, 0x70
0xC9B7 | 0x03E8 0x0073 | 02360 | 	mov	r0, 0x73
0xC9B9 | 0x02F1        | 02361 | 	outp	r0, 0x71
0xC9BA | 0x0272        | 02362 | 	inp	r0, 0x72
0xC9BB | 0x06D0        | 02363 | 	and	r0, r0, 0xfbff
0xC9BC | 0x02F2        | 02364 | 	outp	r0, 0x72
0xC9BD |               | 02365 | BB21_1:                                 // =>This Inner Loop Header: Depth=1
0xC9BD | 0x0272        | 02366 | 	inp	r0, 0x72
       |               | 02367 | 	//cmp	r0, 0x0
0xC9BE | 0x0CFE        | 02368 | 	bc	LT0, BB21_1
       |               | 02369 | // BB#2:
0xC9BF | 0x0381        | 02370 | 	mov	r0, 0x1
0xC9C0 | 0x02F5        | 02371 | 	outp	r0, 0x75
0xC9C1 | 0x03E8 0x0805 | 02372 | 	mov	r0, 0x805
0xC9C3 | 0x02F4        | 02373 | 	outp	r0, 0x74
0xC9C4 | 0x0272        | 02374 | 	inp	r0, 0x72
0xC9C5 | 0x06D0        | 02375 | 	and	r0, r0, 0xfbff
0xC9C6 | 0x02F2        | 02376 | 	outp	r0, 0x72
0xC9C7 |               | 02377 | BB21_3:                                 // =>This Inner Loop Header: Depth=1
0xC9C7 | 0x0272        | 02378 | 	inp	r0, 0x72
       |               | 02379 | 	//cmp	r0, 0x0
0xC9C8 | 0x0CFE        | 02380 | 	bc	LT0, BB21_3
       |               | 02381 | // BB#4:
0xC9C9 | 0x0272        | 02382 | 	inp	r0, 0x72
0xC9CA | 0x03D0 0x0C00 | 02383 | 	ior	r0, r0, 0xc00
0xC9CC | 0x02F2        | 02384 | 	outp	r0, 0x72
0xC9CD |               | 02385 | BB21_5:                                 // =>This Inner Loop Header: Depth=1
0xC9CD | 0x0272        | 02386 | 	inp	r0, 0x72
       |               | 02387 | 	//cmp	r0, 0x0
0xC9CE | 0x2CFE        | 02388 | 	bc	NC, BB21_5
       |               | 02389 | // BB#6:                                // %_Z8InitGPIOv.exit
0xC9CF | 0x03E8 0x8183 | 02390 | 	mov	r0, 0x8183
0xC9D1 | 0x02F3        | 02391 | 	outp	r0, 0x73
0xC9D2 | 0x038F        | 02392 | 	mov	r0, 0xf
0xC9D3 | 0x02B7        | 02393 | 	outp	r0, 0x37
0xC9D4 | 0x03E8 0x8700 | 02394 | 	mov	r0, 0x8700
0xC9D6 | 0x02A1        | 02395 | 	outp	r0, 0x21
0xC9D7 | 0x0220        | 02396 | 	inp	r0, 0x20
0xC9D8 | 0x0710        | 02397 | 	ior	r0, r0, 0x4
0xC9D9 | 0x02A0        | 02398 | 	outp	r0, 0x20
0xC9DA | 0x0220        | 02399 | 	inp	r0, 0x20
0xC9DB | 0x0738        | 02400 | 	ior	r0, r0, 0x80
0xC9DC | 0x02A0        | 02401 | 	outp	r0, 0x20
0xC9DD | 0x0391        | 02402 | 	mov	r0, 0x11
0xC9DE | 0x02F0        | 02403 | 	outp	r0, 0x70
0xC9DF | 0x038E        | 02404 | 	mov	r0, 0xe
0xC9E0 | 0x02F1        | 02405 | 	outp	r0, 0x71
0xC9E1 | 0x1B92        | 02406 | 	mov	r3, 0x12
0xC9E2 | 0x1AF0        | 02407 | 	outp	r3, 0x70
0xC9E3 | 0x02F1        | 02408 | 	outp	r0, 0x71
0xC9E4 | 0x03E8 0x6000 | 02409 | 	mov	r0, 0x6000
0xC9E6 | 0x02A7        | 02410 | 	outp	r0, 0x27
0xC9E7 | 0x03E8 0x0200 | 02411 | 	mov	r0, 0x200
0xC9E9 | 0x02B3        | 02412 | 	outp	r0, 0x33
0xC9EA | 0x0232        | 02413 | 	inp	r0, 0x32
0xC9EB | 0x0708        | 02414 | 	ior	r0, r0, 0x2
0xC9EC | 0x02B2        | 02415 | 	outp	r0, 0x32
0xC9ED | 0x139A        | 02416 | 	mov	r2, 0x1a
0xC9EE | 0x12F0        | 02417 | 	outp	r2, 0x70
0xC9EF | 0x03E8 0x0060 | 02418 | 	mov	r0, 0x60
0xC9F1 | 0x02F1        | 02419 | 	outp	r0, 0x71
0xC9F2 | 0x03E8 0x8000 | 02420 | 	mov	r0, 0x8000
0xC9F4 | 0x0287        | 02421 | 	outp	r0, 0x7
0xC9F5 | 0x0B8A        | 02422 | 	mov	r1, 0xa
0xC9F6 | 0x0A83        | 02423 | 	outp	r1, 0x3
0xC9F7 | 0x0B80        | 02424 | 	mov	r1, 0x0
0xC9F8 | 0x0A80        | 02425 | 	outp	r1, 0x0
0xC9F9 | 0x23E8 0xC513 | 02426 | 	mov	r4, sxc__Z15stateOLEDThreadPv
0xC9FB | 0x2281        | 02427 | 	outp	r4, 0x1
0xC9FC | 0x0286        | 02428 | 	outp	r0, 0x6
0xC9FD | 0x0287        | 02429 | 	outp	r0, 0x7
0xC9FE | 0x23EA 0xD208 | 02430 | 	ld	r4, thrds_vector
0xCA00 | 0x268C        | 02431 | 	and	r4, r4, 0xfffd
0xCA01 | 0x23EB 0xD208 | 02432 | 	st	r4, thrds_vector
0xCA03 | 0x2284        | 02433 | 	outp	r4, 0x4
0xCA04 | 0x0286        | 02434 | 	outp	r0, 0x6
0xCA05 | 0x0287        | 02435 | 	outp	r0, 0x7
0xCA06 | 0x1A83        | 02436 | 	outp	r3, 0x3
0xCA07 | 0x0A80        | 02437 | 	outp	r1, 0x0
0xCA08 | 0x1BE8 0xC3B9 | 02438 | 	mov	r3, sxc__Z14RotEncodThreadPv
0xCA0A | 0x1A81        | 02439 | 	outp	r3, 0x1
0xCA0B | 0x0286        | 02440 | 	outp	r0, 0x6
0xCA0C | 0x0287        | 02441 | 	outp	r0, 0x7
0xCA0D | 0x1BEA 0xD208 | 02442 | 	ld	r3, thrds_vector
0xCA0F | 0x1E93        | 02443 | 	and	r3, r3, 0xfffb
0xCA10 | 0x1BEB 0xD208 | 02444 | 	st	r3, thrds_vector
0xCA12 | 0x1A84        | 02445 | 	outp	r3, 0x4
0xCA13 | 0x0286        | 02446 | 	outp	r0, 0x6
0xCA14 | 0x0287        | 02447 | 	outp	r0, 0x7
0xCA15 | 0x1283        | 02448 | 	outp	r2, 0x3
0xCA16 | 0x0A80        | 02449 | 	outp	r1, 0x0
0xCA17 | 0x13E8 0xC372 | 02450 | 	mov	r2, sxc__Z10TempThreadPv
0xCA19 | 0x1281        | 02451 | 	outp	r2, 0x1
0xCA1A | 0x0286        | 02452 | 	outp	r0, 0x6
0xCA1B | 0x0287        | 02453 | 	outp	r0, 0x7
0xCA1C | 0x13E8 0x0022 | 02454 | 	mov	r2, 0x22
0xCA1E | 0x1283        | 02455 | 	outp	r2, 0x3
0xCA1F | 0x0A80        | 02456 | 	outp	r1, 0x0
0xCA20 | 0x13E8 0xC4BF | 02457 | 	mov	r2, sxc__Z14HumidityThreadPv
0xCA22 | 0x1281        | 02458 | 	outp	r2, 0x1
0xCA23 | 0x0286        | 02459 | 	outp	r0, 0x6
0xCA24 | 0x0287        | 02460 | 	outp	r0, 0x7
0xCA25 | 0x13E8 0x002A | 02461 | 	mov	r2, 0x2a
0xCA27 | 0x1283        | 02462 | 	outp	r2, 0x3
0xCA28 | 0x0A80        | 02463 | 	outp	r1, 0x0
0xCA29 | 0x0BE8 0xC412 | 02464 | 	mov	r1, sxc__Z9PIDThreadPv
0xCA2B | 0x0A81        | 02465 | 	outp	r1, 0x1
0xCA2C | 0x0286        | 02466 | 	outp	r0, 0x6
0xCA2D | 0x0380        | 02467 | 	mov	r0, 0x0
0xCA2E | 0x33E6        | 02468 | 	jsr	r6, r6
       |               | 02469 | 
       |               | 02470 | //align
       |               | 02471 | @ = (@ + 1-1)  & -1
0xCA2F |               | 02472 | sxc___xinc_udiv:                        // @__xinc_udiv
       |               | 02473 | // BB#0:
0xCA2F | 0x7F01        | 02474 | 	add	sp, sp, 0x1
0xCA30 | 0xF7FF        | 02475 | 	st	r6, sp, 0xffff          // 1-byte Folded Spill
0xCA31 | 0x4A00        | 02476 | 	add	r1, r2, 0x0
0xCA32 | 0x5300        | 02477 | 	add	r2, r3, 0x0
       |               | 02478 | 	//APP
0xCA33 | 0x33EC 0x1816 | 02479 | 	jsr	r6, UnsignedDivide
       |               | 02480 | 	//NO_APP
0xCA35 | 0x4100        | 02481 | 	add	r0, r1, 0x0
0xCA36 | 0xB7FF        | 02482 | 	ld	r6, sp, 0xffff          // 1-byte Folded Reload
0xCA37 | 0x7FFF        | 02483 | 	sub	sp, sp, 0x1
0xCA38 | 0x33E6        | 02484 | 	jsr	r6, r6
       |               | 02485 | 
       |               | 02486 | //align
       |               | 02487 | @ = (@ + 1-1)  & -1
0xCA39 |               | 02488 | sxc___xinc_umod:                        // @__xinc_umod
       |               | 02489 | // BB#0:
0xCA39 | 0x7F01        | 02490 | 	add	sp, sp, 0x1
0xCA3A | 0xF7FF        | 02491 | 	st	r6, sp, 0xffff          // 1-byte Folded Spill
0xCA3B | 0x4A00        | 02492 | 	add	r1, r2, 0x0
0xCA3C | 0x5300        | 02493 | 	add	r2, r3, 0x0
       |               | 02494 | 	//APP
0xCA3D | 0x33EC 0x1816 | 02495 | 	jsr	r6, UnsignedDivide
       |               | 02496 | 	//NO_APP
0xCA3F | 0x4200        | 02497 | 	add	r0, r2, 0x0
0xCA40 | 0xB7FF        | 02498 | 	ld	r6, sp, 0xffff          // 1-byte Folded Reload
0xCA41 | 0x7FFF        | 02499 | 	sub	sp, sp, 0x1
0xCA42 | 0x33E6        | 02500 | 	jsr	r6, r6
       |               | 02501 | 
       |               | 02502 | //align
       |               | 02503 | @ = (@ + 1-1)  & -1
0xCA43 |               | 02504 | sxc_memset:                             // @memset
       |               | 02505 | // BB#0:
0xCA43 | 0x4C00        | 02506 | 	sub	r1, r4, 0x0
0xCA44 | 0x0805        | 02507 | 	bc	EQ, BB24_3
       |               | 02508 | // BB#1:
0xCA45 | 0x4200        | 02509 | 	add	r0, r2, 0x0
0xCA46 |               | 02510 | BB24_2:                                 // %.lr.ph
       |               | 02511 |                                         // =>This Inner Loop Header: Depth=1
0xCA46 | 0xD800        | 02512 | 	st	r3, r0, 0x0
0xCA47 | 0x4001        | 02513 | 	add	r0, r0, 0x1
0xCA48 | 0x64FF        | 02514 | 	add	r4, r4, 0xffff
       |               | 02515 | 	//cmp	r4, 0x0
0xCA49 | 0x28FC        | 02516 | 	bc	ZC, BB24_2
0xCA4A |               | 02517 | BB24_3:                                 // %._crit_edge
0xCA4A | 0x4200        | 02518 | 	add	r0, r2, 0x0
0xCA4B | 0x33E6        | 02519 | 	jsr	r6, r6
       |               | 02520 | 
       |               | 02521 | //align
       |               | 02522 | @ = (@ + 1-1)  & -1
0xCA4C |               | 02523 | sxc_memcpy:                             // @memcpy
       |               | 02524 | // BB#0:
0xCA4C | 0x0B5A        | 02525 | 	sub	r1, r2, r3
0xCA4D | 0x0809        | 02526 | 	bc	EQ, BB25_4
       |               | 02527 | // BB#1:
0xCA4E | 0x4C00        | 02528 | 	sub	r1, r4, 0x0
0xCA4F | 0x0807        | 02529 | 	bc	EQ, BB25_4
       |               | 02530 | // BB#2:
0xCA50 | 0x4200        | 02531 | 	add	r0, r2, 0x0
0xCA51 |               | 02532 | BB25_3:                                 // %.lr.ph.i
       |               | 02533 |                                         // =>This Inner Loop Header: Depth=1
0xCA51 | 0x8B00        | 02534 | 	ld	r1, r3, 0x0
0xCA52 | 0xC800        | 02535 | 	st	r1, r0, 0x0
0xCA53 | 0x5B01        | 02536 | 	add	r3, r3, 0x1
0xCA54 | 0x4001        | 02537 | 	add	r0, r0, 0x1
0xCA55 | 0x64FF        | 02538 | 	add	r4, r4, 0xffff
       |               | 02539 | 	//cmp	r4, 0x0
0xCA56 | 0x28FA        | 02540 | 	bc	ZC, BB25_3
0xCA57 |               | 02541 | BB25_4:                                 // %memcpy_base.exit
0xCA57 | 0x4200        | 02542 | 	add	r0, r2, 0x0
0xCA58 | 0x33E6        | 02543 | 	jsr	r6, r6
       |               | 02544 | 
       |               | 02545 | //align
       |               | 02546 | @ = (@ + 1-1)  & -1
0xCA59 |               | 02547 | sxc_memmove:                            // @memmove
       |               | 02548 | // BB#0:
0xCA59 | 0x0381        | 02549 | 	mov	r0, 0x1
0xCA5A | 0x2B81        | 02550 | 	mov	r5, 0x1
0xCA5B | 0x4C00        | 02551 | 	sub	r1, r4, 0x0
0xCA5C | 0x0801        | 02552 | 	bc	EQ, @ + 1 + 0x1
0xCA5D | 0x2B80        | 02553 | 	mov	r5, 0x0 //Select--False
0xCA5E | 0x0B5A        | 02554 | 	sub	r1, r2, r3
0xCA5F | 0x0801        | 02555 | 	bc	EQ, @ + 1 + 0x1
0xCA60 | 0x0380        | 02556 | 	mov	r0, 0x0 //Select--False
0xCA61 | 0x05A8        | 02557 | 	ior	r0, r0, r5
0xCA62 | 0x0B53        | 02558 | 	sub	r1, r3, r2
0xCA63 | 0x200D        | 02559 | 	bc	UGE, BB26_1
       |               | 02560 | // BB#4:
0xCA64 | 0x03C8 0x0001 | 02561 | 	and	r0, r0, 0x1
       |               | 02562 | 	//cmp	r0, 0x0
0xCA66 | 0x2814        | 02563 | 	bc	ZC, BB26_7
       |               | 02564 | // BB#5:                                // %.lr.ph23.i.preheader
0xCA67 | 0x0381        | 02565 | 	mov	r0, 0x1
0xCA68 | 0x0360        | 02566 | 	sub	r0, r0, r4
0xCA69 |               | 02567 | BB26_6:                                 // %.lr.ph23.i
       |               | 02568 |                                         // =>This Inner Loop Header: Depth=1
0xCA69 | 0x0B42        | 02569 | 	sub	r1, r2, r0
0xCA6A | 0x2343        | 02570 | 	sub	r4, r3, r0
0xCA6B | 0xA400        | 02571 | 	ld	r4, r4, 0x0
0xCA6C | 0xE100        | 02572 | 	st	r4, r1, 0x0
0xCA6D | 0x4001        | 02573 | 	add	r0, r0, 0x1
0xCA6E | 0x48FF        | 02574 | 	sub	r1, r0, 0x1
0xCA6F | 0x28F9        | 02575 | 	bc	NE, BB26_6
0xCA70 | 0x010A        | 02576 | 	bra	BB26_7
0xCA71 |               | 02577 | BB26_1:
0xCA71 | 0x03C8 0x0001 | 02578 | 	and	r0, r0, 0x1
       |               | 02579 | 	//cmp	r0, 0x0
0xCA73 | 0x2807        | 02580 | 	bc	ZC, BB26_7
       |               | 02581 | // BB#2:
0xCA74 | 0x4200        | 02582 | 	add	r0, r2, 0x0
0xCA75 |               | 02583 | BB26_3:                                 // %.lr.ph.i
       |               | 02584 |                                         // =>This Inner Loop Header: Depth=1
0xCA75 | 0x8B00        | 02585 | 	ld	r1, r3, 0x0
0xCA76 | 0xC800        | 02586 | 	st	r1, r0, 0x0
0xCA77 | 0x5B01        | 02587 | 	add	r3, r3, 0x1
0xCA78 | 0x4001        | 02588 | 	add	r0, r0, 0x1
0xCA79 | 0x64FF        | 02589 | 	add	r4, r4, 0xffff
       |               | 02590 | 	//cmp	r4, 0x0
0xCA7A | 0x28FA        | 02591 | 	bc	ZC, BB26_3
0xCA7B |               | 02592 | BB26_7:                                 // %memcpy_base.exit
0xCA7B | 0x4200        | 02593 | 	add	r0, r2, 0x0
0xCA7C | 0x33E6        | 02594 | 	jsr	r6, r6
       |               | 02595 | 

                                 //
                                 // "ReflowOvenController.main" -> "code.asm"
//============================== //==============================================================
                                 // "ReflowOvenController.main"
                                 //

       |               | 00010 | @ = (@ + 0x0800-1) & -0x0800
       |               | 00011 | #include "C:/Program Files/SXC/include/sxc-art0\XInC2_Thread_Definitions.asm"

                                 //
                                 // "ReflowOvenController.main"
//============================== //==============================================================
                                 // "ReflowOvenController.main" -> "XInC2_Thread_Definitions.asm"
                                 //

       |               | 00001 | #ifndef DEFAULT_STACK_SIZE
       |      = 0x0040 | 00002 | #define DEFAULT_STACK_SIZE 64
       |               | 00003 | #endif
       |               | 00004 | 
       |               | 00005 | #ifndef THREAD0_STACK_SIZE
       |      = 0x0040 | 00006 | #define THREAD0_STACK_SIZE DEFAULT_STACK_SIZE
       |               | 00007 | #endif
       |               | 00008 | 
       |               | 00009 | #ifndef THREAD1_STACK_SIZE
       |      = 0x0040 | 00010 | #define THREAD1_STACK_SIZE DEFAULT_STACK_SIZE
       |               | 00011 | #endif
       |               | 00012 | 
       |               | 00013 | #ifndef THREAD2_STACK_SIZE
       |      = 0x0040 | 00014 | #define THREAD2_STACK_SIZE DEFAULT_STACK_SIZE
       |               | 00015 | #endif
       |               | 00016 | 
       |               | 00017 | #ifndef THREAD3_STACK_SIZE
       |      = 0x0040 | 00018 | #define THREAD3_STACK_SIZE DEFAULT_STACK_SIZE
       |               | 00019 | #endif
       |               | 00020 | 
       |               | 00021 | #ifndef THREAD4_STACK_SIZE
       |      = 0x0040 | 00022 | #define THREAD4_STACK_SIZE DEFAULT_STACK_SIZE
       |               | 00023 | #endif
       |               | 00024 | 
       |               | 00025 | #ifndef THREAD5_STACK_SIZE
       |      = 0x0040 | 00026 | #define THREAD5_STACK_SIZE DEFAULT_STACK_SIZE
       |               | 00027 | #endif
       |               | 00028 | 
       |               | 00029 | #ifndef THREAD6_STACK_SIZE
       |      = 0x0040 | 00030 | #define THREAD6_STACK_SIZE DEFAULT_STACK_SIZE
       |               | 00031 | #endif
       |               | 00032 | 
       |               | 00033 | #ifndef THREAD7_STACK_SIZE
       |      = 0x0040 | 00034 | #define THREAD7_STACK_SIZE DEFAULT_STACK_SIZE
       |               | 00035 | #endif
       |               | 00036 | 
0xD000 |               | 00037 | THREAD0_STACK: @ = @ + THREAD0_STACK_SIZE
0xD040 |               | 00038 | THREAD1_STACK: @ = @ + THREAD1_STACK_SIZE
0xD080 |               | 00039 | THREAD2_STACK: @ = @ + THREAD2_STACK_SIZE
0xD0C0 |               | 00040 | THREAD3_STACK: @ = @ + THREAD3_STACK_SIZE
0xD100 |               | 00041 | THREAD4_STACK: @ = @ + THREAD4_STACK_SIZE
0xD140 |               | 00042 | THREAD5_STACK: @ = @ + THREAD5_STACK_SIZE
0xD180 |               | 00043 | THREAD6_STACK: @ = @ + THREAD6_STACK_SIZE
0xD1C0 |               | 00044 | THREAD7_STACK: @ = @ + THREAD7_STACK_SIZE
       |               | 00045 | 
0xD200 |               | 00046 | THREAD_STACK_LOOKUP:
0xD200 | 0xD000        | 00047 |   THREAD0_STACK
0xD201 | 0xD040        | 00048 |   THREAD1_STACK
0xD202 | 0xD080        | 00049 |   THREAD2_STACK
0xD203 | 0xD0C0        | 00050 |   THREAD3_STACK
0xD204 | 0xD100        | 00051 |   THREAD4_STACK
0xD205 | 0xD140        | 00052 |   THREAD5_STACK
0xD206 | 0xD180        | 00053 |   THREAD6_STACK
0xD207 | 0xD1C0        | 00054 |   THREAD7_STACK
       |               | 00055 | 
0xD208 | 0x00FE        | 00056 | thrds_vector: 0xFE //on program init, only thread0 is running

                                 //
                                 // "ReflowOvenController.main" -> "XInC2_Thread_Definitions.asm"
//============================== //==============================================================
                                 // "ReflowOvenController.main"
                                 //

       |               | 00012 | #include "C:/Users/cchin/CapstoneFirmware/Xinc2/ReflowOvenController/build\data.asm"

                                 //
                                 // "ReflowOvenController.main"
//============================== //==============================================================
                                 // "ReflowOvenController.main" -> "data.asm"
                                 //

       |               | 00001 | //	.section	.rdata,"r"
0xD209 |               | 00002 | JTI1_0:
0xD209 | 0xC045        | 00003 | 		BB1_2
0xD20A | 0xC047        | 00004 | 		BB1_3
0xD20B | 0xC049        | 00005 | 		BB1_4
0xD20C | 0xC04B        | 00006 | 		BB1_5
0xD20D | 0xC04D        | 00007 | 		BB1_6
0xD20E | 0xC04F        | 00008 | 		BB1_7
0xD20F | 0xC051        | 00009 | 		BB1_8
0xD210 | 0xC053        | 00010 | 		BB1_9
0xD211 | 0xC055        | 00011 | 		BB1_10
0xD212 | 0xC057        | 00012 | 		BB1_11
       |               | 00013 | 
       |               | 00014 | //	.section	.rdata,"r"
0xD213 |               | 00015 | JTI17_0:
0xD213 | 0xC3EB        | 00016 | 		BB17_4
0xD214 | 0xC3F0        | 00017 | 		BB17_7
0xD215 | 0xC3F5        | 00018 | 		BB17_9
0xD216 | 0xC3FA        | 00019 | 		BB17_11
       |               | 00020 | 
       |               | 00021 | //	.section	.rdata,"r"
0xD217 |               | 00022 | JTI20_0:
0xD217 | 0xC538        | 00023 | 		BB20_3
0xD218 | 0xC5BF        | 00024 | 		BB20_43
0xD219 | 0xC72E        | 00025 | 		BB20_40
0xD21A | 0xC79B        | 00026 | 		BB20_64
0xD21B | 0xC803        | 00027 | 		BB20_67
       |               | 00028 | 
       |               | 00029 | //	.section	//.data,"w"
0xD21C |               | 00030 | sxc_Ascii_1:                            // @Ascii_1
       |               | 00031 | 	@ = @ + 5
0xD221 | 0x0000        | 00032 | 		0                       // 0x0
0xD222 | 0x0000        | 00033 | 		0                       // 0x0
0xD223 | 0x004F        | 00034 | 		79                      // 0x4f
0xD224 | 0x0000        | 00035 | 		0                       // 0x0
0xD225 | 0x0000        | 00036 | 		0                       // 0x0
0xD226 | 0x0000        | 00037 | 		0                       // 0x0
0xD227 | 0x0007        | 00038 | 		7                       // 0x7
0xD228 | 0x0000        | 00039 | 		0                       // 0x0
0xD229 | 0x0007        | 00040 | 		7                       // 0x7
0xD22A | 0x0000        | 00041 | 		0                       // 0x0
0xD22B | 0x0014        | 00042 | 		20                      // 0x14
0xD22C | 0x007F        | 00043 | 		127                     // 0x7f
0xD22D | 0x0014        | 00044 | 		20                      // 0x14
0xD22E | 0x007F        | 00045 | 		127                     // 0x7f
0xD22F | 0x0014        | 00046 | 		20                      // 0x14
0xD230 | 0x0024        | 00047 | 		36                      // 0x24
0xD231 | 0x002A        | 00048 | 		42                      // 0x2a
0xD232 | 0x007F        | 00049 | 		127                     // 0x7f
0xD233 | 0x002A        | 00050 | 		42                      // 0x2a
0xD234 | 0x0012        | 00051 | 		18                      // 0x12
0xD235 | 0x0023        | 00052 | 		35                      // 0x23
0xD236 | 0x0013        | 00053 | 		19                      // 0x13
0xD237 | 0x0008        | 00054 | 		8                       // 0x8
0xD238 | 0x0064        | 00055 | 		100                     // 0x64
0xD239 | 0x0062        | 00056 | 		98                      // 0x62
0xD23A | 0x0036        | 00057 | 		54                      // 0x36
0xD23B | 0x0049        | 00058 | 		73                      // 0x49
0xD23C | 0x0055        | 00059 | 		85                      // 0x55
0xD23D | 0x0022        | 00060 | 		34                      // 0x22
0xD23E | 0x0050        | 00061 | 		80                      // 0x50
0xD23F | 0x0000        | 00062 | 		0                       // 0x0
0xD240 | 0x0005        | 00063 | 		5                       // 0x5
0xD241 | 0x0003        | 00064 | 		3                       // 0x3
0xD242 | 0x0000        | 00065 | 		0                       // 0x0
0xD243 | 0x0000        | 00066 | 		0                       // 0x0
0xD244 | 0x0000        | 00067 | 		0                       // 0x0
0xD245 | 0x001C        | 00068 | 		28                      // 0x1c
0xD246 | 0x0022        | 00069 | 		34                      // 0x22
0xD247 | 0x0041        | 00070 | 		65                      // 0x41
0xD248 | 0x0000        | 00071 | 		0                       // 0x0
0xD249 | 0x0000        | 00072 | 		0                       // 0x0
0xD24A | 0x0041        | 00073 | 		65                      // 0x41
0xD24B | 0x0022        | 00074 | 		34                      // 0x22
0xD24C | 0x001C        | 00075 | 		28                      // 0x1c
0xD24D | 0x0000        | 00076 | 		0                       // 0x0
0xD24E | 0x0014        | 00077 | 		20                      // 0x14
0xD24F | 0x0008        | 00078 | 		8                       // 0x8
0xD250 | 0x003E        | 00079 | 		62                      // 0x3e
0xD251 | 0x0008        | 00080 | 		8                       // 0x8
0xD252 | 0x0014        | 00081 | 		20                      // 0x14
0xD253 | 0x0008        | 00082 | 		8                       // 0x8
0xD254 | 0x0008        | 00083 | 		8                       // 0x8
0xD255 | 0x003E        | 00084 | 		62                      // 0x3e
0xD256 | 0x0008        | 00085 | 		8                       // 0x8
0xD257 | 0x0008        | 00086 | 		8                       // 0x8
0xD258 | 0x0000        | 00087 | 		0                       // 0x0
0xD259 | 0x0050        | 00088 | 		80                      // 0x50
0xD25A | 0x0030        | 00089 | 		48                      // 0x30
0xD25B | 0x0000        | 00090 | 		0                       // 0x0
0xD25C | 0x0000        | 00091 | 		0                       // 0x0
0xD25D | 0x0008        | 00092 | 		8                       // 0x8
0xD25E | 0x0008        | 00093 | 		8                       // 0x8
0xD25F | 0x0008        | 00094 | 		8                       // 0x8
0xD260 | 0x0008        | 00095 | 		8                       // 0x8
0xD261 | 0x0008        | 00096 | 		8                       // 0x8
0xD262 | 0x0000        | 00097 | 		0                       // 0x0
0xD263 | 0x0060        | 00098 | 		96                      // 0x60
0xD264 | 0x0060        | 00099 | 		96                      // 0x60
0xD265 | 0x0000        | 00100 | 		0                       // 0x0
0xD266 | 0x0000        | 00101 | 		0                       // 0x0
0xD267 | 0x0020        | 00102 | 		32                      // 0x20
0xD268 | 0x0010        | 00103 | 		16                      // 0x10
0xD269 | 0x0008        | 00104 | 		8                       // 0x8
0xD26A | 0x0004        | 00105 | 		4                       // 0x4
0xD26B | 0x0002        | 00106 | 		2                       // 0x2
0xD26C | 0x003E        | 00107 | 		62                      // 0x3e
0xD26D | 0x0051        | 00108 | 		81                      // 0x51
0xD26E | 0x0049        | 00109 | 		73                      // 0x49
0xD26F | 0x0045        | 00110 | 		69                      // 0x45
0xD270 | 0x003E        | 00111 | 		62                      // 0x3e
0xD271 | 0x0000        | 00112 | 		0                       // 0x0
0xD272 | 0x0042        | 00113 | 		66                      // 0x42
0xD273 | 0x007F        | 00114 | 		127                     // 0x7f
0xD274 | 0x0040        | 00115 | 		64                      // 0x40
0xD275 | 0x0000        | 00116 | 		0                       // 0x0
0xD276 | 0x0042        | 00117 | 		66                      // 0x42
0xD277 | 0x0061        | 00118 | 		97                      // 0x61
0xD278 | 0x0051        | 00119 | 		81                      // 0x51
0xD279 | 0x0049        | 00120 | 		73                      // 0x49
0xD27A | 0x0046        | 00121 | 		70                      // 0x46
0xD27B | 0x0021        | 00122 | 		33                      // 0x21
0xD27C | 0x0041        | 00123 | 		65                      // 0x41
0xD27D | 0x0045        | 00124 | 		69                      // 0x45
0xD27E | 0x004B        | 00125 | 		75                      // 0x4b
0xD27F | 0x0031        | 00126 | 		49                      // 0x31
0xD280 | 0x0018        | 00127 | 		24                      // 0x18
0xD281 | 0x0014        | 00128 | 		20                      // 0x14
0xD282 | 0x0012        | 00129 | 		18                      // 0x12
0xD283 | 0x007F        | 00130 | 		127                     // 0x7f
0xD284 | 0x0010        | 00131 | 		16                      // 0x10
0xD285 | 0x0027        | 00132 | 		39                      // 0x27
0xD286 | 0x0045        | 00133 | 		69                      // 0x45
0xD287 | 0x0045        | 00134 | 		69                      // 0x45
0xD288 | 0x0045        | 00135 | 		69                      // 0x45
0xD289 | 0x0039        | 00136 | 		57                      // 0x39
0xD28A | 0x003C        | 00137 | 		60                      // 0x3c
0xD28B | 0x004A        | 00138 | 		74                      // 0x4a
0xD28C | 0x0049        | 00139 | 		73                      // 0x49
0xD28D | 0x0049        | 00140 | 		73                      // 0x49
0xD28E | 0x0030        | 00141 | 		48                      // 0x30
0xD28F | 0x0001        | 00142 | 		1                       // 0x1
0xD290 | 0x0071        | 00143 | 		113                     // 0x71
0xD291 | 0x0009        | 00144 | 		9                       // 0x9
0xD292 | 0x0005        | 00145 | 		5                       // 0x5
0xD293 | 0x0003        | 00146 | 		3                       // 0x3
0xD294 | 0x0036        | 00147 | 		54                      // 0x36
0xD295 | 0x0049        | 00148 | 		73                      // 0x49
0xD296 | 0x0049        | 00149 | 		73                      // 0x49
0xD297 | 0x0049        | 00150 | 		73                      // 0x49
0xD298 | 0x0036        | 00151 | 		54                      // 0x36
0xD299 | 0x0006        | 00152 | 		6                       // 0x6
0xD29A | 0x0049        | 00153 | 		73                      // 0x49
0xD29B | 0x0049        | 00154 | 		73                      // 0x49
0xD29C | 0x0029        | 00155 | 		41                      // 0x29
0xD29D | 0x001E        | 00156 | 		30                      // 0x1e
0xD29E | 0x0000        | 00157 | 		0                       // 0x0
0xD29F | 0x0036        | 00158 | 		54                      // 0x36
0xD2A0 | 0x0036        | 00159 | 		54                      // 0x36
0xD2A1 | 0x0000        | 00160 | 		0                       // 0x0
0xD2A2 | 0x0000        | 00161 | 		0                       // 0x0
0xD2A3 | 0x0000        | 00162 | 		0                       // 0x0
0xD2A4 | 0x0056        | 00163 | 		86                      // 0x56
0xD2A5 | 0x0036        | 00164 | 		54                      // 0x36
0xD2A6 | 0x0000        | 00165 | 		0                       // 0x0
0xD2A7 | 0x0000        | 00166 | 		0                       // 0x0
0xD2A8 | 0x0008        | 00167 | 		8                       // 0x8
0xD2A9 | 0x0014        | 00168 | 		20                      // 0x14
0xD2AA | 0x0022        | 00169 | 		34                      // 0x22
0xD2AB | 0x0041        | 00170 | 		65                      // 0x41
0xD2AC | 0x0000        | 00171 | 		0                       // 0x0
0xD2AD | 0x0014        | 00172 | 		20                      // 0x14
0xD2AE | 0x0014        | 00173 | 		20                      // 0x14
0xD2AF | 0x0014        | 00174 | 		20                      // 0x14
0xD2B0 | 0x0014        | 00175 | 		20                      // 0x14
0xD2B1 | 0x0014        | 00176 | 		20                      // 0x14
0xD2B2 | 0x0000        | 00177 | 		0                       // 0x0
0xD2B3 | 0x0041        | 00178 | 		65                      // 0x41
0xD2B4 | 0x0022        | 00179 | 		34                      // 0x22
0xD2B5 | 0x0014        | 00180 | 		20                      // 0x14
0xD2B6 | 0x0008        | 00181 | 		8                       // 0x8
0xD2B7 | 0x0002        | 00182 | 		2                       // 0x2
0xD2B8 | 0x0001        | 00183 | 		1                       // 0x1
0xD2B9 | 0x0051        | 00184 | 		81                      // 0x51
0xD2BA | 0x0009        | 00185 | 		9                       // 0x9
0xD2BB | 0x0006        | 00186 | 		6                       // 0x6
0xD2BC | 0x0032        | 00187 | 		50                      // 0x32
0xD2BD | 0x0049        | 00188 | 		73                      // 0x49
0xD2BE | 0x0079        | 00189 | 		121                     // 0x79
0xD2BF | 0x0041        | 00190 | 		65                      // 0x41
0xD2C0 | 0x003E        | 00191 | 		62                      // 0x3e
0xD2C1 | 0x007E        | 00192 | 		126                     // 0x7e
0xD2C2 | 0x0011        | 00193 | 		17                      // 0x11
0xD2C3 | 0x0011        | 00194 | 		17                      // 0x11
0xD2C4 | 0x0011        | 00195 | 		17                      // 0x11
0xD2C5 | 0x007E        | 00196 | 		126                     // 0x7e
0xD2C6 | 0x007F        | 00197 | 		127                     // 0x7f
0xD2C7 | 0x0049        | 00198 | 		73                      // 0x49
0xD2C8 | 0x0049        | 00199 | 		73                      // 0x49
0xD2C9 | 0x0049        | 00200 | 		73                      // 0x49
0xD2CA | 0x0036        | 00201 | 		54                      // 0x36
0xD2CB | 0x003E        | 00202 | 		62                      // 0x3e
0xD2CC | 0x0041        | 00203 | 		65                      // 0x41
0xD2CD | 0x0041        | 00204 | 		65                      // 0x41
0xD2CE | 0x0041        | 00205 | 		65                      // 0x41
0xD2CF | 0x0022        | 00206 | 		34                      // 0x22
0xD2D0 | 0x007F        | 00207 | 		127                     // 0x7f
0xD2D1 | 0x0041        | 00208 | 		65                      // 0x41
0xD2D2 | 0x0041        | 00209 | 		65                      // 0x41
0xD2D3 | 0x0022        | 00210 | 		34                      // 0x22
0xD2D4 | 0x001C        | 00211 | 		28                      // 0x1c
0xD2D5 | 0x007F        | 00212 | 		127                     // 0x7f
0xD2D6 | 0x0049        | 00213 | 		73                      // 0x49
0xD2D7 | 0x0049        | 00214 | 		73                      // 0x49
0xD2D8 | 0x0049        | 00215 | 		73                      // 0x49
0xD2D9 | 0x0041        | 00216 | 		65                      // 0x41
0xD2DA | 0x007F        | 00217 | 		127                     // 0x7f
0xD2DB | 0x0009        | 00218 | 		9                       // 0x9
0xD2DC | 0x0009        | 00219 | 		9                       // 0x9
0xD2DD | 0x0009        | 00220 | 		9                       // 0x9
0xD2DE | 0x0001        | 00221 | 		1                       // 0x1
0xD2DF | 0x003E        | 00222 | 		62                      // 0x3e
0xD2E0 | 0x0041        | 00223 | 		65                      // 0x41
0xD2E1 | 0x0049        | 00224 | 		73                      // 0x49
0xD2E2 | 0x0049        | 00225 | 		73                      // 0x49
0xD2E3 | 0x007A        | 00226 | 		122                     // 0x7a
0xD2E4 | 0x007F        | 00227 | 		127                     // 0x7f
0xD2E5 | 0x0008        | 00228 | 		8                       // 0x8
0xD2E6 | 0x0008        | 00229 | 		8                       // 0x8
0xD2E7 | 0x0008        | 00230 | 		8                       // 0x8
0xD2E8 | 0x007F        | 00231 | 		127                     // 0x7f
0xD2E9 | 0x0000        | 00232 | 		0                       // 0x0
0xD2EA | 0x0041        | 00233 | 		65                      // 0x41
0xD2EB | 0x007F        | 00234 | 		127                     // 0x7f
0xD2EC | 0x0041        | 00235 | 		65                      // 0x41
0xD2ED | 0x0000        | 00236 | 		0                       // 0x0
0xD2EE | 0x0020        | 00237 | 		32                      // 0x20
0xD2EF | 0x0040        | 00238 | 		64                      // 0x40
0xD2F0 | 0x0041        | 00239 | 		65                      // 0x41
0xD2F1 | 0x003F        | 00240 | 		63                      // 0x3f
0xD2F2 | 0x0001        | 00241 | 		1                       // 0x1
0xD2F3 | 0x007F        | 00242 | 		127                     // 0x7f
0xD2F4 | 0x0008        | 00243 | 		8                       // 0x8
0xD2F5 | 0x0014        | 00244 | 		20                      // 0x14
0xD2F6 | 0x0022        | 00245 | 		34                      // 0x22
0xD2F7 | 0x0041        | 00246 | 		65                      // 0x41
0xD2F8 | 0x007F        | 00247 | 		127                     // 0x7f
0xD2F9 | 0x0040        | 00248 | 		64                      // 0x40
0xD2FA | 0x0040        | 00249 | 		64                      // 0x40
0xD2FB | 0x0040        | 00250 | 		64                      // 0x40
0xD2FC | 0x0040        | 00251 | 		64                      // 0x40
0xD2FD | 0x007F        | 00252 | 		127                     // 0x7f
0xD2FE | 0x0002        | 00253 | 		2                       // 0x2
0xD2FF | 0x000C        | 00254 | 		12                      // 0xc
0xD300 | 0x0002        | 00255 | 		2                       // 0x2
0xD301 | 0x007F        | 00256 | 		127                     // 0x7f
0xD302 | 0x007F        | 00257 | 		127                     // 0x7f
0xD303 | 0x0004        | 00258 | 		4                       // 0x4
0xD304 | 0x0008        | 00259 | 		8                       // 0x8
0xD305 | 0x0010        | 00260 | 		16                      // 0x10
0xD306 | 0x007F        | 00261 | 		127                     // 0x7f
0xD307 | 0x003E        | 00262 | 		62                      // 0x3e
0xD308 | 0x0041        | 00263 | 		65                      // 0x41
0xD309 | 0x0041        | 00264 | 		65                      // 0x41
0xD30A | 0x0041        | 00265 | 		65                      // 0x41
0xD30B | 0x003E        | 00266 | 		62                      // 0x3e
0xD30C | 0x007F        | 00267 | 		127                     // 0x7f
0xD30D | 0x0009        | 00268 | 		9                       // 0x9
0xD30E | 0x0009        | 00269 | 		9                       // 0x9
0xD30F | 0x0009        | 00270 | 		9                       // 0x9
0xD310 | 0x0006        | 00271 | 		6                       // 0x6
0xD311 | 0x003E        | 00272 | 		62                      // 0x3e
0xD312 | 0x0041        | 00273 | 		65                      // 0x41
0xD313 | 0x0051        | 00274 | 		81                      // 0x51
0xD314 | 0x0021        | 00275 | 		33                      // 0x21
0xD315 | 0x005E        | 00276 | 		94                      // 0x5e
0xD316 | 0x007F        | 00277 | 		127                     // 0x7f
0xD317 | 0x0009        | 00278 | 		9                       // 0x9
0xD318 | 0x0019        | 00279 | 		25                      // 0x19
0xD319 | 0x0029        | 00280 | 		41                      // 0x29
0xD31A | 0x0046        | 00281 | 		70                      // 0x46
0xD31B | 0x0046        | 00282 | 		70                      // 0x46
0xD31C | 0x0049        | 00283 | 		73                      // 0x49
0xD31D | 0x0049        | 00284 | 		73                      // 0x49
0xD31E | 0x0049        | 00285 | 		73                      // 0x49
0xD31F | 0x0031        | 00286 | 		49                      // 0x31
0xD320 | 0x0001        | 00287 | 		1                       // 0x1
0xD321 | 0x0001        | 00288 | 		1                       // 0x1
0xD322 | 0x007F        | 00289 | 		127                     // 0x7f
0xD323 | 0x0001        | 00290 | 		1                       // 0x1
0xD324 | 0x0001        | 00291 | 		1                       // 0x1
0xD325 | 0x003F        | 00292 | 		63                      // 0x3f
0xD326 | 0x0040        | 00293 | 		64                      // 0x40
0xD327 | 0x0040        | 00294 | 		64                      // 0x40
0xD328 | 0x0040        | 00295 | 		64                      // 0x40
0xD329 | 0x003F        | 00296 | 		63                      // 0x3f
0xD32A | 0x001F        | 00297 | 		31                      // 0x1f
0xD32B | 0x0020        | 00298 | 		32                      // 0x20
0xD32C | 0x0040        | 00299 | 		64                      // 0x40
0xD32D | 0x0020        | 00300 | 		32                      // 0x20
0xD32E | 0x001F        | 00301 | 		31                      // 0x1f
0xD32F | 0x003F        | 00302 | 		63                      // 0x3f
0xD330 | 0x0040        | 00303 | 		64                      // 0x40
0xD331 | 0x0038        | 00304 | 		56                      // 0x38
0xD332 | 0x0040        | 00305 | 		64                      // 0x40
0xD333 | 0x003F        | 00306 | 		63                      // 0x3f
0xD334 | 0x0063        | 00307 | 		99                      // 0x63
0xD335 | 0x0014        | 00308 | 		20                      // 0x14
0xD336 | 0x0008        | 00309 | 		8                       // 0x8
0xD337 | 0x0014        | 00310 | 		20                      // 0x14
0xD338 | 0x0063        | 00311 | 		99                      // 0x63
0xD339 | 0x0007        | 00312 | 		7                       // 0x7
0xD33A | 0x0008        | 00313 | 		8                       // 0x8
0xD33B | 0x0070        | 00314 | 		112                     // 0x70
0xD33C | 0x0008        | 00315 | 		8                       // 0x8
0xD33D | 0x0007        | 00316 | 		7                       // 0x7
0xD33E | 0x0061        | 00317 | 		97                      // 0x61
0xD33F | 0x0051        | 00318 | 		81                      // 0x51
0xD340 | 0x0049        | 00319 | 		73                      // 0x49
0xD341 | 0x0045        | 00320 | 		69                      // 0x45
0xD342 | 0x0043        | 00321 | 		67                      // 0x43
0xD343 | 0x0000        | 00322 | 		0                       // 0x0
0xD344 | 0x007F        | 00323 | 		127                     // 0x7f
0xD345 | 0x0041        | 00324 | 		65                      // 0x41
0xD346 | 0x0041        | 00325 | 		65                      // 0x41
0xD347 | 0x0000        | 00326 | 		0                       // 0x0
0xD348 | 0x0002        | 00327 | 		2                       // 0x2
0xD349 | 0x0004        | 00328 | 		4                       // 0x4
0xD34A | 0x0008        | 00329 | 		8                       // 0x8
0xD34B | 0x0010        | 00330 | 		16                      // 0x10
0xD34C | 0x0020        | 00331 | 		32                      // 0x20
0xD34D | 0x0000        | 00332 | 		0                       // 0x0
0xD34E | 0x0041        | 00333 | 		65                      // 0x41
0xD34F | 0x0041        | 00334 | 		65                      // 0x41
0xD350 | 0x007F        | 00335 | 		127                     // 0x7f
0xD351 | 0x0000        | 00336 | 		0                       // 0x0
0xD352 | 0x0004        | 00337 | 		4                       // 0x4
0xD353 | 0x0002        | 00338 | 		2                       // 0x2
0xD354 | 0x0001        | 00339 | 		1                       // 0x1
0xD355 | 0x0002        | 00340 | 		2                       // 0x2
0xD356 | 0x0004        | 00341 | 		4                       // 0x4
0xD357 | 0x0040        | 00342 | 		64                      // 0x40
0xD358 | 0x0040        | 00343 | 		64                      // 0x40
0xD359 | 0x0040        | 00344 | 		64                      // 0x40
0xD35A | 0x0040        | 00345 | 		64                      // 0x40
0xD35B | 0x0040        | 00346 | 		64                      // 0x40
0xD35C | 0x0001        | 00347 | 		1                       // 0x1
0xD35D | 0x0002        | 00348 | 		2                       // 0x2
0xD35E | 0x0004        | 00349 | 		4                       // 0x4
0xD35F | 0x0000        | 00350 | 		0                       // 0x0
0xD360 | 0x0000        | 00351 | 		0                       // 0x0
0xD361 | 0x0020        | 00352 | 		32                      // 0x20
0xD362 | 0x0054        | 00353 | 		84                      // 0x54
0xD363 | 0x0054        | 00354 | 		84                      // 0x54
0xD364 | 0x0054        | 00355 | 		84                      // 0x54
0xD365 | 0x0078        | 00356 | 		120                     // 0x78
0xD366 | 0x007F        | 00357 | 		127                     // 0x7f
0xD367 | 0x0048        | 00358 | 		72                      // 0x48
0xD368 | 0x0044        | 00359 | 		68                      // 0x44
0xD369 | 0x0044        | 00360 | 		68                      // 0x44
0xD36A | 0x0038        | 00361 | 		56                      // 0x38
0xD36B | 0x0038        | 00362 | 		56                      // 0x38
0xD36C | 0x0044        | 00363 | 		68                      // 0x44
0xD36D | 0x0044        | 00364 | 		68                      // 0x44
0xD36E | 0x0044        | 00365 | 		68                      // 0x44
0xD36F | 0x0020        | 00366 | 		32                      // 0x20
0xD370 | 0x0038        | 00367 | 		56                      // 0x38
0xD371 | 0x0044        | 00368 | 		68                      // 0x44
0xD372 | 0x0044        | 00369 | 		68                      // 0x44
0xD373 | 0x0048        | 00370 | 		72                      // 0x48
0xD374 | 0x007F        | 00371 | 		127                     // 0x7f
0xD375 | 0x0038        | 00372 | 		56                      // 0x38
0xD376 | 0x0054        | 00373 | 		84                      // 0x54
0xD377 | 0x0054        | 00374 | 		84                      // 0x54
0xD378 | 0x0054        | 00375 | 		84                      // 0x54
0xD379 | 0x0018        | 00376 | 		24                      // 0x18
0xD37A | 0x0008        | 00377 | 		8                       // 0x8
0xD37B | 0x007E        | 00378 | 		126                     // 0x7e
0xD37C | 0x0009        | 00379 | 		9                       // 0x9
0xD37D | 0x0001        | 00380 | 		1                       // 0x1
0xD37E | 0x0002        | 00381 | 		2                       // 0x2
0xD37F | 0x0006        | 00382 | 		6                       // 0x6
0xD380 | 0x0049        | 00383 | 		73                      // 0x49
0xD381 | 0x0049        | 00384 | 		73                      // 0x49
0xD382 | 0x0049        | 00385 | 		73                      // 0x49
0xD383 | 0x003F        | 00386 | 		63                      // 0x3f
0xD384 | 0x007F        | 00387 | 		127                     // 0x7f
0xD385 | 0x0008        | 00388 | 		8                       // 0x8
0xD386 | 0x0004        | 00389 | 		4                       // 0x4
0xD387 | 0x0004        | 00390 | 		4                       // 0x4
0xD388 | 0x0078        | 00391 | 		120                     // 0x78
0xD389 | 0x0000        | 00392 | 		0                       // 0x0
0xD38A | 0x0044        | 00393 | 		68                      // 0x44
0xD38B | 0x007D        | 00394 | 		125                     // 0x7d
0xD38C | 0x0040        | 00395 | 		64                      // 0x40
0xD38D | 0x0000        | 00396 | 		0                       // 0x0
0xD38E | 0x0020        | 00397 | 		32                      // 0x20
0xD38F | 0x0040        | 00398 | 		64                      // 0x40
0xD390 | 0x0044        | 00399 | 		68                      // 0x44
0xD391 | 0x003D        | 00400 | 		61                      // 0x3d
0xD392 | 0x0000        | 00401 | 		0                       // 0x0
0xD393 | 0x007F        | 00402 | 		127                     // 0x7f
0xD394 | 0x0010        | 00403 | 		16                      // 0x10
0xD395 | 0x0028        | 00404 | 		40                      // 0x28
0xD396 | 0x0044        | 00405 | 		68                      // 0x44
0xD397 | 0x0000        | 00406 | 		0                       // 0x0
0xD398 | 0x0000        | 00407 | 		0                       // 0x0
0xD399 | 0x0041        | 00408 | 		65                      // 0x41
0xD39A | 0x007F        | 00409 | 		127                     // 0x7f
0xD39B | 0x0040        | 00410 | 		64                      // 0x40
0xD39C | 0x0000        | 00411 | 		0                       // 0x0
0xD39D | 0x007C        | 00412 | 		124                     // 0x7c
0xD39E | 0x0004        | 00413 | 		4                       // 0x4
0xD39F | 0x0018        | 00414 | 		24                      // 0x18
0xD3A0 | 0x0004        | 00415 | 		4                       // 0x4
0xD3A1 | 0x007C        | 00416 | 		124                     // 0x7c
0xD3A2 | 0x007C        | 00417 | 		124                     // 0x7c
0xD3A3 | 0x0008        | 00418 | 		8                       // 0x8
0xD3A4 | 0x0004        | 00419 | 		4                       // 0x4
0xD3A5 | 0x0004        | 00420 | 		4                       // 0x4
0xD3A6 | 0x0078        | 00421 | 		120                     // 0x78
0xD3A7 | 0x0038        | 00422 | 		56                      // 0x38
0xD3A8 | 0x0044        | 00423 | 		68                      // 0x44
0xD3A9 | 0x0044        | 00424 | 		68                      // 0x44
0xD3AA | 0x0044        | 00425 | 		68                      // 0x44
0xD3AB | 0x0038        | 00426 | 		56                      // 0x38
0xD3AC | 0x007C        | 00427 | 		124                     // 0x7c
0xD3AD | 0x0014        | 00428 | 		20                      // 0x14
0xD3AE | 0x0014        | 00429 | 		20                      // 0x14
0xD3AF | 0x0014        | 00430 | 		20                      // 0x14
0xD3B0 | 0x0008        | 00431 | 		8                       // 0x8
0xD3B1 | 0x0008        | 00432 | 		8                       // 0x8
0xD3B2 | 0x0014        | 00433 | 		20                      // 0x14
0xD3B3 | 0x0014        | 00434 | 		20                      // 0x14
0xD3B4 | 0x0018        | 00435 | 		24                      // 0x18
0xD3B5 | 0x007C        | 00436 | 		124                     // 0x7c
0xD3B6 | 0x007C        | 00437 | 		124                     // 0x7c
0xD3B7 | 0x0008        | 00438 | 		8                       // 0x8
0xD3B8 | 0x0004        | 00439 | 		4                       // 0x4
0xD3B9 | 0x0004        | 00440 | 		4                       // 0x4
0xD3BA | 0x0008        | 00441 | 		8                       // 0x8
0xD3BB | 0x0048        | 00442 | 		72                      // 0x48
0xD3BC | 0x0054        | 00443 | 		84                      // 0x54
0xD3BD | 0x0054        | 00444 | 		84                      // 0x54
0xD3BE | 0x0054        | 00445 | 		84                      // 0x54
0xD3BF | 0x0020        | 00446 | 		32                      // 0x20
0xD3C0 | 0x0004        | 00447 | 		4                       // 0x4
0xD3C1 | 0x003F        | 00448 | 		63                      // 0x3f
0xD3C2 | 0x0044        | 00449 | 		68                      // 0x44
0xD3C3 | 0x0040        | 00450 | 		64                      // 0x40
0xD3C4 | 0x0020        | 00451 | 		32                      // 0x20
0xD3C5 | 0x003C        | 00452 | 		60                      // 0x3c
0xD3C6 | 0x0040        | 00453 | 		64                      // 0x40
0xD3C7 | 0x0040        | 00454 | 		64                      // 0x40
0xD3C8 | 0x0020        | 00455 | 		32                      // 0x20
0xD3C9 | 0x007C        | 00456 | 		124                     // 0x7c
0xD3CA | 0x001C        | 00457 | 		28                      // 0x1c
0xD3CB | 0x0020        | 00458 | 		32                      // 0x20
0xD3CC | 0x0040        | 00459 | 		64                      // 0x40
0xD3CD | 0x0020        | 00460 | 		32                      // 0x20
0xD3CE | 0x001C        | 00461 | 		28                      // 0x1c
0xD3CF | 0x003C        | 00462 | 		60                      // 0x3c
0xD3D0 | 0x0040        | 00463 | 		64                      // 0x40
0xD3D1 | 0x0030        | 00464 | 		48                      // 0x30
0xD3D2 | 0x0040        | 00465 | 		64                      // 0x40
0xD3D3 | 0x003C        | 00466 | 		60                      // 0x3c
0xD3D4 | 0x0044        | 00467 | 		68                      // 0x44
0xD3D5 | 0x0028        | 00468 | 		40                      // 0x28
0xD3D6 | 0x0010        | 00469 | 		16                      // 0x10
0xD3D7 | 0x0028        | 00470 | 		40                      // 0x28
0xD3D8 | 0x0044        | 00471 | 		68                      // 0x44
0xD3D9 | 0x000C        | 00472 | 		12                      // 0xc
0xD3DA | 0x0050        | 00473 | 		80                      // 0x50
0xD3DB | 0x0050        | 00474 | 		80                      // 0x50
0xD3DC | 0x0050        | 00475 | 		80                      // 0x50
0xD3DD | 0x003C        | 00476 | 		60                      // 0x3c
0xD3DE | 0x0044        | 00477 | 		68                      // 0x44
0xD3DF | 0x0064        | 00478 | 		100                     // 0x64
0xD3E0 | 0x0054        | 00479 | 		84                      // 0x54
0xD3E1 | 0x004C        | 00480 | 		76                      // 0x4c
0xD3E2 | 0x0044        | 00481 | 		68                      // 0x44
0xD3E3 | 0x0000        | 00482 | 		0                       // 0x0
0xD3E4 | 0x0008        | 00483 | 		8                       // 0x8
0xD3E5 | 0x0036        | 00484 | 		54                      // 0x36
0xD3E6 | 0x0041        | 00485 | 		65                      // 0x41
0xD3E7 | 0x0000        | 00486 | 		0                       // 0x0
0xD3E8 | 0x0000        | 00487 | 		0                       // 0x0
0xD3E9 | 0x0000        | 00488 | 		0                       // 0x0
0xD3EA | 0x007F        | 00489 | 		127                     // 0x7f
0xD3EB | 0x0000        | 00490 | 		0                       // 0x0
0xD3EC | 0x0000        | 00491 | 		0                       // 0x0
0xD3ED | 0x0000        | 00492 | 		0                       // 0x0
0xD3EE | 0x0041        | 00493 | 		65                      // 0x41
0xD3EF | 0x0036        | 00494 | 		54                      // 0x36
0xD3F0 | 0x0008        | 00495 | 		8                       // 0x8
0xD3F1 | 0x0000        | 00496 | 		0                       // 0x0
0xD3F2 | 0x0002        | 00497 | 		2                       // 0x2
0xD3F3 | 0x0001        | 00498 | 		1                       // 0x1
0xD3F4 | 0x0002        | 00499 | 		2                       // 0x2
0xD3F5 | 0x0004        | 00500 | 		4                       // 0x4
0xD3F6 | 0x0002        | 00501 | 		2                       // 0x2
0xD3F7 | 0x0008        | 00502 | 		8                       // 0x8
0xD3F8 | 0x000C        | 00503 | 		12                      // 0xc
0xD3F9 | 0x000E        | 00504 | 		14                      // 0xe
0xD3FA | 0x000C        | 00505 | 		12                      // 0xc
0xD3FB | 0x0008        | 00506 | 		8                       // 0x8
0xD3FC | 0x0008        | 00507 | 		8                       // 0x8
0xD3FD | 0x0018        | 00508 | 		24                      // 0x18
0xD3FE | 0x0038        | 00509 | 		56                      // 0x38
0xD3FF | 0x0018        | 00510 | 		24                      // 0x18
0xD400 | 0x0008        | 00511 | 		8                       // 0x8
0xD401 | 0x0000        | 00512 | 		0                       // 0x0
0xD402 | 0x000F        | 00513 | 		15                      // 0xf
0xD403 | 0x0009        | 00514 | 		9                       // 0x9
0xD404 | 0x0009        | 00515 | 		9                       // 0x9
0xD405 | 0x000F        | 00516 | 		15                      // 0xf
0xD406 | 0x0018        | 00517 | 		24                      // 0x18
0xD407 | 0x003C        | 00518 | 		60                      // 0x3c
0xD408 | 0x007E        | 00519 | 		126                     // 0x7e
0xD409 | 0x0018        | 00520 | 		24                      // 0x18
0xD40A | 0x0018        | 00521 | 		24                      // 0x18
0xD40B | 0x0018        | 00522 | 		24                      // 0x18
0xD40C | 0x0018        | 00523 | 		24                      // 0x18
0xD40D | 0x007E        | 00524 | 		126                     // 0x7e
0xD40E | 0x003C        | 00525 | 		60                      // 0x3c
0xD40F | 0x0018        | 00526 | 		24                      // 0x18
0xD410 | 0x001C        | 00527 | 		28                      // 0x1c
0xD411 | 0x0022        | 00528 | 		34                      // 0x22
0xD412 | 0x00C1        | 00529 | 		193                     // 0xc1
0xD413 | 0x0022        | 00530 | 		34                      // 0x22
0xD414 | 0x001C        | 00531 | 		28                      // 0x1c
0xD415 | 0x0002        | 00532 | 		2                       // 0x2
0xD416 | 0x0004        | 00533 | 		4                       // 0x4
0xD417 | 0x00FF        | 00534 | 		255                     // 0xff
0xD418 | 0x0004        | 00535 | 		4                       // 0x4
0xD419 | 0x0002        | 00536 | 		2                       // 0x2
0xD41A | 0x0002        | 00537 | 		2                       // 0x2
0xD41B | 0x0001        | 00538 | 		1                       // 0x1
0xD41C | 0x0000        | 00539 | 		0                       // 0x0
0xD41D | 0x0001        | 00540 | 		1                       // 0x1
0xD41E | 0x0002        | 00541 | 		2                       // 0x2
0xD41F | 0x0018        | 00542 | 		24                      // 0x18
0xD420 | 0x0004        | 00543 | 		4                       // 0x4
0xD421 | 0x00FF        | 00544 | 		255                     // 0xff
0xD422 | 0x0004        | 00545 | 		4                       // 0x4
0xD423 | 0x0018        | 00546 | 		24                      // 0x18
0xD424 | 0x0000        | 00547 | 		0                       // 0x0
0xD425 | 0x000F        | 00548 | 		15                      // 0xf
0xD426 | 0x0000        | 00549 | 		0                       // 0x0
0xD427 | 0x000F        | 00550 | 		15                      // 0xf
0xD428 | 0x0000        | 00551 | 		0                       // 0x0
       |               | 00552 | 
0xD429 |               | 00553 | sxc__ZZ17OLED_profile_pagejE4text:      // @_ZZ17OLED_profile_pagejE4text
0xD429 | 0x0050        | 00554 | 		80                      // 0x50
0xD42A | 0x0072        | 00555 | 		114                     // 0x72
0xD42B | 0x006F        | 00556 | 		111                     // 0x6f
0xD42C | 0x0066        | 00557 | 		102                     // 0x66
0xD42D | 0x0069        | 00558 | 		105                     // 0x69
0xD42E | 0x006C        | 00559 | 		108                     // 0x6c
0xD42F | 0x0065        | 00560 | 		101                     // 0x65
0xD430 | 0x0020        | 00561 | 		32                      // 0x20
0xD431 | 0x0023        | 00562 | 		35                      // 0x23
       |               | 00563 | 
0xD432 |               | 00564 | sxc__ZZ17OLED_profile_pagejE5text2:     // @_ZZ17OLED_profile_pagejE5text2
0xD432 | 0x0073        | 00565 | 		115                     // 0x73
0xD433 | 0x006F        | 00566 | 		111                     // 0x6f
0xD434 | 0x0061        | 00567 | 		97                      // 0x61
0xD435 | 0x006B        | 00568 | 		107                     // 0x6b
0xD436 | 0x0020        | 00569 | 		32                      // 0x20
0xD437 | 0x0074        | 00570 | 		116                     // 0x74
0xD438 | 0x0069        | 00571 | 		105                     // 0x69
0xD439 | 0x006D        | 00572 | 		109                     // 0x6d
0xD43A | 0x0065        | 00573 | 		101                     // 0x65
0xD43B | 0x003D        | 00574 | 		61                      // 0x3d
       |               | 00575 | 
0xD43C |               | 00576 | sxc__ZZ17OLED_profile_pagejE5text3:     // @_ZZ17OLED_profile_pagejE5text3
0xD43C | 0x0073        | 00577 | 		115                     // 0x73
0xD43D | 0x0070        | 00578 | 		112                     // 0x70
0xD43E | 0x0069        | 00579 | 		105                     // 0x69
0xD43F | 0x006B        | 00580 | 		107                     // 0x6b
0xD440 | 0x0065        | 00581 | 		101                     // 0x65
0xD441 | 0x0020        | 00582 | 		32                      // 0x20
0xD442 | 0x0074        | 00583 | 		116                     // 0x74
0xD443 | 0x0069        | 00584 | 		105                     // 0x69
0xD444 | 0x006D        | 00585 | 		109                     // 0x6d
0xD445 | 0x0065        | 00586 | 		101                     // 0x65
0xD446 | 0x003D        | 00587 | 		61                      // 0x3d
       |               | 00588 | 
0xD447 |               | 00589 | sxc__ZZ18OLED_profile_timesPjE5text4:   // @_ZZ18OLED_profile_timesPjE5text4
0xD447 | 0x0063        | 00590 | 		99                      // 0x63
0xD448 | 0x006F        | 00591 | 		111                     // 0x6f
0xD449 | 0x006F        | 00592 | 		111                     // 0x6f
0xD44A | 0x006C        | 00593 | 		108                     // 0x6c
0xD44B | 0x0069        | 00594 | 		105                     // 0x69
0xD44C | 0x006E        | 00595 | 		110                     // 0x6e
0xD44D | 0x0067        | 00596 | 		103                     // 0x67
0xD44E | 0x0020        | 00597 | 		32                      // 0x20
0xD44F | 0x0074        | 00598 | 		116                     // 0x74
0xD450 | 0x0069        | 00599 | 		105                     // 0x69
0xD451 | 0x006D        | 00600 | 		109                     // 0x6d
0xD452 | 0x0065        | 00601 | 		101                     // 0x65
0xD453 | 0x003D        | 00602 | 		61                      // 0x3d
       |               | 00603 | 
0xD454 |               | 00604 | sxc__ZZ21OLED_display_progressjE4arr1:  // @_ZZ21OLED_display_progressjE4arr1
0xD454 | 0x0050        | 00605 | 		80                      // 0x50
0xD455 | 0x0072        | 00606 | 		114                     // 0x72
0xD456 | 0x006F        | 00607 | 		111                     // 0x6f
0xD457 | 0x0066        | 00608 | 		102                     // 0x66
0xD458 | 0x0069        | 00609 | 		105                     // 0x69
0xD459 | 0x006C        | 00610 | 		108                     // 0x6c
0xD45A | 0x0065        | 00611 | 		101                     // 0x65
0xD45B | 0x003A        | 00612 | 		58                      // 0x3a
0xD45C | 0x0023        | 00613 | 		35                      // 0x23
       |               | 00614 | 
0xD45D |               | 00615 | sxc__ZZ21OLED_display_progressjE12arr_progress: // @_ZZ21OLED_display_progressjE12arr_progress
0xD45D | 0x0050        | 00616 | 		80                      // 0x50
0xD45E | 0x0072        | 00617 | 		114                     // 0x72
0xD45F | 0x006F        | 00618 | 		111                     // 0x6f
0xD460 | 0x0067        | 00619 | 		103                     // 0x67
0xD461 | 0x0072        | 00620 | 		114                     // 0x72
0xD462 | 0x0065        | 00621 | 		101                     // 0x65
0xD463 | 0x0073        | 00622 | 		115                     // 0x73
0xD464 | 0x0073        | 00623 | 		115                     // 0x73
0xD465 | 0x003A        | 00624 | 		58                      // 0x3a
       |               | 00625 | 
0xD466 |               | 00626 | sxc__ZZ21OLED_display_progressjE8arr_temp: // @_ZZ21OLED_display_progressjE8arr_temp
0xD466 | 0x0054        | 00627 | 		84                      // 0x54
0xD467 | 0x0065        | 00628 | 		101                     // 0x65
0xD468 | 0x006D        | 00629 | 		109                     // 0x6d
0xD469 | 0x0070        | 00630 | 		112                     // 0x70
0xD46A | 0x0065        | 00631 | 		101                     // 0x65
0xD46B | 0x0072        | 00632 | 		114                     // 0x72
0xD46C | 0x0061        | 00633 | 		97                      // 0x61
0xD46D | 0x0074        | 00634 | 		116                     // 0x74
0xD46E | 0x0075        | 00635 | 		117                     // 0x75
0xD46F | 0x0072        | 00636 | 		114                     // 0x72
0xD470 | 0x0065        | 00637 | 		101                     // 0x65
0xD471 | 0x003A        | 00638 | 		58                      // 0x3a
       |               | 00639 | 
0xD472 |               | 00640 | sxc__ZZ21OLED_display_progressjE7arr_hum: // @_ZZ21OLED_display_progressjE7arr_hum
0xD472 | 0x0048        | 00641 | 		72                      // 0x48
0xD473 | 0x0075        | 00642 | 		117                     // 0x75
0xD474 | 0x006D        | 00643 | 		109                     // 0x6d
0xD475 | 0x0069        | 00644 | 		105                     // 0x69
0xD476 | 0x0064        | 00645 | 		100                     // 0x64
0xD477 | 0x0069        | 00646 | 		105                     // 0x69
0xD478 | 0x0074        | 00647 | 		116                     // 0x74
0xD479 | 0x0079        | 00648 | 		121                     // 0x79
0xD47A | 0x003A        | 00649 | 		58                      // 0x3a
       |               | 00650 | 
0xD47B |               | 00651 | sxc__ZZ17OLED_end_progressvE4text:      // @_ZZ17OLED_end_progressvE4text
0xD47B | 0x0043        | 00652 | 		67                      // 0x43
0xD47C | 0x006F        | 00653 | 		111                     // 0x6f
0xD47D | 0x006D        | 00654 | 		109                     // 0x6d
0xD47E | 0x0070        | 00655 | 		112                     // 0x70
0xD47F | 0x006C        | 00656 | 		108                     // 0x6c
0xD480 | 0x0065        | 00657 | 		101                     // 0x65
0xD481 | 0x0074        | 00658 | 		116                     // 0x74
0xD482 | 0x0065        | 00659 | 		101                     // 0x65
0xD483 | 0x0021        | 00660 | 		33                      // 0x21
       |               | 00661 | 
0xD484 |               | 00662 | sxc__ZZ17OLED_end_progressvE5text2:     // @_ZZ17OLED_end_progressvE5text2
0xD484 | 0x004F        | 00663 | 		79                      // 0x4f
0xD485 | 0x0070        | 00664 | 		112                     // 0x70
0xD486 | 0x0065        | 00665 | 		101                     // 0x65
0xD487 | 0x006E        | 00666 | 		110                     // 0x6e
0xD488 | 0x0020        | 00667 | 		32                      // 0x20
0xD489 | 0x004F        | 00668 | 		79                      // 0x4f
0xD48A | 0x0076        | 00669 | 		118                     // 0x76
0xD48B | 0x0065        | 00670 | 		101                     // 0x65
0xD48C | 0x006E        | 00671 | 		110                     // 0x6e
0xD48D | 0x0020        | 00672 | 		32                      // 0x20
0xD48E | 0x0044        | 00673 | 		68                      // 0x44
0xD48F | 0x006F        | 00674 | 		111                     // 0x6f
0xD490 | 0x006F        | 00675 | 		111                     // 0x6f
0xD491 | 0x0072        | 00676 | 		114                     // 0x72
       |               | 00677 | 
0xD492 |               | 00678 | sxc__ZZ20OLED_display_warningvE4text:   // @_ZZ20OLED_display_warningvE4text
0xD492 | 0x0057        | 00679 | 		87                      // 0x57
0xD493 | 0x0041        | 00680 | 		65                      // 0x41
0xD494 | 0x0052        | 00681 | 		82                      // 0x52
0xD495 | 0x004E        | 00682 | 		78                      // 0x4e
0xD496 | 0x0049        | 00683 | 		73                      // 0x49
0xD497 | 0x004E        | 00684 | 		78                      // 0x4e
0xD498 | 0x0047        | 00685 | 		71                      // 0x47
       |               | 00686 | 
0xD499 |               | 00687 | sxc__ZZ20OLED_display_warningvE5text1:  // @_ZZ20OLED_display_warningvE5text1
0xD499 | 0x0048        | 00688 | 		72                      // 0x48
0xD49A | 0x0075        | 00689 | 		117                     // 0x75
0xD49B | 0x006D        | 00690 | 		109                     // 0x6d
0xD49C | 0x0069        | 00691 | 		105                     // 0x69
0xD49D | 0x0064        | 00692 | 		100                     // 0x64
0xD49E | 0x0069        | 00693 | 		105                     // 0x69
0xD49F | 0x0074        | 00694 | 		116                     // 0x74
0xD4A0 | 0x0079        | 00695 | 		121                     // 0x79
0xD4A1 | 0x0020        | 00696 | 		32                      // 0x20
0xD4A2 | 0x0069        | 00697 | 		105                     // 0x69
0xD4A3 | 0x0073        | 00698 | 		115                     // 0x73
0xD4A4 | 0x0020        | 00699 | 		32                      // 0x20
0xD4A5 | 0x0067        | 00700 | 		103                     // 0x67
0xD4A6 | 0x0072        | 00701 | 		114                     // 0x72
0xD4A7 | 0x0065        | 00702 | 		101                     // 0x65
0xD4A8 | 0x0061        | 00703 | 		97                      // 0x61
0xD4A9 | 0x0074        | 00704 | 		116                     // 0x74
0xD4AA | 0x0065        | 00705 | 		101                     // 0x65
0xD4AB | 0x0072        | 00706 | 		114                     // 0x72
       |               | 00707 | 
0xD4AC |               | 00708 | sxc__ZZ20OLED_display_warningvE5text2:  // @_ZZ20OLED_display_warningvE5text2
0xD4AC | 0x0074        | 00709 | 		116                     // 0x74
0xD4AD | 0x0068        | 00710 | 		104                     // 0x68
0xD4AE | 0x0061        | 00711 | 		97                      // 0x61
0xD4AF | 0x006E        | 00712 | 		110                     // 0x6e
0xD4B0 | 0x0020        | 00713 | 		32                      // 0x20
0xD4B1 | 0x006D        | 00714 | 		109                     // 0x6d
0xD4B2 | 0x0061        | 00715 | 		97                      // 0x61
0xD4B3 | 0x0078        | 00716 | 		120                     // 0x78
0xD4B4 | 0x0069        | 00717 | 		105                     // 0x69
0xD4B5 | 0x006D        | 00718 | 		109                     // 0x6d
0xD4B6 | 0x0075        | 00719 | 		117                     // 0x75
0xD4B7 | 0x006D        | 00720 | 		109                     // 0x6d
       |               | 00721 | 
0xD4B8 |               | 00722 | sxc__ZZ27OLED_display_second_warningvE5text3: // @_ZZ27OLED_display_second_warningvE5text3
0xD4B8 | 0x0050        | 00723 | 		80                      // 0x50
0xD4B9 | 0x0075        | 00724 | 		117                     // 0x75
0xD4BA | 0x0073        | 00725 | 		115                     // 0x73
0xD4BB | 0x0068        | 00726 | 		104                     // 0x68
0xD4BC | 0x0020        | 00727 | 		32                      // 0x20
0xD4BD | 0x0062        | 00728 | 		98                      // 0x62
0xD4BE | 0x0075        | 00729 | 		117                     // 0x75
0xD4BF | 0x0074        | 00730 | 		116                     // 0x74
0xD4C0 | 0x0074        | 00731 | 		116                     // 0x74
0xD4C1 | 0x006F        | 00732 | 		111                     // 0x6f
0xD4C2 | 0x006E        | 00733 | 		110                     // 0x6e
       |               | 00734 | 
0xD4C3 |               | 00735 | sxc__ZZ27OLED_display_second_warningvE5text4: // @_ZZ27OLED_display_second_warningvE5text4
0xD4C3 | 0x0074        | 00736 | 		116                     // 0x74
0xD4C4 | 0x006F        | 00737 | 		111                     // 0x6f
0xD4C5 | 0x0020        | 00738 | 		32                      // 0x20
0xD4C6 | 0x0061        | 00739 | 		97                      // 0x61
0xD4C7 | 0x0063        | 00740 | 		99                      // 0x63
0xD4C8 | 0x006B        | 00741 | 		107                     // 0x6b
0xD4C9 | 0x006E        | 00742 | 		110                     // 0x6e
0xD4CA | 0x006F        | 00743 | 		111                     // 0x6f
0xD4CB | 0x0077        | 00744 | 		119                     // 0x77
0xD4CC | 0x006C        | 00745 | 		108                     // 0x6c
0xD4CD | 0x0065        | 00746 | 		101                     // 0x65
0xD4CE | 0x0064        | 00747 | 		100                     // 0x64
0xD4CF | 0x0067        | 00748 | 		103                     // 0x67
0xD4D0 | 0x0065        | 00749 | 		101                     // 0x65
       |               | 00750 | 
0xD4D1 |               | 00751 | 	sxc_current_temp: @ = @ + 1 // .lcomm // @current_temp
0xD4D2 |               | 00752 | 	sxc_humidity: @ = @ + 1 // .lcomm // @humidity
0xD4D3 |               | 00753 | 	sxc_btn_press: @ = @ + 1 // .lcomm // @btn_press
0xD4D4 |               | 00754 | sxc_r_encoder:                          // @r_encoder
0xD4D4 | 0x0000        | 00755 | 		0                       // 0x0
0xD4D5 | 0x0003        | 00756 | 		3                       // 0x3
0xD4D6 | 0x0000        | 00757 | 		0                       // 0x0
       |               | 00758 | 
0xD4D7 |               | 00759 | sxc_profile_index:                      // @profile_index
0xD4D7 | 0x0001        | 00760 | 		1                       // 0x1
       |               | 00761 | 
0xD4D8 |               | 00762 | 	sxc_target_temp_index: @ = @ + 1 // .lcomm // @target_temp_index
0xD4D9 |               | 00763 | 	sxc_progress: @ = @ + 1 // .lcomm // @progress
0xD4DA |               | 00764 | 	sxc_selected_profile: @ = @ + 141 // .lcomm // @selected_profile
0xD567 |               | 00765 | sxc_progress_scaler:                    // @progress_scaler
0xD567 | 0x008D        | 00766 | 		141                     // 0x8d
       |               | 00767 | 
0xD568 |               | 00768 | 	sxc_print_humidity: @ = @ + 1 // .lcomm // @print_humidity
0xD569 |               | 00769 | sxc_profile_array:                      // @profile_array
0xD569 | 0x001E        | 00770 | 		30                      // 0x1e
0xD56A | 0x0078        | 00771 | 		120                     // 0x78
0xD56B | 0x00D2        | 00772 | 		210                     // 0xd2
0xD56C | 0x0005        | 00773 | 		5                       // 0x5
0xD56D | 0x0001        | 00774 | 		1                       // 0x1
0xD56E | 0x0002        | 00775 | 		2                       // 0x2
0xD56F | 0x005A        | 00776 | 		90                      // 0x5a
0xD570 | 0x00B4        | 00777 | 		180                     // 0xb4
0xD571 | 0x00F0        | 00778 | 		240                     // 0xf0
0xD572 | 0x0003        | 00779 | 		3                       // 0x3
0xD573 | 0x0000        | 00780 | 		0                       // 0x0
0xD574 | 0x0003        | 00781 | 		3                       // 0x3
0xD575 | 0x005A        | 00782 | 		90                      // 0x5a
0xD576 | 0x00B4        | 00783 | 		180                     // 0xb4
0xD577 | 0x00E8        | 00784 | 		232                     // 0xe8
0xD578 | 0x0002        | 00785 | 		2                       // 0x2
0xD579 | 0x0000        | 00786 | 		0                       // 0x0
0xD57A | 0x0002        | 00787 | 		2                       // 0x2
       |               | 00788 | 
       |               | 00789 | 
0xD57B |               | 00790 | SXCA_PARSED_CONSTRUCTOR_LIST_START:
0xD57B |               | 00791 | SXCA_PARSED_CONSTRUCTOR_LIST_END:
         >>>--------->0 Error(s), 0 Warning(s).
